  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the `Scanner` class to read input from the user, and it uses the `Math.min()` method to find the minimum distance between two points. The `Integer.MAX_VALUE` constant is used as a default value for the `minDist` variable, which is updated as the program iterates through the input data. Finally, the program prints the minimum distance or -1 if no such distance exists.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int[][] tuples = new int[n][2];
        for (int i = 0; i < n; i++) {
            tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
            tuples[i][1] = distance[i];
        }
        int minDist = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            if (tuples[i][0] == 1 && tuples[i + 1][0] == -1) {
                minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
            }
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0, minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = distance[i];
      tuples[i][1] = direction.charAt(i);
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][1] == 'R' && tuples[i + 1][1] == 'L') {
        minDist = Math.min(minDist, (tuples[i + 1][0] - tuples[i][0]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (direction.charAt(i) == 'R' && direction.charAt(i + 1) == 'L') {
        minDist = Math.min(minDist, (distance[i + 1] - distance[i]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }

    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][0] == 1 && tuples[i + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0, minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (direction.charAt(i) == 'R' && direction.charAt(i + 1) == 'L') {
        minDist = Math.min(minDist, (distance[i + 1] - distance[i]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : 0;
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == 0) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }

        int[][] tuples = new int[n][2];
        for (int i = 0; i < n; i++) {
            tuples[i][0] = direction.charAt(i);
            tuples[i][1] = distance[i];
        }

        int minDist = 2147483647;
        for (int i = 0; i < n - 1; i++) {
            if (tuples[i][0] == 'R' && tuples[i + 1][0] == 'L') {
                minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
            }
        }

        if (minDist == 2147483647) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and it uses the `Math.min()` method to find the minimum distance between two points. The `Integer.MAX_VALUE` constant is used to initialize the `minDist` variable to a large value, which is then updated to the minimum distance between two points if a smaller distance is found.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i + 1 < n; i++) {
      if (direction.charAt(i) == 'R' && direction.charAt(i + 1) == 'L') {
        minDist = Math.min(minDist, (distance[i + 1] - distance[i]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }

    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (direction.charAt(i) == 'R' && direction.charAt(i + 1) == 'L') {
        minDist = Math.min(minDist, (distance[i + 1] - distance[i]) / 2);
      }
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][0] == 1 && tuples[i + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i);
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < tuples.length) {
      if (tuples[idx][0] == 'R' && tuples[idx + 1][0] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (direction.charAt(i) == 'R' && direction.charAt(i + 1) == 'L') {
        minDist = Math.min(minDist, (distance[i + 1] - distance[i]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : 0;
      tuples[i][1] = distance[i];
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][0] == 1 && tuples[i + 1][0] == 0) {
        minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n - 1][2];
    for (int i = 0; i < n - 1; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][0] == 1 && tuples[i + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }

    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = (int) 2e31 - 1;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == (int) 2e31 - 1) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }

        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }

        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code that is equivalent to the given Python code. The code uses the `Scanner` class to read input from the user, and it uses the `Math.min()` method to find the minimum distance between two points. The code also uses the `Integer.MAX_VALUE` constant to initialize the `minDist` variable to a large value, and it uses the `Math.min()` method to update the `minDist` variable with the minimum distance between two points. Finally, the code uses the `System.out.println()` method to print the minimum distance between two points, or -1 if there are no points between two points.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = distance[i];
      tuples[i][1] = direction.charAt(i);
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][1] == 'R' && tuples[idx + 1][1] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][0] - tuples[idx][0]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i);
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < tuples.length) {
      if (tuples[idx][0] == 'R' && tuples[idx + 1][0] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. It uses the same logic to read input, create the tuples array, and iterate through the array to find the minimum distance between two "L" and "R" pairs. The only difference is that Java has a different syntax for reading input and creating arrays.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < tuples.length) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < distance.length) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the same logic and data structures as the Python code, but is written in Java.

Note that the `Scanner` class is used to read input from the user, and the `Math.min` method is used to find the minimum value of two integers. The `Integer.MAX_VALUE` constant is used to initialize the `minDist` variable to a large value, which is later updated to the minimum distance between two points if the condition is met.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i);
      tuples[i][1] = distance[i];
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 'R' && tuples[idx + 1][0] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        scanner.close();

        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }

        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and the `Math` class to perform mathematical operations. The `Integer.MAX_VALUE` constant is used to initialize the `minDist` variable to the maximum possible value of an integer, and the `Math.min()` method is used to compare the distances and find the minimum value. Finally, the `System.out.println()` method is used to print the result to the console.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }

        int idx = 0, minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }

        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i);
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 'R' && tuples[idx + 1][0] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int idx = 0, minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
                minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = (int)Math.pow(2, 31) - 1;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == (int)Math.pow(2, 31) - 1) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

In this implementation, we first read the input from the user using the `Scanner` class. We then create an array `distance` to store the input values.

We then initialize the `idx` variable to 0 and the `minDist` variable to a large value (2^31 - 1) to keep track of the minimum distance.

We then iterate through the array `distance` using a while loop, and for each iteration, we check if the current element is equal to 'R' and the next element is equal to 'L'. If this is the case, we calculate the distance between the two elements and update the `minDist` variable with the minimum of the current value and
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    List<Integer> distance = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      distance.add(scanner.nextInt());
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.size()) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance.get(idx + 1) - distance.get(idx)) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i] = new int[] {direction.charAt(i), distance[i]};
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 'R' && tuples[idx + 1][0] == 'L') {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int[][] tuples = new int[n][2];
        for (int i = 0; i < n; i++) {
            tuples[i][0] = direction.charAt(i) - 'A';
            tuples[i][1] = distance[i];
        }
        int idx = 0, minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (tuples[idx][0] == 0 && tuples[idx + 1][0] == 1) {
                minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int[][] tuples = new int[n][2];
        for (int i = 0; i < n; i++) {
            tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
            tuples[i][1] = distance[i];
        }
        int idx = 0;
        int minDist = Integer.MAX_VALUE;
        while (idx + 1 < n) {
            if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
                minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
            }
            idx++;
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String direction = sc.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = sc.nextInt();
    }

    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and it uses the `Math.min()` method to find the minimum distance between two points. The `Integer.MAX_VALUE` constant is used to initialize the `minDist` variable to a large value, and it is updated to the minimum distance between two points if the condition is satisfied. Finally, the `System.out.println()` method is used to print the minimum distance or `-1` if no such distance exists.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The main differences are:

* In Python, the `input()` function is used to read user input. In Java, we use a `Scanner` object to read user input.
* In Python, we use a list comprehension to create the `distance` array. In Java, we use a traditional `for` loop to create the `distance` array.
* In Python, we use the `zip()` function to create a list of tuples from the `direction` and `distance` arrays. In Java, we use the `Arrays.asList()` method to create a list of tuples from the `direction` and `distance` arrays.
* In Python, we use the `min()` function to find the minimum value in the
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int minDist = Integer.MAX_VALUE;
    for (int i = 0; i < n - 1; i++) {
      if (tuples[i][0] == 1 && tuples[i + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
      }
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }

    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String direction = scanner.next();
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = scanner.nextInt();
        }
        int[][] tuples = new int[n][2];
        for (int i = 0; i < n; i++) {
            tuples[i][0] = i;
            tuples[i][1] = distance[i];
        }
        int minDist = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            if (tuples[i][0] == 'R' && tuples[i + 1][0] == 'L') {
                minDist = Math.min(minDist, (tuples[i + 1][1] - tuples[i][1]) / 2);
            }
        }
        if (minDist == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(minDist);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }

    int idx = 0;
    int minDist = Integer.MAX_VALUE;
    while (idx + 1 < distance.length) {
      if (direction.charAt(idx) == 'R' && direction.charAt(idx + 1) == 'L') {
        minDist = Math.min(minDist, (distance[idx + 1] - distance[idx]) / 2);
      }
      idx++;
    }

    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]

This is the Java code that converts the Python code. It uses the same logic and data structures as the Python code, but in Java. The `Scanner` class is used to read input from the user, and the `Math.min` method is used to find the minimum value in an array. The `Integer.MAX_VALUE` constant is used to represent the maximum value of an `int` in Java.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    String direction = scanner.next();
    int[] distance = new int[n];
    for (int i = 0; i < n; i++) {
      distance[i] = scanner.nextInt();
    }
    int[][] tuples = new int[n][2];
    for (int i = 0; i < n; i++) {
      tuples[i][0] = direction.charAt(i) == 'R' ? 1 : -1;
      tuples[i][1] = distance[i];
    }
    int idx = 0, minDist = Integer.MAX_VALUE;
    while (idx + 1 < n) {
      if (tuples[idx][0] == 1 && tuples[idx + 1][0] == -1) {
        minDist = Math.min(minDist, (tuples[idx + 1][1] - tuples[idx][1]) / 2);
      }
      idx++;
    }
    if (minDist == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(minDist);
    }
  }
}
[/JAVA]
======
