  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < B[i]; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][(1 << N) + 1];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < (1 << N); j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < (1 << N); j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != 20000000) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == 20000000) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = scanner.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = scanner.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    Set<Integer>[] C = new HashSet[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = new HashSet<>();
      for (int j = 0; j < N; j++) {
        C[i].add(sc.nextInt());
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != Integer.MAX_VALUE) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = scanner.nextInt();
      B[i] = scanner.nextInt();
      C[i] = scanner.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= 1 << (bit - 1);
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int INF = 2 * 10000000;
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    HashSet<Integer>[] C = new HashSet[M];
    for (int i = 0; i < M; i++) {
      A[i] = scanner.nextInt();
      B[i] = scanner.nextInt();
      C[i] = new HashSet<>();
      for (int j = 0; j < N; j++) {
        C[i].add(scanner.nextInt());
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.BitSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        BitSet[] C = new BitSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = new BitSet(N);
            for (int j = 0; j < N; j++) {
                if (scanner.nextInt() == 1) {
                    C[i].set(j);
                }
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < B[i]; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][(1 << N) + 1];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = scanner.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][(1 << N) + 1];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < (1 << N); j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][(1 << N) + 1];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < (1 << N); j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != Integer.MAX_VALUE) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < (1 << N); j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    Set<Integer>[] C = new HashSet[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = new HashSet<>();
      for (int j = 0; j < N; j++) {
        C[i].add(sc.nextInt());
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = scanner.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = scanner.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][(1 << N) + 1];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  private static final int INF = 2 * 10000000;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[][] C = new int[M][N];
    for (int i = 0; i < M; i++) {
      A[i] = scanner.nextInt();
      B[i] = scanner.nextInt();
      for (int j = 0; j < N; j++) {
        C[i][j] = scanner.nextInt();
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(scanner.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(scanner.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    Set<Integer>[] C = new HashSet[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = new HashSet<>();
      for (int j = 0; j < sc.nextInt(); j++) {
        C[i].add(sc.nextInt());
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != INF) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == INF) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        for (int i = 0; i < M + 1; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        ArrayList<Integer> A = new ArrayList<>();
        ArrayList<Integer> B = new ArrayList<>();
        ArrayList<HashSet<Integer>> C = new ArrayList<>();
        for (int i = 0; i < M; i++) {
            A.add(scanner.nextInt());
            B.add(scanner.nextInt());
            C.add(new HashSet<>());
            for (int j = 0; j < N; j++) {
                C.get(i).add(scanner.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C.get(i)) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A.get(i));
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new int[sc.nextInt()];
            for (int j = 0; j < C[i].length; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = scanner.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[-1][-1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int INF = 2 * 10000000;
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(scanner.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int M = sc.nextInt();
		int[] A = new int[M];
		int[] B = new int[M];
		int[] C = new int[M];
		for (int i = 0; i < M; i++) {
			A[i] = sc.nextInt();
			B[i] = sc.nextInt();
			C[i] = sc.nextInt();
		}
		int INF = 2 * 10000000;
		int[][] dp = new int[M + 1][1 << N];
		dp[0][0] = 0;
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < 1 << N; j++) {
				dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
				if (dp[i][j] != INF) {
					int nextBit = j;
					for (int bit : C[i]) {
						nextBit |= (1 << (bit - 1));
					}
					dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
				}
			}
		}
		int ans = dp[M][(1 << N) - 1];
		if (ans == INF) {
			System.out.println(-1);
		} else {
			System.out.println(ans);
		}
	}
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[][] C = new int[M][];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = new int[sc.nextInt()];
      for (int j = 0; j < C[i].length; j++) {
        C[i][j] = sc.nextInt();
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    for (int i = 0; i < M + 1; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i][j] = Integer.MAX_VALUE;
      }
    }
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != Integer.MAX_VALUE) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    int[] C = new int[M];
    for (int i = 0; i < M; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.nextInt();
      C[i] = sc.nextInt();
    }
    int[][] dp = new int[M + 1][1 << N];
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != Integer.MAX_VALUE) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        HashSet<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < sc.nextInt(); j++) {
                C[i].add(sc.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[] C = new int[M];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        Set<Integer>[] C = new HashSet[M];
        for (int i = 0; i < M; i++) {
            A[i] = scanner.nextInt();
            B[i] = scanner.nextInt();
            C[i] = new HashSet<>();
            for (int j = 0; j < N; j++) {
                C[i].add(scanner.nextInt());
            }
        }
        int[][] dp = new int[M + 1][1 << N];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 1 << N; j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != Integer.MAX_VALUE) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == Integer.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[M];
    int[] B = new int[M];
    Set<Integer>[] C = new HashSet[M];
    for (int i = 0; i < M; i++) {
      A[i] = scanner.nextInt();
      B[i] = scanner.nextInt();
      C[i] = new HashSet<>();
      for (int j = 0; j < B[i]; j++) {
        C[i].add(scanner.nextInt());
      }
    }
    int[][] dp = new int[M + 1][1 << N];
    for (int i = 0; i < M + 1; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i][j] = Integer.MAX_VALUE;
      }
    }
    dp[0][0] = 0;
    for (int i = 0; i < M; i++) {
      for (int j = 0; j < 1 << N; j++) {
        dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
        if (dp[i][j] != Integer.MAX_VALUE) {
          int nextBit = j;
          for (int bit : C[i]) {
            nextBit |= (1 << (bit - 1));
          }
          dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
        }
      }
    }
    int ans = dp[M][(1 << N) - 1];
    if (ans == Integer.MAX_VALUE) {
      System.out.println(-1);
    } else {
      System.out.println(ans);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[M];
        int[] B = new int[M];
        int[][] C = new int[M][N];
        for (int i = 0; i < M; i++) {
            A[i] = sc.nextInt();
            B[i] = sc.nextInt();
            for (int j = 0; j < N; j++) {
                C[i][j] = sc.nextInt();
            }
        }
        int[][] dp = new int[M + 1][(1 << N)];
        dp[0][0] = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < (1 << N); j++) {
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j]);
                if (dp[i][j] != INF) {
                    int nextBit = j;
                    for (int bit : C[i]) {
                        nextBit |= (1 << (bit - 1));
                    }
                    dp[i + 1][nextBit] = Math.min(dp[i + 1][nextBit], dp[i][j] + A[i]);
                }
            }
        }
        int ans = dp[M][(1 << N) - 1];
        if (ans == INF) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}

[/JAVA]
======
