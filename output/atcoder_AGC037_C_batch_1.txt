  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<Integer>();
    for (int i = 0; i < N; i++) {
      heapq.heappush(C, new Pair(A[i] - Integer.parseInt(B[i]), i));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      Pair p = heapq.heappop(C);
      if (p.first == 0) {
        break;
      }
      int nv = Integer.parseInt(B[p.second - 1]) + Integer.parseInt(B[(p.second + 1) % N]);
      int n = -p.first / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      p.first += n * nv;
      B[p.second] -= n * nv;
      heapq.heappush(C, new Pair(p.first, p.second));
      ans += n;
    }
    System.out.println(ans);
  }
}

class Pair {
  int first;
  int second;
  
  public Pair(int first, int second) {
    this.first = first;
    this.second = second;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(-(A[i] - Integer.parseInt(B[i])));
    }
    int[] BArr = new int[N];
    for (int i = 0; i < N; i++) {
      BArr[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.remove();
      int nv = BArr[(i - 1 + N) % N] + BArr[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArr[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<int[]> C = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
    for (int i = 0; i < N; i++) {
      C.add(new int[] {A[i] - Integer.parseInt(B[i]), i});
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int[] v = C.poll();
      if (v[0] == 0) {
        break;
      }
      int nv = B[v[1] - 1] + B[(v[1] + 1) % N];
      int n = -v[0] / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v[0] += n * nv;
      B[v[1]] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.comparingInt(x -> x));
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        System.exit(0);
      }
      v += n * nv;
      C.set(v, i);
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int[] B = new int[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.nextInt();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(-(A[i] - Integer.parseInt(B[i])));
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(-v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      C.set(v, v - 1);
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    ArrayList<Integer> C = new ArrayList<>();

    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.next();
      C.add(A[i] - Integer.parseInt(B[i]));
    }

    PriorityQueue<Integer> pq = new PriorityQueue<>(C);
    B = B.map(Integer::parseInt).toArray(String[]::new);
    int ans = 0;

    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int i = pq.poll();
      int nv = B[i - 1] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BAsInt = new int[N];
    for (int i = 0; i < N; i++) {
      BAsInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = BAsInt[(i - 1 + N) % N] + BAsInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BAsInt[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>(N, (a, b) -> a - b);
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        int[] BInt = new int[N];
        for (int i = 0; i < N; i++) {
            BInt[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int i = C.poll();
            int nv = BInt[i - 1] + BInt[(i + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            BInt[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;
import java.util.List;
import java.util.ArrayList;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      C.set(i, v);
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.next();
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int i = pq.poll();
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>(N, (a, b) -> a - b);
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[i - 1] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        String[] B = scanner.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<Integer>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        for (int i = 0; i < N; i++) {
            B[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = B[(i + 1) % N] + B[(i - 1 + N) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                System.exit(0);
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>(N, (a, b) -> b - a);
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[v - 1] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[(i - 1) % N] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    PriorityQueue<Integer> C = new PriorityQueue<>();

    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.next();
      C.add(-A[i] - Integer.parseInt(B[i]));
    }

    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      int i = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] = String.valueOf(Integer.parseInt(B[i]) - n * nv);
      C.add(-v);
      ans += n;
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    int[] C = new int[N];
    for (int i = 0; i < N; i++) {
      C[i] = A[i] - Integer.parseInt(B[i]);
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C[i]);
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        System.exit(0);
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = Stream.of(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    String[] B = scanner.nextLine().split(" ");
    int[] C = new int[N];
    for (int i = 0; i < N; i++) {
      heapq.heappush(C, new Pair(A[i] - Integer.parseInt(B[i]), i));
    }
    B = Stream.of(B).mapToInt(Integer::parseInt).toArray();
    int ans = 0;
    while (true) {
      Pair v = heapq.heappop(C);
      if (v.first == 0) {
        break;
      }
      int nv = B[v.second - 1] + B[(v.second + 1) % N];
      int n = -v.first / nv;
      if (n <= 0) {
        System.out.println(-1);
        System.exit(0);
      }
      v.first += n * nv;
      B[v.second] -= n * nv;
      heapq.heappush(C, new Pair(v.first, v.second));
      ans += n;
    }
    System.out.println(ans);
  }

  private static class Pair {
    int first;
    int second;

    public Pair(int first, int second) {
      this.first = first;
      this.second = second;
    }
  }
}

[/JAVA]

This is the Java code equivalent to the Python code. I have used the `java.util.stream` package to convert the input strings to arrays of integers, and the `java.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BInt[i - 1] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      C.add(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    int[] C = new int[N];
    for (int i = 0; i < N; i++) {
      C[i] = A[i] - Integer.parseInt(B[i]);
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C[i]);
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int i = pq.poll();
      int nv = Integer.parseInt(B[i - 1]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[v - 1] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> queue = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      queue.add(C.get(i));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!queue.isEmpty()) {
      int v = queue.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      queue.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> queue = new PriorityQueue<>(C);
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!queue.isEmpty()) {
      int v = queue.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      queue.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>(N, (a, b) -> b - a);
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[v] -= n * nv;
            C.add(v, v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>(C);
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    int[] C = new int[N];
    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
    for (int i = 0; i < N; i++) {
      pq.add(new int[] {A[i] - Integer.parseInt(B[i]), i});
    }
    B = Arrays.stream(B).mapToInt(Integer::parseInt).toArray();
    int ans = 0;
    while (!pq.isEmpty()) {
      int[] v = pq.poll();
      if (v[0] == 0) {
        break;
      }
      int nv = B[v[1] - 1] + B[(v[1] + 1) % N];
      int n = -v[0] / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v[0] += n * nv;
      B[v[1]] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            C.add(v);
            B[i] -= n * nv;
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(-(A[i] - Integer.parseInt(B[i])));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[i - 1]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(-v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    int[] C = new int[N];
    for (int i = 0; i < N; i++) {
      C[i] = Integer.parseInt(B[i]);
    }
    PriorityQueue<Integer> heap = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      heap.add(A[i] - C[i]);
    }
    int ans = 0;
    while (true) {
      int v = heap.poll();
      if (v == 0) {
        break;
      }
      int i = heap.peek();
      int nv = C[i - 1] + C[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      C[i] -= n * nv;
      heap.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int i = pq.indexOf(v);
      int nv = Integer.parseInt(B[i - 1]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> queue = new PriorityQueue<>(Comparator.comparing(Integer::intValue));
    for (int i = 0; i < N; i++) {
      queue.add(C.get(i));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!queue.isEmpty()) {
      int v = queue.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      queue.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.offer(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[i - 1] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.offer(v, i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        String[] B = scanner.nextLine().split(" ");
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = A[i] - Integer.parseInt(B[i]);
        }
        PriorityQueue<Integer> queue = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            queue.add(C[i]);
        }
        B = new int[N];
        for (int i = 0; i < N; i++) {
            B[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (true) {
            int v = queue.poll();
            if (v == 0) {
                break;
            }
            int nv = B[v - 1] + B[(v + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[v] -= n * nv;
            queue.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = sc.nextLine().split(" ");
    int[] C = new int[N];
    for (int i = 0; i < N; i++) {
      C[i] = A[i] - Integer.parseInt(B[i]);
    }
    Arrays.sort(C);
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(-C[i]);
    }
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = -pq.poll();
      int i = v / N;
      int nv = Integer.parseInt(B[i - 1]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(-v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BArr = new int[N];
    for (int i = 0; i < N; i++) {
      BArr[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BArr[i - 1] + BArr[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArr[i] -= n * nv;
      C.add(v);
      C.add(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    String[] B = scanner.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[i - 1] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.offer(A[i] - Integer.parseInt(B[i]));
    }
    B = new int[N];
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = B[i - 1] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.offer(v);
      C.offer(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<int[]> C = new PriorityQueue<>((a, b) -> a[0] - b[0]);
    for (int i = 0; i < N; i++) {
      C.add(new int[] {A[i] - Integer.parseInt(B[i]), i});
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int[] v = C.poll();
      if (v[0] == 0) {
        break;
      }
      int nv = B[v[1] - 1] + B[(v[1] + 1) % N];
      int n = -v[0] / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v[0] += n * nv;
      B[v[1]] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<int[]> C = new PriorityQueue<>((a, b) -> a[0] - b[0]);
    for (int i = 0; i < N; i++) {
      C.add(new int[] {A[i] - Integer.parseInt(B[i]), i});
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int[] current = C.poll();
      if (current[0] == 0) {
        break;
      }
      int nv = B[(current[1] - 1 + N) % N] + B[(current[1] + 1) % N];
      int n = -current[0] / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      current[0] += n * nv;
      B[current[1]] -= n * nv;
      C.add(current);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BArr = new int[N];
    for (int i = 0; i < N; i++) {
      BArr[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BArr[i - 1] + BArr[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArr[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.nextLine();
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      C.add(v);
      B[i] = Integer.toString(Integer.parseInt(B[i]) - n * nv);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BInt[i - 1] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      C.add(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.next();
    }
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.naturalOrder());
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i + 1) % N]) + Integer.parseInt(B[(i - 1 + N) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int i = C.indexOf(v);
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.set(i, v);
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BArray = new int[N];
    for (int i = 0; i < N; i++) {
      BArray[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = BArray[(i - 1 + N) % N] + BArray[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArray[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        List<Integer> C = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.comparingInt(o -> o));
        for (int i = 0; i < N; i++) {
            pq.offer(C.get(i));
        }
        int[] B1 = new int[N];
        for (int i = 0; i < N; i++) {
            B1[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (!pq.isEmpty()) {
            int v = pq.poll();
            if (v == 0) {
                break;
            }
            int nv = B1[(i + 1) % N] + B1[(i - 1 + N) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B1[i] -= n * nv;
            pq.offer(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(-(A[i] - Integer.parseInt(B[i])));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      C.add(v);
      C.add(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    String[] B = scanner.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = scanner.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BArray = new int[N];
    for (int i = 0; i < N; i++) {
      BArray[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BArray[i - 1] + BArray[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArray[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (!C.isEmpty()) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> heap = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      heap.add(C.get(i));
    }
    int ans = 0;
    while (true) {
      int v = heap.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      heap.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      heapq.heappush(C, new Pair(A[i] - Integer.parseInt(B[i]), i));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      Pair p = heapq.heappop(C);
      if (p.first == 0) {
        break;
      }
      int nv = B[(p.second - 1 + N) % N] + B[(p.second + 1) % N];
      int n = -p.first / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      p.first += n * nv;
      B[p.second] -= n * nv;
      heapq.heappush(C, p);
      ans += n;
    }
    System.out.println(ans);
  }

  public static class Pair implements Comparable<Pair> {
    public int first;
    public int second;

    public Pair(int first, int second) {
      this.first = first;
      this.second = second;
    }

    @Override
    public int compareTo(Pair other) {
      return Integer.compare(
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    String[] B = new String[N];
    List<Integer> C = new ArrayList<>();

    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
      B[i] = scanner.next();
    }

    for (int i = 0; i < N; i++) {
      int v = A[i] - Integer.parseInt(B[i]);
      C.add(v);
    }

    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }

    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] = String.valueOf(Integer.parseInt(B[i]) - n * nv);
      pq.add(v);
      ans += n;
    }

    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>(N, (a, b) -> a - b);
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        for (int i = 0; i < N; i++) {
            B[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (!C.isEmpty()) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = B[i - 1] + B[(i + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int[] BArray = new int[N];
    for (int i = 0; i < N; i++) {
      BArray[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = BArray[(i - 1 + N) % N] + BArray[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BArray[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = new String[N];
        for (int i = 0; i < N; i++) {
            B[i] = sc.next();
        }
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = convertToIntArray(B);
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = B[(i - 1 + N) % N] + B[(i + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
    
    private static int[] convertToIntArray(String[] B) {
        int[] result = new int[B.length];
        for (int i = 0; i < B.length; i++) {
            result[i] = Integer.parseInt(B[i]);
        }
        return result;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    String[] B = scanner.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> queue = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      queue.add(C.get(i));
    }
    B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = scanner.nextLine();
    }
    int ans = 0;
    while (true) {
      int v = queue.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] = String.valueOf(Integer.parseInt(B[i]) - n * nv);
      queue.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;
import java.util.ArrayList;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        for (int i = 0; i < N; i++) {
            B[i] = Integer.parseInt(B[i]);
        }
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = B[(i - 1 + N) % N] + B[(i + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = Arrays.stream(B).map(Integer::parseInt).toArray(Integer[]::new);
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = B[(i - 1 + N) % N] + B[(i + 1) % N];
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            B[i] -= n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = scanner.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[(i - 1 + N) % N] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int[] B_int = new int[N];
    for (int i = 0; i < N; i++) {
      B_int[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!pq.isEmpty()) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = B_int[(i - 1 + N) % N] + B_int[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B_int[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        String[] B = sc.nextLine().split(" ");
        PriorityQueue<Integer> C = new PriorityQueue<>();
        for (int i = 0; i < N; i++) {
            C.add(A[i] - Integer.parseInt(B[i]));
        }
        B = sc.nextLine().split(" ");
        int ans = 0;
        while (true) {
            int v = C.poll();
            if (v == 0) {
                break;
            }
            int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
            int n = -v / nv;
            if (n <= 0) {
                System.out.println(-1);
                return;
            }
            v += n * nv;
            C.add(v);
            ans += n;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[v - 1]) + Integer.parseInt(B[(v + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[v - 1] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] BArr = new int[N];
    for (int i = 0; i < N; i++) {
      BArr[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int i = C.poll();
      int nv = BArr[i - 1] + BArr[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        System.exit(0);
      }
      v += n * nv;
      BArr[i] -= n * nv;
      C.add(v);
      C.add(i);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      pq.add(C.get(i));
    }
    int[] BInt = new int[N];
    for (int i = 0; i < N; i++) {
      BInt[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (true) {
      int v = pq.poll();
      if (v == 0) {
        break;
      }
      int nv = BInt[(i - 1 + N) % N] + BInt[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      BInt[i] -= n * nv;
      pq.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    PriorityQueue<Integer> C = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    int[] B_int = new int[N];
    for (int i = 0; i < N; i++) {
      B_int[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B_int[(i - 1 + N) % N] + B_int[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B_int[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    List<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    PriorityQueue<Integer> heap = new PriorityQueue<>();
    for (int i = 0; i < N; i++) {
      heap.add(C.get(i));
    }
    int ans = 0;
    while (true) {
      int v = heap.poll();
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[(i - 1 + N) % N]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      heap.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = sc.nextLine().split(" ");
    ArrayList<Integer> C = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    B = sc.nextLine().split(" ");
    int ans = 0;
    while (true) {
      int v = C.get(0);
      int i = 0;
      if (v == 0) {
        break;
      }
      int nv = Integer.parseInt(B[i - 1]) + Integer.parseInt(B[(i + 1) % N]);
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        System.exit(0);
      }
      v += n * nv;
      B[i] -= n * nv;
      C.set(0, v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    String[] B = new String[N];
    for (int i = 0; i < N; i++) {
      B[i] = sc.next();
    }
    PriorityQueue<Integer> C = new PriorityQueue<Integer>();
    for (int i = 0; i < N; i++) {
      C.add(A[i] - Integer.parseInt(B[i]));
    }
    for (int i = 0; i < N; i++) {
      B[i] = Integer.parseInt(B[i]);
    }
    int ans = 0;
    while (!C.isEmpty()) {
      int v = C.poll();
      if (v == 0) {
        break;
      }
      int nv = B[(i - 1 + N) % N] + B[(i + 1) % N];
      int n = -v / nv;
      if (n <= 0) {
        System.out.println(-1);
        return;
      }
      v += n * nv;
      B[i] -= n * nv;
      C.add(v);
      ans += n;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
