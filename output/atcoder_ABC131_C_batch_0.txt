  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    BigInteger r = x.remainder(y);
    while (r.compareTo(BigInteger.ZERO) != 0) {

======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();

    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));

    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int a = in.nextInt();
        int b = in.nextInt();
        int c = in.nextInt();
        int d = in.nextInt();

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (x == 0) {
            return y;
        } else {
            return gcd(y % x, x);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

This Java code is functionally identical to the Python code. It first takes in four integers `a`, `b`, `c`, and `d` as input, and then calculates the least common
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO) || y.equals(BigInteger.ZERO)) {
      return BigInteger.ONE;
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        int d = scanner.nextInt();

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.divide(c).subtract(BigInteger.ONE));
    BigInteger m = (b.divide(d)).subtract(a.divide(d).subtract(BigInteger.ONE));
    BigInteger o = (b.divide(e)).subtract(a.divide(e).subtract(BigInteger.ONE));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BigInteger a = sc.nextBigInteger();
        BigInteger b = sc.nextBigInteger();
        BigInteger c = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();

        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
        BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
        BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));

        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }

    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }

    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd(y, x.mod
======
  [JAVA]
import java.util.Scanner;
import java.util.function.IntBinaryOperator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

Note: The `gcd` method is a recursive method that calculates the greatest common divisor of two integers using the Euclidean algorithm. The `lcm` method is a simple method that calculates the least common multiple of two integers by dividing the product of the two integers by their greatest common divisor. The `main`
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    }
    return gcd(y, x.mod(y));
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger a = scanner.nextBigInteger();
        BigInteger b = scanner.nextBigInteger();
        BigInteger c = scanner.nextBigInteger();
        BigInteger d = scanner.nextBigInteger();
        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
        BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
        BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }
    
    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }
    
    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();

    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a - 1).divide(c));
    BigInteger m = (b.divide(d)).subtract((a - 1).divide(d));
    BigInteger o = (b.divide(e)).subtract((a - 1).divide(e));

    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.compareTo(y) == 0) {
      return x;
    } else if (x.compareTo(y) > 0) {
      return gcd(x.subtract(y), y);
    }
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        int c = Integer.parseInt(input[2]);
        int d = Integer.parseInt(input[3]);

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.lang.Math;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }
  
  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }
  
  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (x == 0) {
      return y;
    } else if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        int c = Integer.parseInt(input[2]);
        int d = Integer.parseInt(input[3]);

        BigInteger e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static BigInteger lcm(int x, int y) {
        return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y)).divide(gcd(x, y));
    }

    public static BigInteger gcd(int x, int y) {
        if (x == 0) {
            return BigInteger.valueOf(y);
        } else if (y == 0) {
            return BigInteger.valueOf(x);
        } else {
            return gcd(y, x % y);
        }
    }
}
[/
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();

    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));

    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO) || y.equals(BigInteger.ZERO)) {
      return BigInteger.ZER
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(int x, int y) {
    return (BigInteger.valueOf(x).multiply(BigInteger.valueOf(y))).divide(gcd(x, y));
  }

  public static BigInteger gcd(int x, int y) {
    if (y == 0) {
      return BigInteger.valueOf(x);
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        int c = Integer.parseInt(input[2]);
        int d = Integer.parseInt(input[3]);

        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. The `lcm` function is implemented using the Euclidean algorithm, and the `gcd` function is implemented using the same algorithm. The `main` method reads in the input and calculates the values of `e`, `n`, `m`, and `o`, then
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BigInteger a = sc.nextBigInteger();
        BigInteger b = sc.nextBigInteger();
        BigInteger c = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();

        BigInteger e = lcm(c, d);
        BigInteger n = b.divide(c).subtract(a.subtract(BigInteger.ONE).divide(c));
        BigInteger m = b.divide(d).subtract(a.subtract(BigInteger.ONE).divide(d));
        BigInteger o = b.divide(e).subtract(a.subtract(BigInteger.ONE).divide(e));

        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }

    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }

    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd(y, x.mod(y
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();

    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a - 1).divide(c));
    BigInteger m = (b.divide(d)).subtract((a - 1).divide(d));
    BigInteger o = (b.divide(e)).subtract((a - 1).divide(e));

    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    while (y.compareTo(BigInteger.ZERO) != 0) {
      BigInteger r = x.mod(y);
      x = y;
      y = r;
    }
    return x;
  }

======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        int d = scanner.nextInt();

        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract((a-1).divide(c));
        BigInteger m = (b.divide(d)).subtract((a-1).divide(d));
        BigInteger o = (b.divide(e)).subtract((a-1).divide(e));

        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }

    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(x.gcd(y));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);
        System.out.println(b - a + 1 - n - m + o);
    }
    
    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }
    
    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BigInteger a = sc.nextBigInteger();
        BigInteger b = sc.nextBigInteger();
        BigInteger c = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();

        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
        BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
        BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));

        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }

    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }

    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd(y, x.mod
======
  [JAVA]
import java.util.Scanner;
import java.util.function.IntBinaryOperator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(x.gcd(y));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        int c = Integer.parseInt(input[2]);
        int d = Integer.parseInt(input[3]);
        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);
        System.out.println(b - a + 1 - n - m + o);
    }

    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }

    public static int gcd(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return gcd(y, x % y);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.compareTo(y) < 0) {
      return gcd(y, x);
    } else if (x
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO) || y.equals(BigInteger.ZERO)) {
      return BigInteger.ONE;
   
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (x == 0) {
      return y;
    } else {
      return gcd(y % x, x);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

In this solution, we first import the necessary libraries, including `java.util.Scanner` for reading input and `java.math.BigInteger` for performing arithmetic operations.

We then define a `Solution` class with a `main` method that takes an array of strings as its argument. Inside the `main`
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = b.divide(c).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = b.divide(d).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = b.divide(e).subtract(a.subtract(BigInteger.ONE).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO)) {
      return y;
    } else {
      return gcd(y.mod(x), x);

======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger a = scanner.nextBigInteger();
        BigInteger b = scanner.nextBigInteger();
        BigInteger c = scanner.nextBigInteger();
        BigInteger d = scanner.nextBigInteger();

        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
        BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
        BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));

        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }

    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }

    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);
        System.out.println(b - a + 1 - n - m + o);
    }
    
    public static int lcm(int x, int y) {
        return (x * y) / gcd(x, y);
    }
    
    public static int gcd(int x, int y) {
        if (x == 0) {
            return y;
        } else {
            return gcd(y % x, x);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    while (y.compareTo(BigInteger.ZERO) != 0) {
      BigInteger temp = x.mod(y);
      x
======
