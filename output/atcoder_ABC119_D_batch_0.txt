  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    Arrays.sort(s);
    Arrays.sort(t);
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int q = scanner.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = scanner.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = scanner.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        Arrays.sort(s);
        Arrays.sort(t);
        for (int i = 0; i < q; i++) {
            int x = scanner.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, d1, d2);
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int q = scanner.nextInt();
        int INF = 1000000000000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = scanner.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = scanner.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = scanner.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x) + 1;
            int tind = Arrays.binarySearch(t, x) + 1;
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];

        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }

        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }

        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;

        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;

            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }

            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 0; i < A; i++) {
      s[i + 1] = sc.nextInt();
    }
    for (int i = 0; i < B; i++) {
      t[i + 1] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 0; i < A; i++) {
      s[i + 1] = sc.nextInt();
    }
    for (int i = 0; i < B; i++) {
      t[i + 1] = sc.nextInt();
    }
    s[0] = -1000000000;
    s[A + 1] = 1000000000;
    t[0] = -1000000000;
    t[B + 1] = 1000000000;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = Integer.MAX_VALUE;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = findIndex(s, x);
            int tind = findIndex(t, x);
            int res = INF;
            for (int S : new int[]{s[sind - 1], s[sind]}) {
                for (int T : new int[]{t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }

    public static int findIndex(int[] arr, int key) {
        int low = 1;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == key) {
                return mid;
            } else if (arr[mid] < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
       
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x) + 1;
            int tind = Arrays.binarySearch(t, x) + 1;
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, d1, d2);
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    int INF = 100000000;
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        Arrays.sort(s);
        Arrays.sort(t);
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();

        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }

        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = Integer.MAX_VALUE;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 0; i < A; i++) {
            s[i + 1] = sc.nextInt();
        }
        for (int i = 0; i < B; i++) {
            t[i + 1] = sc.nextInt();
        }
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = findIndex(s, x);
            int tind = findIndex(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }

    public static int findIndex(int[] arr, int x) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                return i;
            }
        }
        return -1;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x) + 1;
            int tind = Arrays.binarySearch(t, x) + 1;
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = findIndex(s, x);
            int tind = findIndex(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
    
    public static int findIndex(int[] arr, int target) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] < target) {
                low = mid + 1;
            } else if (arr[mid] > target) {
                high = mid - 1;
            } else {
                return mid;
            }
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 0; i < A; i++) {
            s[i + 1] = sc.nextInt();
        }
        for (int i = 0; i < B; i++) {
            t[i + 1] = sc.nextInt();
        }
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = Integer.MAX_VALUE;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -1000000000;
    s[A + 1] = 1000000000;
    t[0] = -1000000000;
    t[B + 1] = 1000000000;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = 1000000000;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A];
    int[] t = new int[B];
    for (int i = 0; i < A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 0; i < B; i++) {
      t[i] = sc.nextInt();
    }
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int A = scanner.nextInt();
    int B = scanner.nextInt();
    int q = scanner.nextInt();
    int INF = (int) Math.pow(10, 18);
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = scanner.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = scanner.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = scanner.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) Math.pow(10, 18);
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = 1;
      int tind = 1;
      while (s[sind] < x) {
        sind++;
      }
      while (t[tind] < x) {
        tind++;
      }
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int q = scanner.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = scanner.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = scanner.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        Arrays.sort(s);
        Arrays.sort(t);
        for (int i = 0; i < q; i++) {
            int x = scanner.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, d1, d2);
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];

        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }

        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }

        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;

        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;

            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }

            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) Math.pow(10, 18);
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) Math.pow(10, 18);
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];

    for (int i = 0; i < A; i++) {
      s[i + 1] = sc.nextInt();
    }

    for (int i = 0; i < B; i++) {
      t[i + 1] = sc.nextInt();
    }

    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = binarySearch(s, x);
      int tind = binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, d1, d2);
        }
      }
      System.out.println(res);
    }
  }

  public static int binarySearch(int[] arr, int target) {
    int left = 0;
    int right = arr.length - 1;
    while (left <= right) {
      int mid = (left + right) / 2;
      if (arr[mid] >= target) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    }
    return left;
  }
}

======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x) + 1;
            int tind = Arrays.binarySearch(t, x) + 1;
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]

This is the Java code equivalent to the Python code. The `bisect_left` function is replaced by the `Arrays.binarySearch` method, which returns the index of the given element in the array if it is present, or the index where it would be inserted if it is not present. The `map` function is replaced by the `Scanner` class, which allows us to read input from the user. The `input` function is replaced by the `next
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    Arrays.sort(s);
    Arrays.sort(t);
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];

    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }

    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }

    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;

      for (int S : new int[] { s[sind - 1], s[sind] }) {
        for (int T : new int[] { t[tind - 1], t[tind] }) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }

      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();

        int[] s = new int[A + 2];
        int[] t = new int[B + 2];

        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }

        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }

        int INF = 1000000000;
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;

        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;

            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }

            System.out.println(res);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, d1, d2);
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -1000000000;
        t[0] = -1000000000;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = 1000000000;
        t[B + 1] = 1000000000;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = 1000000000;
            for (int S : new int[]{s[sind - 1], s[sind]}) {
                for (int T : new int[]{t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, d1);
                    res = Math.min(res, d2);
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;

        ArrayList<Integer> s = new ArrayList<>();
        ArrayList<Integer> t = new ArrayList<>();

        s.add(-INF);
        for (int i = 0; i < A; i++) {
            s.add(sc.nextInt());
        }
        s.add(INF);

        t.add(-INF);
        for (int i = 0; i < B; i++) {
            t.add(sc.nextInt());
        }
        t.add(INF);

        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = binarySearch(s, x);
            int tind = binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s.get(sind - 1), s.get(sind)}) {
                for (int T : new int[] {t.get(tind - 1), t.get(tind)}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }

    public static int binarySearch(ArrayList<Integer> arr, int x) {
        int low = 0;
        int high = arr.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr.get(mid) < x) {
                low = mid + 1;
            } else if (arr.get(mid) > x) {
                high = mid - 1;
            } else {
                return mid;
           
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) Math.pow(10, 18);
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = bisectLeft(s, x);
            int tind = bisectLeft(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }

    public static int bisectLeft(int[] A, int x) {
        int lo = 1;
        int hi = A.length - 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (A[mid] < x) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
}
[/JAVA
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];

    s[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    s[A + 1] = INF;

    t[0] = -INF;
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] { s[sind - 1], s[sind] }) {
        for (int T : new int[] { t[tind - 1], t[tind] }) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) Math.pow(10, 18);
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[]{s[sind - 1], s[sind]}) {
                for (int T : new int[]{t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]

This is the Java code that implements the same logic as the Python code. The `bisect_left` function is replaced by the `Arrays.binarySearch` method, which performs a binary search on the given array to find the index of the given element. The rest of the code is similar to the Python code, with some minor changes to account for the differences in syntax and data types between Python and Java.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int q = scanner.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = scanner.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = scanner.nextInt();
        }
        s[0] = -1000000000;
        s[A + 1] = 1000000000;
        t[0] = -1000000000;
        t[B + 1] = 1000000000;
        for (int i = 0; i < q; i++) {
            int x = scanner.nextInt();
            int sind = binarySearch(s, x);
            int tind = binarySearch(t, x);
            int res = 1000000000;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }

    public static int binarySearch(int[] arr, int x) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] < x) {
                low = mid + 1;
           
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) Math.pow(10, 18);
        ArrayList<Integer> s = new ArrayList<Integer>();
        ArrayList<Integer> t = new ArrayList<Integer>();
        s.add(-INF);
        for (int i = 0; i < A; i++) {
            s.add(sc.nextInt());
        }
        s.add(INF);
        t.add(-INF);
        for (int i = 0; i < B; i++) {
            t.add(sc.nextInt());
        }
        t.add(INF);
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = bisectLeft(s, x);
            int tind = bisectLeft(t, x);
            int res = INF;
            for (int S : new int[] { s.get(sind - 1), s.get(sind) }) {
                for (int T : new int[] { t.get(tind - 1), t.get(tind) }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
    
    public static int bisectLeft(ArrayList<Integer> arr, int x) {
        int low = 0;
        int high = arr.size() - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr.get(mid) < x) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    long INF = 1000000000000000000L;
    long[] s = new long[A + 2];
    long[] t = new long[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextLong();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextLong();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      long x = sc.nextLong();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      long res = INF;
      for (long S : new long[] {s[sind - 1], s[sind]}) {
        for (long T : new long[] {t[tind - 1], t[tind]}) {
          long d1 = Math.abs(x - S) + Math.abs(S - T);
          long d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -1000000000;
        s[A + 1] = 1000000000;
        t[0] = -1000000000;
        t[B + 1] = 1000000000;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = 1000000000;
            for (int S : Arrays.asList(s[sind - 1], s[sind])) {
                for (int T : Arrays.asList(t[tind - 1], t[tind])) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -1000000000;
        s[A + 1] = 1000000000;
        t[0] = -1000000000;
        t[B + 1] = 1000000000;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = binarySearch(s, x);
            int tind = binarySearch(t, x);
            int res = 1000000000;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
    
    public static int binarySearch(int[] arr, int target) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, d1, d2);
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    Arrays.sort(s);
    Arrays.sort(t);
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
