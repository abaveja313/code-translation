  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    private static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]

This is the Java code equivalent to the Python code provided, with the necessary imports and a driver class called `Solution` with an executable `main` method. The `want` method is defined in the same way as in the Python code, and the `main` method reads the input, creates an array `A` of the input integers, and prints the result of the `want` method for the desired range.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int result = A[0] + A[N - 1] + want(1, N - 2, 1, 1);
        System.out.println(result);
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. The only difference is that in Java, we use `Integer.MAX_VALUE` instead of `float("inf")` to represent infinity.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    private static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb + rb) + want(i+1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);

        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }

        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }

        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }

        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]

This is the Java code that corresponds to the given Python code. The `want` function is implemented in a similar way, with the only difference being that the `range` function is replaced with a for loop that iterates over the indices of the array. The `stdin.readline()` method is replaced with a `Scanner` object to read input from the console. The `print` function is replaced with a `System.out.println()` statement to print the result to the console.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int result = A[0] + A[N - 1] + want(1, N - 2, 1, 1);
        System.out.println(result);
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner stdin = new Scanner(System.in);
    int N = stdin.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = stdin.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int lb = 1, rb = 1;
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, lb, rb));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner stdin = new Scanner(System.in);
    int N = stdin.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = stdin.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]

Explanation:

The Python code uses the `sys` module to read input from `stdin`, and the `map` function to convert the input string to a list of integers. The `want` function is defined to calculate the minimum cost of a subsequence of the input array, given the indices of the subsequence and the bounds of the subsequence. The `main` function reads the input, calculates the minimum cost of the entire array, and prints the result.

The Java code uses the `Scanner` class to read input from `stdin`, and the `ArrayList` class to store the input as a list of integers. The `want` function is defined similarly to the Python code, with the exception that the `Math
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]

Explanation:

* The `import` statement is used to import the `Scanner` class from the `java.util` package.
* The `main` method is the entry point of the program, and it takes an array of strings as an argument.
* The `stdin` variable is an instance of the `Scanner` class, which is used to read input from the standard input stream.
* The `N` variable is an integer that stores the number of elements in the array.
* The `A` variable is an array of integers that stores the elements of the array.
* The `want` method is a recursive method that takes four integers as arguments: `l`, `r`, `lb`,
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]

Explanation:

The Java code is written in a similar manner to the Python code, with the main method reading in the input, creating an array of integers, and then calling the `want` method to calculate the minimum cost of the optimal substructure. The `want` method is implemented in a similar way to the Python code, with the only difference being that Java does not have a built-in `inf` value, so we use `Integer.MAX_VALUE` instead. The rest of the code is similar, with the `main` method printing out the result.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int result = A[0] + A[N - 1] + want(1, N - 2, 1, 1);
        System.out.println(result);
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner stdin = new Scanner(System.in);
    int N = stdin.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = stdin.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  private static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }
    
    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  private static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]

Explanation:

* The `import` statement is used to import the `Scanner` class from the `java.util` package.
* The `Solution` class is the driver class that contains the `main` method.
* The `main` method takes an array of strings as input, which is passed to the `want` method.
* The `want` method is a recursive method that takes four integers as input: `l`, `r`, `lb`, and `rb`.
* The `want` method returns the minimum value of `A[l] * (lb + rb)` and the sum of the values returned by the `want` method for the subarrays `A[l..i
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]

Explanation:

1. The `import` statement is used to import the `java.util.Scanner` class, which is used to read input from the user.
2. The `Solution` class is defined, which contains the `main` method that is executed when the program is run.
3. The `main` method creates a `Scanner` object called `sc` and reads the input `N` and `A` using the `nextInt` and `next` methods of the `Scanner` class.
4. The `A` array is created and initialized with the values read from the input.
5. The `want` method is called with the arguments `1`, `N - 2`, `
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N-1] + want(1, N-2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i-1, lb, lb+rb) + want(i+1, r, lb+rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
