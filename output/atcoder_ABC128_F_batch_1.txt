  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - k - 2] - D[m][1][-1];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.add(i);
        if (i != n / i) {
          upperDivisors.add(n / i);
        }
      }
      i++;
    }
    return lowerDivisors.stream().sorted().collect(Collectors.toList());
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[] {0};
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[] {0};
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] =
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    ArrayList<ArrayList<ArrayList<Integer>>> D = new ArrayList<>();
    D.add(new ArrayList<>());
    for (int i = 1; i < N; i++) {
      ArrayList<ArrayList<Integer>> DD = new ArrayList<>();
      ArrayList<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - 1) - D.get(m).get(1).get(l - k - 2);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static ArrayList<Integer> makeDivisors(int n) {
    ArrayList<Integer> lowerDivisors = new ArrayList<>();
    ArrayList<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.add(
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      D[i][0] = T;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      int[] T2 = new int[N];
      T2[0] = 0;
      for (int j = start; j < N; j += i) {
        T2[j] = T2[j - 1] + s[j];
      }
      D[i][1] = T2;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - k - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDiv
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    List<List<Integer>> D = new ArrayList<>();
    D.add(new ArrayList<>());
    for (int i = 1; i < N; i++) {
      List<Integer> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      D[i][0] = 0;
      for (int j = i; j < N; j += i) {
        D[i][0] += s[j];
      }
      D[i][1] = 0;
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        D[i][1] += s[j];
      }
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = append(lowerDivisors, i);
        if (i != n / i) {
          upperDivisors = append(upperDivisors, n / i);
        }
      }
      i++;
    }
    return append(lowerDivisors, upperDivisors);
  }

  public static int[] append(int[] arr, int value) {
    int[] new
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors +
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i - 1] = i;
        if (i != n / i) upperDivisors[i - 1] = n / i;
      }
      i++;
    }
    return lowerDivisors;
  }
}

[
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors +
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    for (int i = 1; i * i <= n; i++) {
      if (n % i == 0) {
        lowerDivisors.add(i);
        if (i != n / i) {
          upperDivisors.add(n / i);
        }

======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) {
                start += i;
            }
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) {
                    break;
                }
                if (n % m == 0 && end >= n) {
                    continue;
                }
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivis
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.add(i);
        if (i != n / i) {
          upperDivisors.add(n / i);
        }
      }
      i++;
    }
    return lowerDivisors.stream().sorted().
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[i] = n / i;
        }

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      D[i][0] = s[i];
      for (int j = i + 1; j < N; j += i) {
        D[i][1] += s[j];
      }
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
      }
      i++;
    }
    return lowerDivisors.concat(upperDivisors.reverse());
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = scanner.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) {
                start += i;
            }
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) {
                    break;
                }
                if (n % m == 0 && end >= n) {
                    continue;
                }
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    private static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][2][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
        if (i != n / i) {

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivisors;

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = append(lowerDivisors, i);
        if (i != n / i) {
          upperDivisors = append(upperDivisors, n
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][2][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        ArrayList<ArrayList<ArrayList<Integer>>> D = new ArrayList<>();
        for (int i = 1; i < N; i++) {
            ArrayList<ArrayList<Integer>> DD = new ArrayList<>();
            ArrayList<Integer> T = new ArrayList<>();
            T.add(0);
            for (int j = i; j < N; j += i) {
                T.add(T.get(T.size() - 1) + s[j]);
            }
            DD.add(T);
            T = new ArrayList<>();
            T.add(0);
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T.add(T.get(T.size() - 1) + s[j]);
            }
            DD.add(T);
            D.add(DD);
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D.get(m).get(0).get(k);
                int l = D.get(m).get(1).size();
                int b = D.get(m).get(1).get(l - 1) - D.get(m).get(1).get(l - k - 2);
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    private static ArrayList<Integer> makeDivisors(int n) {
        ArrayList<Integer> lowerDivisors = new ArrayList<>();
        ArrayList<Integer> upperDivisors = new ArrayList<>();
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors.add(i);
======
  [JAVA]
import java.util.Scanner;

public class Solution {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[] s = new int[N];
		for (int i = 0; i < N; i++) {
			s[i] = sc.nextInt();
		}
		int[][][] D = new int[N][2][];
		for (int i = 1; i < N; i++) {
			int[][] DD = new int[2][];
			int[] T = new int[i];
			for (int j = i; j < N; j += i) {
				T[j / i] = T[j / i - 1] + s[j];
			}
			DD[0] = T;
			T = new int[i];
			int start = (N - 1) % i;
			if (start == 0) {
				start += i;
			}
			for (int j = start; j < N; j += i) {
				T[j / i] = T[j / i - 1] + s[j];
			}
			DD[1] = T;
			D[i] = DD;
		}
		int ans = s[N - 1];
		int cnt = 0;
		for (int n = 2; n < N - 1; n++) {
			int end = N - 1 - n;
			for (int m : makeDivisors(end)) {
				if (n <= m) {
					break;
				}
				if (n % m == 0 && end >= n) {
					continue;
				}
				int k = end / m;
				int a = D[m][0][k];
				int l = D[m][1].length;
				int b = D[m][1][l - k - 2] - D[m][1][l - 1];
				ans = Math.max(ans, a + b);
			}
		}
		System.out.println(ans);
	}

	public static int[] makeDivisors(int n) {
		int
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    List<List<Integer>> D = new ArrayList<>();
    D.add(new ArrayList<>());

    for (int i = 1; i < N; i++) {
      List<Integer> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);

      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }

    System.out.println(ans);
  }

  private static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> divisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        divisors.add(i);
        if (i != n / i) {
          divisors.add(n / i);
        }
      }
      i++;
    }
    return divisors;
  }
}

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[1];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[1];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.add(i);
        if (i != n / i) {
          upperDivisors.add(n / i);
        }
      }
     
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivisors
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length +
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      for (int j = i; j < N; j += i) {
        T[j - i] = T[j - i - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j - start] = T[j - start - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - k - 2] - D[m][1][l - 1];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDiv
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      for (int j = i; j < N; j += i) {
        T[j - i] = T[j - i - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j - start] = T[j - start - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) upperDivisors[n / i] = n / i;
      }
      i++;
    }
    return lowerDivisors + upperDivisors;
  }
}

[/
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][2];
        for (int i = 1; i < N; i++) {
            int[] DD = new int[2];
            int[] T = new int[N];
            T[0] = 0;
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            T[0] = 0;
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDiv
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
      }
      i++;
    }
    return lowerDivisors + upperDiv
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors;
  }

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    List<List<Integer>> D = new ArrayList<>();
    D.add(new ArrayList<>());
    for (int i = 1; i < N; i++) {
      List<Integer> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lower
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][];
        for (int i = 1; i < N; i++) {
            int[] DD = new int[2];
            int[] T = new int[i];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[i];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivisors.concat(upperDivis
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i + 1];
      for (int j = i; j < N; j += i) {
        T[j - i] = T[j - i - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i + 1];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j - start] = T[j - start - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i - 1] = i;
        if (i != n / i) {
          upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = addToArray(lowerDivisors, i);
        if (i != n / i) {
          upperDivisors = addToArray(upperDivisors, n / i
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    for (int i = 1; i * i <= n; i++) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lower
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][2][];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i - 1] = i;
        if (i != n / i) {
          upperDivisors[n / i - 1] = n / i
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[N][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int end) {
    int[] divisors = new int[end];
    int i = 1;
    while (i * i <= end) {
      if (end % i == 0) {
        divisors[i] = 1;
        if (i != end / i) {
          divisors[end / i] = 1;
        }
      }
      i++;
    }
    return divisors;
  }
}
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = scanner.nextInt();
        }

        int[][] D = new int[N][2];
        for (int i = 1; i < N; i++) {
            int[] DD = new int[2];
            int[] T = new int[N];
            T[0] = 0;
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            T[0] = 0;
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }

        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    ArrayList<ArrayList<Integer>> D = new ArrayList<>();
    for (int i = 1; i < N; i++) {
      ArrayList<Integer> DD = new ArrayList<>();
      ArrayList<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - 1) - D.get(m).get(1).get(l - k - 2);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static ArrayList<Integer> makeDivisors(int n) {
    ArrayList<Integer> lowerDivisors = new ArrayList<>();
    ArrayList<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors.add(i);
        if (i != n / i) upperDivisors.add(n / i);
      }
      i++;
    }
    return lowerDivisors.stream().mapToInt(Integer::intValue).toArray
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) upperDivisors[n / i] = n / i;
      }
      i++;
    }
    return lowerDivisors.concat(upperDivisors
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i];
      for (int j = i; j < N; j += i) {
        T[j - i] = T[j - i - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j - start] = T[j - start - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = append(lowerDivisors, i);
        if (i != n / i) {
          upperDivisors = append(upperDivisors, n / i);
        }
      }
      i++;
    }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors +
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) {
                start += i;
            }
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) {
                    break;
                }
                if (n % m == 0 && end >= n) {
                    continue;
                }
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    private static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = 1;
                if (i != n / i) {
                    upperDivisors[n / i] = 1;
                }
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    List<List<List<Integer>>> D = new ArrayList<>();
    for (int i = 1; i < N; i++) {
      List<List<Integer>> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <= n) {
      if (n
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
     
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] =
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[i + 1];
      for (int j = i; j < N; j += i) {
        T[j - i] = T[j - i - 1] + s[j];
      }
      DD[0] = T;
      T = new int[i + 1];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j - start] = T[j - start - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }

        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }

        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }

        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivis
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    List<List<Integer>> D = new ArrayList<>();
    D.add(new ArrayList<>());
    for (int i = 1; i < N; i++) {
      List<Integer> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static List<Integer> makeDivisors(int end) {
    List<Integer> divisors = new ArrayList<>();
    int i = 1;
    while (i * i <= end) {
      if (end % i == 0) {
        divisors.add(i);
        if (i != end / i) divisors.add
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    List<List<List<Integer>>> D = new ArrayList<>();
    D.add(new ArrayList<>());
    for (int i = 1; i < N; i++) {
      List<List<Integer>> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - 1) - D.get(m).get(1).get(l - k - 2);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static List<Integer> makeDivisors(int end) {
    List<Integer> divisors = new ArrayList<>();
    int i = 1;
    while (i * i <= end) {
      if (end % i ==
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }

    List<List<Integer>> D = new ArrayList<>();
    D.add(new ArrayList<>());

    for (int i = 1; i < N; i++) {
      List<Integer> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - k - 2) - D.get(m).get(1).get(l - 1);
        ans = Math.max(ans, a + b);
      }
    }

    System.out.println(ans);
  }

  private static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    int i = 1;
    while (i * i <=
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][][] D = new int[N][2][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors;
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][];
    for (int i = 1; i < N; i++) {
      D[i] = new int[2];
      D[i][0] = s[i];
      D[i][1] = s[N - 1 - i];
    }
    int ans = s[N - 1];
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - k - 2] - D[m][1][l - 1];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
        if (i != n / i) {
          upperDivisors = Arrays.copyOf(upperDivisors, upperDivisors.length + 1);
          upperDivisors[upperDivisors.length - 1] = n / i;
        }
      }
      i++;
    }
    return ArrayUtils.addAll(lowerDivisors, upperDivisors);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }

    List<List<List<Integer>>> D = new ArrayList<>();
    for (int i = 1; i < N; i++) {
      List<List<Integer>> DD = new ArrayList<>();
      List<Integer> T = new ArrayList<>();
      T.add(0);
      for (int j = i; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      T = new ArrayList<>();
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T.add(T.get(T.size() - 1) + s[j]);
      }
      DD.add(T);
      D.add(DD);
    }

    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D.get(m).get(0).get(k);
        int l = D.get(m).get(1).size();
        int b = D.get(m).get(1).get(l - 1) - D.get(m).get(1).get(l - k - 2);
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static List<Integer> makeDivisors(int n) {
    List<Integer> lowerDivisors = new ArrayList<>();
    List<Integer> upperDivisors = new ArrayList<>();
    for (int i = 1; i * i <= n; i++) {

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
        if (i != n / i) {
          upperDiv
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) upperDivisors[n / i] = n / i;
      }
      i++;
    }
======
