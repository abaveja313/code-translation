  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    System.out.println(solve(n, k));
  }

  private static int solve(int n, int k) {
    if (k % 2 == 1) {
      return 0;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    return dp[n][0][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Iterator;
import java.util.stream.Stream;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  public static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }

                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
    private static final long MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prev_k = k - 2 * j;
          if (prev_k < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prev_k];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prev_k];
          }
          dp[i][j][k] %= 1000000007L;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        BigInteger[][][] dp = new BigInteger[n + 1][n + 2][k + 1];
        dp[0][0][0] = BigInteger.ONE;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] = dp[i - 1][j][prev_k].add(dp[i - 1][j][prev_k].multiply(BigInteger.valueOf(2 * j)));
                    dp[i][j][k] = dp[i][j][k].add(dp[i - 1][j + 1][prev_k].multiply(BigInteger.valueOf((j + 1) * (j + 1))));
                    if (j > 0) {
                        dp[i][j][k] = dp[i][j][k].add(dp[i - 1][j - 1][prev_k]);
                    }
                    dp[i][j][k] = dp[i][j][k].mod(BigInteger.valueOf(1000000007));
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();

        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  public static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prev_k = k - 2 * j;
          if (prev_k < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prev_k];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prev_k];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prev_k = k - 2 * j;
          if (prev_k < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prev_k];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prev_k];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
  private static final int MOD = 1000000007;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= MOD;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }

                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Iterator;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007L;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.IntStream;

class Solution {
  private static final int MOD = 1000000007;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= MOD;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int MOD = 1000000007;
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();

        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 2][n + 1][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    private static final long MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  private static final int MOD = 1000000007;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= MOD;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.Arrays;
import java.util.function.Function;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();

        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }

                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
  private static final int MOD = 1000000007;

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();

    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= MOD;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();

        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Iterator;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }

                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    private static int solve(int n, int k) {
        if (k % 2 == 1) {
            return 0;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        return dp[n][0][k];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        System.out.println(solve(n, k));
    }
}

[/JAVA]

I have converted the Python code to Java code. The Java code is functionally identical to the Python code, and it obeys the constraints you specified. The Java code is within the `[JAVA]` and `[/JAVA]` tags, and it contains all necessary imports and is within a driver class called `Solution` with an executable `main(String[] args)` method.
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }

          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prev_k = k - 2 * j;
          if (prev_k < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prev_k];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prev_k];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }

          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }
    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;
    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }
    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    long[][][] dp = new long[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }

          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();

        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    private static final int MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= MOD;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        int[][][] dp = new int[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int k = scanner.nextInt();
    solve(n, k);
  }

  private static void solve(int n, int k) {
    if (k % 2 == 1) {
      System.out.println(0);
      return;
    }

    int[][][] dp = new int[n + 1][n + 2][k + 1];
    dp[0][0][0] = 1;

    for (int i = 1; i <= n; i++) {
      for (int j = 0; j <= n; j++) {
        for (int k = 0; k <= k; k++) {
          int prevK = k - 2 * j;
          if (prevK < 0) {
            continue;
          }
          dp[i][j][k] += dp[i - 1][j][prevK];
          dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
          dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
          if (j > 0) {
            dp[i][j][k] += dp[i - 1][j - 1][prevK];
          }
          dp[i][j][k] %= 1000000007;
        }
      }
    }

    System.out.println(dp[n][0][k]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    public static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }
        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= k; k++) {
                    int prev_k = k - 2 * j;
                    if (prev_k < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prev_k];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prev_k];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prev_k];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prev_k];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n][0][k]);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Stream;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        solve(n, k);
    }

    private static void solve(int n, int k) {
        if (k % 2 == 1) {
            System.out.println(0);
            return;
        }

        long[][][] dp = new long[n + 1][n + 2][k + 1];
        dp[0][0][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 1; k <= k; k++) {
                    int prevK = k - 2 * j;
                    if (prevK < 0) {
                        continue;
                    }
                    dp[i][j][k] += dp[i - 1][j][prevK];
                    dp[i][j][k] += 2 * j * dp[i - 1][j][prevK];
                    dp[i][j][k] += (j + 1) * (j + 1) * dp[i - 1][j + 1][prevK];
                    if (j > 0) {
                        dp[i][j][k] += dp[i - 1][j - 1][prevK];
                    }
                    dp[i][j][k] %= 1000000007;
                }
            }
        }

        System.out.println(dp[n][0][k]);
    }
}

[/JAVA]
======
