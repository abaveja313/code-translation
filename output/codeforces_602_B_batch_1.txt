  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) {
          break;
        }
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) {
        break;
      }
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(List<Integer> A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[A[l]] = l;
        d[A[r]] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) {
                    break;
                }
                d[A[r]] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) {
                break;
            }
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi += 1;
            } else {
                l = d[mx] + 1;
                mx -= 1;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(List<Integer> A) {
    int l = 0;
    int r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0;
    int r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[n];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < n) {
      while (mx - mi <= 1) {
        r++;
        if (r >= n) break;
        d[A[r]] = r;
        if (A[r] >= mx) mx = A[r];
        if (A[r] <= mi) mi = A[r];
      }
      ans = Math.max(ans, r - l);
      if (r >= n) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[n];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < n) {
      while (mx - mi <= 1) {
        r++;
        if (r >= n) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= n) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) mx = A[r];
        if (A[r] <= mi) mi = A[r];
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    int ans = constRange(A);
    System.out.println(ans);
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) {
          break;
        }
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) {
        break;
      }
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        A[r] = sc.nextInt();
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) {
          break;
        }
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) {
        break;
      }
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                A[r] = scanner.nextInt();
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    while (scanner.hasNextInt()) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(List<Integer> A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0;
    int r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0, r = 1;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        A[r] = sc.nextInt();
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) mx = A.get(r);
        if (A.get(r) <= mi) mi = A.get(r);
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[n];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < n) {
      while (mx - mi <= 1) {
        r++;
        if (r >= n) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= n) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi += 1;
      } else {
        l = d[mx] + 1;
        mx -= 1;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[n];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < n) {
      while (mx - mi <= 1) {
        r++;
        if (r >= n) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= n) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        A[r] = sc.nextInt();
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi += 1;
      } else {
        l = d[mx] + 1;
        mx -= 1;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A[l], l);
        d.put(A[r], r);
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d.put(A[r], r);
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A[l], l);
        d.put(A[r], r);
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d.put(A[r], r);
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                A[r] = scanner.nextInt();
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            A.add(sc.nextInt());
        }
        System.out.println(constRange(A));
    }

    public static int constRange(ArrayList<Integer> A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A.get(l), l);
        d.put(A.get(r), r);
        int mx = Math.max(A.get(l), A.get(r));
        int mi = Math.min(A.get(l), A.get(r));
        int ans = 0;
        while (r < A.size()) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.size()) break;
                d.put(A.get(r), r);
                if (A.get(r) >= mx) {
                    mx = A.get(r);
                }
                if (A.get(r) <= mi) {
                    mi = A.get(r);
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.size()) break;
            if (A.get(r) > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = findIndex(A, mi) + 1;
        mi++;
      } else {
        l = findIndex(A, mx) + 1;
        mx--;
      }
    }
    return ans;
  }

  public static int findIndex(int[] A, int x) {
    for (int i = 0; i < A.length; i++) {
      if (A[i] == x) {
        return i;
      }
    }
    return -1;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A[l], l);
        d.put(A[r], r);
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d.put(A[r], r);
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    int ans = constRange(A);
    System.out.println(ans);
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi += 1;
      } else {
        l = d.get(mx) + 1;
        mx -= 1;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A[l], l);
        d.put(A[r], r);
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d.put(A[r], r);
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[n];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < n) {
      while (mx - mi <= 1) {
        r++;
        if (r >= n) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= n) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(List<Integer> A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) mx = A.get(r);
        if (A.get(r) <= mi) mi = A.get(r);
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[n];
        d[A[l]] = l;
        d[A[r]] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < n) {
            while (mx - mi <= 1) {
                r++;
                if (r >= n) break;
                d[A[r]] = r;
                if (A[r] >= mx) mx = A[r];
                if (A[r] <= mi) mi = A[r];
            }
            ans = Math.max(ans, r - l);
            if (r >= n) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0;
        int r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) {
                    break;
                }
                d[A[r]] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) {
                break;
            }
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        HashMap<Integer, Integer> d = new HashMap<>();
        d.put(A[l], l);
        d.put(A[r], r);
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d.put(A[r], r);
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d.get(mi) + 1;
                mi++;
            } else {
                l = d.get(mx) + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A[l], l);
    d.put(A[r], r);
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d.put(A[r], r);
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(constRange(A));
    }

    public static int constRange(int[] A) {
        int l = 0, r = 1;
        int[] d = new int[A.length];
        d[l] = l;
        d[r] = r;
        int mx = Math.max(A[l], A[r]);
        int mi = Math.min(A[l], A[r]);
        int ans = 0;
        while (r < A.length) {
            while (mx - mi <= 1) {
                r++;
                if (r >= A.length) break;
                d[r] = r;
                if (A[r] >= mx) {
                    mx = A[r];
                }
                if (A[r] <= mi) {
                    mi = A[r];
                }
            }
            ans = Math.max(ans, r - l);
            if (r >= A.length) break;
            if (A[r] > mi) {
                l = d[mi] + 1;
                mi++;
            } else {
                l = d[mx] + 1;
                mx--;
            }
        }
        return ans;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(sc.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(ArrayList<Integer> A) {
    int l = 0, r = 1;
    HashMap<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) {
          break;
        }
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) {
        break;
      }
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0, r = 1;
    int[] d = new int[A.length];
    d[l] = l;
    d[r] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[r] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  private static int constRange(int[] A) {
    int l = 0;
    int r = 1;
    int[] d = new int[A.length];
    d[A[l]] = l;
    d[A[r]] = r;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        d[A[r]] = r;
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      A.add(scanner.nextInt());
    }
    System.out.println(constRange(A));
  }

  public static int constRange(List<Integer> A) {
    int l = 0, r = 1;
    Map<Integer, Integer> d = new HashMap<>();
    d.put(A.get(l), l);
    d.put(A.get(r), r);
    int mx = Math.max(A.get(l), A.get(r));
    int mi = Math.min(A.get(l), A.get(r));
    int ans = 0;
    while (r < A.size()) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.size()) break;
        d.put(A.get(r), r);
        if (A.get(r) >= mx) {
          mx = A.get(r);
        }
        if (A.get(r) <= mi) {
          mi = A.get(r);
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.size()) break;
      if (A.get(r) > mi) {
        l = d.get(mi) + 1;
        mi++;
      } else {
        l = d.get(mx) + 1;
        mx--;
      }
    }
    return ans;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] A = new int[n];
    for (int i = 0; i < n; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(constRange(A));
  }

  public static int constRange(int[] A) {
    int l = 0, r = 1;
    int mx = Math.max(A[l], A[r]);
    int mi = Math.min(A[l], A[r]);
    int ans = 0;
    while (r < A.length) {
      while (mx - mi <= 1) {
        r++;
        if (r >= A.length) break;
        A[r] = scanner.nextInt();
        if (A[r] >= mx) {
          mx = A[r];
        }
        if (A[r] <= mi) {
          mi = A[r];
        }
      }
      ans = Math.max(ans, r - l);
      if (r >= A.length) break;
      if (A[r] > mi) {
        l = d[mi] + 1;
        mi++;
      } else {
        l = d[mx] + 1;
        mx--;
      }
    }
    return ans;
  }
}
[/JAVA]
======
