  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
      a.add(new int[] {row[0], row[1], row[2], i});
    }
    a = a.stream()
      .filter(x -> a.stream()
        .allMatch(c -> Arrays.stream(c).limit(3).anyMatch(u -> u >= x[3])))
      .collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. We first read in the input and parse it into an array of integers. We
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][];
    for (int i = 0; i < n; i++) {
      a[i] = Stream.of(scanner.nextLine().split(" ")).map(Integer::parseInt).toArray(Integer[]::new);
    }
    a = Arrays.stream(a).filter(x -> Arrays.stream(a).allMatch(c -> Arrays.stream(c).limit(3).allMatch(u -> Arrays.stream(x).limit(3).anyMatch(v -> v >= u)))).toArray(Integer[][]::new);
    System.out.println(Arrays.stream(a).mapToInt(x -> x[3]).min().getAsInt() + 1);
  }
}
[/JAVA]

This code is functionally identical to the Python code, with the following changes:

* The `input()` function is replaced with `Scanner.nextInt()` and `Scanner.nextLine()` to read input from the console.
* The `map()` function is
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];

    for (int i = 0; i < n; i++) {
      String[] tokens = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(tokens[j]);
      }
    }

    a = Arrays.stream(a)
        .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x, 0, 3).anyMatch(v -> v >= x[3])))
        .toArray(int[][]::new);

    int min = Arrays.stream(a)
        .map(x -> x[3])
        .min()
        .getAsInt();

    System.out.println(min + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(c -> a.stream().allMatch(r -> r.stream().anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    System.out.println(a.stream().mapToInt(r -> r.get(4)).min().orElse(0) + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] arr = new int[5];
      arr[0] = scanner.nextInt();
      arr[1] = scanner.nextInt();
      arr[2] = scanner.nextInt();
      arr[3] = scanner.nextInt();
      arr[4] = i;
      a.add(arr);
    }
    a = a.stream().filter(x -> {
      for (int[] c : a) {
        if (c[0] < x[0] && c[1] < x[1] && c[2] < x[2]) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(min + 1);
 
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      String[] input = scanner.nextLine().split(" ");
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(new Predicate<List<Integer>>() {
        @Override
        public boolean test(List<Integer> row) {
          for (List<Integer> c : a) {
            if (c.size() < 3) {
              continue;
            }
            if (row.size() < 3) {
              continue;
            }
            if (c.get(0) == row.get(0) && c.get(1) == row.get(1) && c.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
      row[3] = i;
      a.add(row);
    }
    a = a.stream().filter(x -> {
      for (int[] c : a) {
        if (Arrays.stream(c, 0, 3).anyMatch(v -> v >= x[3])) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().mapToInt(x -> x[3]).min().orElse(0);
    System.out.println(min + 1);
  }
}
[/JAVA]

This Java code is functionally identical to the Python code, with the following changes:
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> c.stream()
          .limit(3)
          .anyMatch(u -> row.stream()
            .limit(3)
            .anyMatch(v -> v >= u))))
      .collect(Collectors.toList());
    int min = a.stream()
      .map(row -> row.get(3))
      .min(Integer::compareTo)
      .get() + 1;
    System.out.println(
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      Integer[] values = new Integer[input.length];
      for (int j = 0; j < input.length; j++) {
        values[j] = Integer.parseInt(input[j]);
      }
      a.add(values);
    }
    a = a.stream().filter(c -> a.stream().allMatch(x -> x[3] >= c[3])).collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(x -> x[4])).get()[4] + 1);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code. It uses the `Scanner` class to read the input, the `ArrayList` class to store the list of arrays, and the `stream()` method to filter
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> row.stream()
          .anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(row -> row.get(3))
      .min()
      .getAsInt() + 1;
    System.out.println(min);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][n + 1];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < n; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][n] = i;
    }
    a = Arrays.stream(a)
        .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(c).limit(3).allMatch(u -> u >= x[j])))
        .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input,
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                a[i][j] = scanner.nextInt();
            }
            a[i][3] = i;
        }
        a = filter(a, (int[] x) -> {
            for (int[] c : a) {
                if (all(x[0] >= c[0], x[1] >= c[1], x[2] >= c[2])) {
                    return true;
                }
            }
            return false;
        });
        System.out.println(min(a, (int[] x) -> x[3] + 1));
    }

    private static <T> T[] filter(T[] a, Predicate<T> predicate) {
        List<T> result = new ArrayList<>();
        for (T x : a) {
            if (predicate.test(x)) {
                result.add(x);
            }
        }
        return result.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < input.length; j++) {
        row.add(Integer.parseInt(input[j]));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> row.stream()
          .anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(row -> row.get(3))
      .min()
      .getAsInt();
    System.out.println(min + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      String[] input = scanner.nextLine().split(" ");
      for (String num : input) {
        row.add(Integer.parseInt(num));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> {
        for (List<Integer> c : a) {
          if (c.get(0) == row.get(0) && c.get(1) == row.get(1) && c.get(2) == row.get(2)) {
            return false;
          }
        }
        return true;
      })
      .collect(Collectors.toList());
    int min = a.stream()
      .map(row -> row.get(3))
     
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(other -> row.stream()
          .anyMatch(v -> other.stream()
            .anyMatch(u -> v >= u))))
      .collect(Collectors.toList());
    System.out.println(a.stream()
      .min(Comparator.comparingInt(row -> row.get(3)))
      .map(row -> row.get(4) + 1)
      .orElse(0));
  }
}
[/JAVA]

This
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] values = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
      a.add(values);
    }
    a = a.stream().filter(x -> {
      for (int[] c : a) {
        if (Arrays.stream(c).limit(3).allMatch(u -> Arrays.stream(x).limit(3).anyMatch(v -> v >= u))) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().mapToInt(x -> x[3]).min().orElse(0);
    System.out.println(min + 1);
  }
}
[/JAVA]

This code first reads the input from the user and stores it in a
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < 4; j++) {
        row.add(scanner.nextInt());
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        if (row.get(0) >= c.get(0) && row.get(1) >= c.get(1) && row.get(2) >= c.get(2)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    System.out.println(a.stream().mapToInt(row -> row.get(3) + 1).min().getAsInt());
  }
}
[/JAVA]

======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String num : input) {
        row.add(Integer.parseInt(num));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row ->
        a.stream()
          .allMatch(c ->
            Arrays.stream(row.subList(0, 3).toArray())
              .allMatch(u ->
                Arrays.stream(c.subList(0, 3).toArray())
                  .anyMatch(v -> v >= u))))
      .collect(Collectors.toList());
    System.out.println(a.stream()
      .min(Comparator.comparing(row -> row.get(3)))
      .map
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      a.add(Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList()));
    }
    a = a.stream().filter(c -> {
      for (List<Integer> c2 : a) {
        if (c2.get(0) >= c.get(0) && c2.get(1) >= c.get(1) && c2.get(2) >= c.get(2)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().mapToInt(c -> c.get(3)).min().getAsInt();
    System.out.println(min + 1);
  }
}
[/JAVA]

This is a basic implementation of
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      String[] input = sc.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][4] = i;
    }
    a = a.stream()
      .filter(x -> a.stream()
        .allMatch(c -> x[3] >= c[3] && x[4] != c[4]))
      .collect(Collectors.toList());
    System.out.println(a.stream()
      .min(Comparator.comparingInt(x -> x[3]))
      .get()[4] + 1);
  }
}
[/JAVA]

Explanation:

1. The first line imports the `Scanner` class from the `java.util` package, which is used to read input from the user.
2. The second line imports the `
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Stream.of(a)
      .filter(c -> Stream.of(a)
        .allMatch(c2 -> Stream.of(c[0], c[1], c[2])
          .allMatch(v -> Stream.of(c2[0], c2[1], c2[2])
            .anyMatch(u -> v >= u))))
      .collect(Collectors.toList());
    System.out.println(Stream.of(a)
      .min(Comparator.comparingInt(c -> c[3]))
      .map(c -> c[4] + 1)
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = sc.nextLine().split(" ");
            for (int j = 0; j < 3; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][3] = i;
        }
        a = Arrays.stream(a)
                .filter(x -> Arrays.stream(a)
                        .allMatch(c -> Arrays.stream(c)
                                .anyMatch(u -> u >= x[0] && u >= x[1] && u >= x[2])))
                .toArray(int[][]::new);
        int min = Arrays.stream(a)
                .mapToInt(x -> x[3])
                .min()
                .orElse(0);
        System.out.println(min + 1);
    }
}
[/JAVA]

This is a
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(c).allMatch(v -> v >= x[0] && v <= x[1])))
      .collect(Collectors.toList());
    System.out.println(Arrays.stream(a).mapToInt(x -> x[3]).min().getAsInt() + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 3; j++) {
        a[i][j] = scanner.nextInt();
      }
      a[i][3] = i;
    }
    a = filter(a, (int[] x) -> all(any(v >= u for u, v in zip(c[0:3], x[0:3])) for c in a));
    System.out.println(min(a, (int[] x) -> x[3])[4] + 1);
  }

  private static int[][] filter(int[][] a, Predicate<int[]> predicate) {
    return Arrays.stream(a).filter(predicate).toArray(int[][]::new);
  }

  private static boolean all(boolean[] values) {
    for (boolean value : values) {
      if (!value) {
        return false;
      }
    }
    return true;
  }

  private static boolean any
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      String[] input = scanner.nextLine().split(" ");
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> {
        for (List<Integer> c : a) {
          if (c.get(0) <= row.get(0) && c.get(1) <= row.get(1) && c.get(2) <= row.get(2)) {
            return false;
          }
        }
        return true;
      })
      .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(row -> row.get(3))).get().get
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a)
        .allMatch(c -> IntStream.range(0, 3)
          .anyMatch(i -> c[i] >= x[i])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a)
      .min(Comparator.comparingInt(x -> x[3]))
      .map(x -> x[4] + 1)
      .orElse(0));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < 5; j++) {
        row.add(sc.nextInt());
      }
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> row.stream()
          .allMatch(v -> v >= c.get(j))))
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(row -> row.get(4))
      .min()
      .getAsInt() + 1;
    System.out.println(min);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String input = scanner.next();
      String[] tokens = input.split(" ");
      int[] values = new int[tokens.length];
      for (int j = 0; j < tokens.length; j++) {
        values[j] = Integer.parseInt(tokens[j]);
      }
      a.add(values[3]);
    }
    a = a.stream().filter(x -> a.stream().allMatch(c -> c[0] >= x[0] && c[1] >= x[1] && c[2] >= x[2])).collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        if (c.get(0) > row.get(0) && c.get(1) > row.get(1) && c.get(2) > row.get(2)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().map(row -> row.get(3)).min(Integer::compare).get();
    System.out.println(min + 1
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            List<Integer> row = new ArrayList<>();
            for (String s : input) {
                row.add(Integer.parseInt(s));
            }
            row.add(i);
            a.add(row);
        }
        a = a.stream().filter(c -> {
            for (List<Integer> row : a) {
                if (row.size() < 3) {
                    continue;
                }
                if (row.get(0) == c.get(0) && row.get(1) == c.get(1) && row.get(2) == c.get(2)) {
                    return false;
                }
            }
            return true;
        }).collect(Collectors.toList());
        int minIndex = a.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      a[i][0] = scanner.nextInt();
      a[i][1] = scanner.nextInt();
      a[i][2] = scanner.nextInt();
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a)
        .allMatch(c -> Arrays.stream(c)
          .anyMatch(v -> v >= x[0]) && Arrays.stream(c)
          .anyMatch(v -> v >= x[1]) && Arrays.stream(c)
          .anyMatch(v -> v >= x[2])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a)
      .min(Comparator.comparingInt(x -> x[3]))
      .map(x -> x[4] + 1)
      .orElse(0));
  }
}
[/
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a)
        .allMatch(x -> Arrays.stream(c)
          .anyMatch(v -> v >= x[0] && v <= x[1] && v <= x[2])))
      .toArray(int[][]::new);
    int min = Arrays.stream(a)
      .map(x -> x[3])
      .min()
      .getAsInt() + 1;
    System.out.println(min);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x, 0, 3).allMatch(v -> v >= x[3])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparing(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This code first prompts the user to enter an integer `n`, and then reads `n` lines of input, each consisting of
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            int[] arr = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
            arr[3] = i;
            a.add(arr);
        }
        a = a.stream().filter(x -> {
            for (int[] c : a) {
                if (c[0] >= x[0] && c[1] >= x[1] && c[2] >= x[2]) {
                    return false;
                }
            }
            return true;
        }).collect(Collectors.toList());
        int min = a.stream().mapToInt(x -> x[3]).min().orElse(0);
        System.out.println(min + 1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
      a[i][4] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a)
        .allMatch(c -> Arrays.stream(c)
          .limit(3)
          .allMatch(u -> Arrays.stream(x)
            .limit(3)
            .anyMatch(v -> v >= u))))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a)
      .min(Comparator.comparingInt(x -> x[3]))
      .map(x -> x[4] + 1)
      .orElse(0
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][n + 1];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < n; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][n] = i;
    }
    a = Arrays.stream(a)
        .filter(x -> Arrays.stream(a)
            .allMatch(c -> Arrays.stream(c)
                .anyMatch(v -> v >= x[0] && v <= x[1])))
        .toArray(int[][]::new);
    System.out.println(Arrays.stream(a)
        .min(Comparator.comparingInt(x -> x[3]))
        .map(x -> x[4] + 1)
        .orElse(0));
  }
}
[/JAVA]

This is
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x, 0, 3).anyMatch(u -> u >= x[3])))
      .collect(Collectors.toList());
    System.out.println(a.stream().mapToInt(x -> x[3] + 1).min().getAsInt());
  }
}
[/JAVA]

This is a Java implementation of the Python code. It uses the `Scanner` class to read input from the console, and the `Arrays` and `stream` classes to manipulate the array of arrays. The `filter`
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a)
        .allMatch(c -> Arrays.stream(c)
          .limit(3)
          .allMatch(u -> u >= x[j])))
      .toArray(int[][]::new);
    int minIndex = Arrays.stream(a)
      .mapToInt(x -> x[3])
      .min()
      .getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This is a straightforward conversion of the Python
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 3; j++) {
        a[i][j] = scanner.nextInt();
      }
      a[i][3] = i;
    }
    a = filter(a, (int[] x) -> {
      for (int[] c : a) {
        if (x[0] == c[0] && x[1] == c[1] && x[2] == c[2]) {
          return false;
        }
      }
      return true;
    });
    System.out.println(min(a, (int[] x) -> x[3] + 1));
  }

  public static int[][] filter(int[][] a, Predicate<int[]> predicate) {
    List<int[]> filtered = new ArrayList<>();
    for (int[] x : a) {
      if (predicate.test(x)) {
        filtered.add(x);
      }
    }
    return
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
              .filter(x -> Arrays.stream(a)
                                 .allMatch(c -> Arrays.stream(c)
                                                      .limit(3)
                                                      .allMatch(v -> v >= x[j])))
              .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
      a.add(row);
    }
    a = a.stream().filter(x -> a.stream().allMatch(c -> Arrays.stream(c).limit(3).allMatch(u -> Arrays.stream(x).limit(3).anyMatch(v -> v >= u)))).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
        }
        a = Arrays.stream(a)
                .filter(c -> Arrays.stream(a)
                        .allMatch(x -> Arrays.stream(x, 0, 3)
                                .anyMatch(v -> v >= x[3])))
                .toArray(int[][]::new);
        System.out.println(Arrays.stream(a)
                .min(Comparator.comparingInt(x -> x[3]))
                .map(x -> x[4] + 1)
                .orElse(0));
    }
}
[/JAVA]

This is the Java code that you requested. The code is functionally
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = sc.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][4] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a)
        .anyMatch(x -> Arrays.stream(c)
          .allMatch(v -> Arrays.stream(x)
            .anyMatch(u -> v >= u))))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a)
      .min(Comparator.comparingInt(x -> x[3]))
      .map(x -> x[4] + 1)
      .orElse(0));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.function.Predicate;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
             .filter(new Predicate<int[]>() {
               @Override
               public boolean test(int[] x) {
                 for (int[] c : a) {
                   if (c[0] == x[0] && c[1] == x[1] && c[2] == x[2]) {
                     return false;
                   }
                 }
                 return true;
               }
             })
             .toArray(int[][]::new);
    int minIndex = Arrays.stream(a)
                         .mapToInt(x -> x[3
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      a[i][0] = scanner.nextInt();
      a[i][1] = scanner.nextInt();
      a[i][2] = scanner.nextInt();
      a[i][3] = scanner.nextInt();
    }
    a = Stream.of(a)
      .filter(c -> Stream.of(a).allMatch(x -> Stream.of(x[0], x[1], x[2]).anyMatch(v -> v >= c[3])))
      .collect(Collectors.toList());
    int min = Stream.of(a).mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(min + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    scanner.nextLine(); // consume newline character

    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
      a[i][4] = i;
    }

    a = Stream.of(a)
      .filter(x -> Stream.of(a)
        .allMatch(c -> Stream.of(c[0], c[1], c[2])
          .allMatch(u -> Stream.of(x[0], x[1], x[2])
            .anyMatch(v -> v >= u))))
      .collect(Collectors.toList());

    int minIndex = a.stream()
      .mapToInt(x -> x[3])
      .min()
      .orElse(0);

======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = filter(a, (int[] x) -> all(any(v >= u for u, v in zip(c[:3], x[:3])) for c in a));
    System.out.println(min(a, (int[] x) -> x[3] + 1));
  }

  public static int[][] filter(int[][] a, Predicate<int[]> predicate) {
    return Arrays.stream(a).filter(predicate).toArray(int[][]::new);
  }

  public static int min(int[][] a, ToIntFunction<int[]> key) {
    return Arrays.stream(a).mapToInt(key).min().orElse(0);
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      a[i][0] = scanner.nextInt();
      a[i][1] = scanner.nextInt();
      a[i][2] = scanner.nextInt();
      a[i][3] = scanner.nextInt();
      a[i][4] = i;
    }
    a = Arrays.stream(a).filter(x -> Arrays.stream(a).allMatch(c -> Arrays.stream(c).limit(3).allMatch(u -> u >= x[0]))).toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. It uses the same logic and data structures as the Python code, but with Java
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a).filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(c).limit(3).allMatch(u -> Arrays.stream(x).limit(3).anyMatch(v -> v >= u)))).toArray(int[][]::new);
    int minIndex = Arrays.stream(a).mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This code is functionally identical to the Python code, with the following changes:

*
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      int[] row = Arrays.stream(line).mapToInt(Integer::parseInt).toArray();
      a.add(new int[] {row[0], row[1], row[2], i});
    }
    a = a.stream()
      .filter(x -> a.stream()
        .allMatch(c -> c[0] <= x[0] && c[1] <= x[1] && c[2] <= x[2]))
      .collect(Collectors.toList());
    System.out.println(a.stream()
      .min(Comparator.comparingInt(x -> x[3]))
      .map(x -> x[4] + 1)
      .orElse(0));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a)
        .allMatch(c -> Arrays.stream(c)
          .limit(3)
          .anyMatch(u -> u >= x[j])))
      .toArray(int[][]::new);
    int minIndex = Arrays.stream(a)
      .min(Comparator.comparingInt(x -> x[3]))
      .get()[3];
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This code is functionally identical
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();
            List<Integer> row = Stream.of(input.split(" "))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
            row.add(i);
            a.add(row);
        }
        a = a.stream()
                .filter(row -> a.stream()
                        .allMatch(c -> c.stream()
                                .limit(3)
                                .anyMatch(v -> v >= row.get(3))))
                .collect(Collectors.toList());
        System.out.println(a.stream()
                .map(row -> row.get(4))
                .min(Integer::compareTo)
                .get() + 1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] row = new int[4];
      for (int j = 0; j < 3; j++) {
        row[j] = scanner.nextInt();
      }
      row[3] = i;
      a.add(row);
    }
    a = a.stream()
      .filter(new Predicate<int[]>() {
        @Override
        public boolean test(int[] x) {
          for (int[] c : a) {
            if (c[0] >= x[0] && c[1] >= x[1] && c[2] >= x[2]) {
              return false;
            }
          }
          return true;
        }
      })
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(x -> x[3])
      .min()
     
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            List<Integer> row = new ArrayList<>();
            for (String num : input) {
                row.add(Integer.parseInt(num));
            }
            row.add(i);
            a.add(row);
        }
        a = a.stream()
                .filter(row -> a.stream()
                        .allMatch(c -> row.stream()
                                .limit(3)
                                .allMatch(v -> c.stream()
                                        .limit(3)
                                        .anyMatch(u -> v >= u))))
                .collect(Collectors.toList());
        int min = a.stream()
                .mapToInt(row -> row.get(3))
                .min()
                .orElse(0);
        System.out.println(min + 1);

======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] current = new int[input.length];
      for (int j = 0; j < input.length; j++) {
        current[j] = Integer.parseInt(input[j]);
      }
      a.add(current);
    }
    a = a.stream()
      .filter(x -> {
        for (int[] c : a) {
          if (!allGreater(c, x, 3)) {
            return false;
          }
        }
        return true;
      })
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(x -> x[3])
      .min()
      .getAsInt();
    System.out.println(min + 1);
  }

  private static boolean allGreater
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = new int[input.length + 1];
      for (int j = 0; j < input.length; j++) {
        row[j] = Integer.parseInt(input[j]);
      }
      row[input.length] = i;
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (int[] c : a) {
        if (row[0] == c[0] && row[1] == c[1] && row[2] == c[2]) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(row -> row[3]).min().getAsInt();
    System.out.println
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
             .filter(x -> Arrays.stream(a).allMatch(c -> Arrays.stream(c, 0, 3).anyMatch(u -> u >= x[0] && u <= x[1])))
             .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
        }
        a = Arrays.stream(a)
                .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x).anyMatch(v -> v >= c[0] && v <= c[1])))
                .toArray(int[][]::new);
        System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
    }
}
[/JAVA]

This code uses the `Scanner` class to read input from the user, and the `Arrays` and `Stream` classes to manipulate the array of arrays. The `filter
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        if (row.get(3) >= c.get(3) && row.get(4) >= c.get(4) && row.get(5) >= c.get(5)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(row -> row.get(3))).get().get(4) + 1);
  }
}
[/JAVA]

======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
      a[i][4] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x).limit(3).allMatch(v -> v >= x[j])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This is the Java code that is equivalent to the Python code. It uses the `Scanner` class to read input from the user, and
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 3; j++) {
        a[i][j] = sc.nextInt();
      }
      a[i][3] = i;
    }
    a = filter(a, (int[] x) -> {
      for (int[] c : a) {
        if (all(x[0] >= c[0], x[1] >= c[1], x[2] >= c[2])) {
          return true;
        }
      }
      return false;
    });
    System.out.println(min(a, (int[] x) -> x[3])[4] + 1);
  }

  private static int[][] filter(int[][] a, IntPredicate predicate) {
    return Arrays.stream(a).filter(predicate).toArray(int[][]::new);
  }

  private static int[] min(int[][] a, IntFunction<int[]> key) {
    return Arrays.
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < 4; j++) {
        row.add(scanner.nextInt());
      }
      a.add(row);
    }
    a = a.stream().filter(c -> a.stream().anyMatch(r -> r.get(3) >= c.get(3))).collect(Collectors.toList());
    int min = a.stream().mapToInt(r -> r.get(4)).min().getAsInt();
    System.out.println(min + 1);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. The `Scanner` class is used to read input from the user, and the `List` and `ArrayList` classes are used to store the input data. The `stream()` method is used to filter the list of
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
    }
    a = Arrays.stream(a).filter(c -> Arrays.stream(a).allMatch(c2 -> c2[0] >= c[0] && c2[1] >= c[1] && c2[2] >= c[2])).toArray(int[][]::new);
    int min = Arrays.stream(a).mapToInt(c -> c[3]).min().getAsInt();
    System.out.println(min + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> row = new ArrayList<>();
            String input = scanner.nextLine();
            String[] values = input.split(" ");
            for (String value : values) {
                row.add(Integer.parseInt(value));
            }
            row.add(i);
            a.add(row);
        }
        a = a.stream()
                .filter(new Predicate<List<Integer>>() {
                    @Override
                    public boolean test(List<Integer> row) {
                        for (List<Integer> c : a) {
                            if (c.get(0) == row.get(0) && c.get(1) == row.get(1) && c.get(2) == row.get(2)) {
                                return false;
                            }
                        }
                        return true
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String input = scanner.nextLine();
      String[] splitInput = input.split(" ");
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < splitInput.length; j++) {
        row.add(Integer.parseInt(splitInput[j]));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> row.stream()
          .anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    int minIndex = a.stream()
      .map(row -> row.get(3))
      .min(Integer::compare)
      .get();
    System.out.println(minIndex + 1);
  }
}
[
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                a[i][j] = sc.nextInt();
            }
            a[i][3] = i;
        }
        a = filter(a, (int[] x) -> {
            for (int[] c : a) {
                if (any(v >= u for u, v in zip(c[:3], x[:3]))) {
                    return false;
                }
            }
            return true;
        });
        System.out.println(min(a, (int[] x) -> x[3] + 1));
    }

    private static int[][] filter(int[][] a, Predicate<int[]> predicate) {
        int[][] result = new int[a.length][4];
        int i = 0;
        for (int[] x : a) {
            if (predicate.test(x)) {
                result[i++] = x;
            }
        }
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][3] = i;
        }
        a = Arrays.stream(a)
                .filter(x -> Arrays.stream(a)
                        .allMatch(c -> Arrays.stream(c)
                                .limit(3)
                                .allMatch(u -> u >= x[j]))
                )
                .toArray(int[][]::new);
        int min = Arrays.stream(a)
                .mapToInt(x -> x[3])
                .min()
                .getAsInt() + 1;
        System.out.println(min);
    }
}
[/JAVA]

This is the Java
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String input = scanner.nextLine();
      String[] values = input.split(" ");
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < values.length; j++) {
        row.add(Integer.parseInt(values[j]));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> {
        for (List<Integer> c : a) {
          if (c.get(0) >= row.get(0) && c.get(1) >= row.get(1) && c.get(2) >= row.get(2)) {
            return false;
          }
        }
        return true;
      })
      .collect(Collectors.toList());
    int minIndex = a.stream()
      .map
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
    }
    a = Arrays.stream(a)
        .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(x, 0, 3).anyMatch(v -> v >= x[j])))
        .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. The code first prompts the user to input a number `n`, then reads `n` lines of input and splits
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][5];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][4] = i;
    }
    a = Stream.of(a).filter(x -> {
      for (int[] c : a) {
        if (x[0] >= c[0] && x[1] >= c[1] && x[2] >= c[2]) {
          return false;
        }
      }
      return true;
    }).toArray(int[][]::new);
    int minIndex = Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4];
    System.out.println(minIndex + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = new int[input.length + 1];
      for (int j = 0; j < input.length; j++) {
        row[j] = Integer.parseInt(input[j]);
      }
      row[input.length] = i;
      a.add(row);
    }
    a = a.stream()
      .filter(new Predicate<int[]>() {
        @Override
        public boolean test(int[] x) {
          for (int[] c : a) {
            if (c[0] >= x[0] && c[1] >= x[1] && c[2] >= x[2]) {
              return false;
            }
          }
          return true;
        }
      })
      .collect(
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> a.stream().allMatch(c -> row.stream().anyMatch(v -> v >= c.get(0) && v <= c.get(2)))).collect(Collectors.toList());
    int min = a.stream().mapToInt(row -> row.get(3)).min().orElse(0);
    System.out.println(min + 1);
  }
}
[/JAVA]

This is the equivalent Java code for the provided Python code. It uses the `Scanner` class to read input from the user
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(c -> Arrays.stream(a).allMatch(c2 -> Arrays.stream(c[0], c[1], c[2]).anyMatch(v -> v >= c2[0] && v <= c2[2])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(c -> c[3])).get()[4] + 1);
  }
}
[/JAVA]

This code uses the `Scanner` class to read the input
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        if (row.get(0) < c.get(0) && row.get(1) < c.get(1) && row.get(2) < c.get(2)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int min = a.stream().mapToInt(row -> row.get(3)).min().orElse(0);
    System.out.println(min
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      a[i][0] = scanner.nextInt();
      a[i][1] = scanner.nextInt();
      a[i][2] = scanner.nextInt();
      a[i][3] = i;
    }
    a = a.stream()
      .filter(c -> a.stream()
        .allMatch(x -> x[0] >= c[0] && x[1] >= c[1] && x[2] >= c[2]))
      .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This Java code is functionally identical to the Python code, with the following changes:

* The `input()` function is replaced with `Scanner` to read input from the command line.
* The `map()` function
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] input = sc.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(input[j]);
      }
      a[i][4] = i;
    }
    a = filter(a);
    System.out.println(min(a, (x) -> x[4] + 1));
  }

  private static int[][] filter(int[][] a) {
    for (int i = 0; i < a.length; i++) {
      for (int j = 0; j < a.length; j++) {
        if (a[i][0] == a[j][0] && a[i][1] == a[j][1] && a[i][2] == a[j][2]) {
          a[j][4] = -1;
        }
      }
    }
    return a;
  }

  private static int
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String input = scanner.nextLine();
      List<Integer> row = new ArrayList<>();
      for (String s : input.split(" ")) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream().allMatch(c -> row.stream().anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(row -> row.get(3)).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This code first reads in the input and creates a list of lists, where each inner list represents a row of the matrix and contains the values for that row
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      String[] input = scanner.nextLine().split(" ");
      for (String num : input) {
        row.add(Integer.parseInt(num));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(c -> {
      for (List<Integer> row : a) {
        if (row.get(3) != c.get(3) && row.get(4) >= c.get(4) && row.get(5) >= c.get(5)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(row -> row.get(3)).min().getAsInt();
    System.out.println(minIndex +
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();
            String[] values = input.split(" ");
            List<Integer> row = Arrays.stream(values).map(Integer::parseInt).collect(Collectors.toList());
            row.add(i);
            a.add(row);
        }
        a = a.stream().filter(x -> a.stream().allMatch(c -> c.stream().limit(3).anyMatch(u -> x.stream().limit(3).anyMatch(v -> v >= u)))).collect(Collectors.toList());
        int minIndex = a.stream().mapToInt(x -> x.get(3)).min().getAsInt();
        System.out.println(minIndex + 1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < input.length; j++) {
        row.add(Integer.parseInt(input[j]));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(c -> a.stream().allMatch(r -> r.get(3) >= c.get(3)))
      .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(r -> r.get(4))).get().get(4) + 1);
  }
}
[/JAVA]

Explanation:

1. The `Scanner` class is used to read input from the user.
2.
======
