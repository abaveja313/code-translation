  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int inf = 1000000000;
    ArrayList<ArrayList<Integer>> f = new ArrayList<ArrayList<Integer>>();
    for (int i = 0; i < N; i++) {
      ArrayList<Integer> p = new ArrayList<Integer>();
      p.add(sc.nextInt());
      p.add(sc.nextInt());
      f.add(p);
    }
    f.sort((a, b) -> {
      if (a.get(0) != b.get(0)) {
        return a.get(0) - b.get(0);
      } else {
        return b.get(1) - a.get(1);
      }
    });
    ArrayList<Integer> lis = new ArrayList<Integer>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.size(); i++) {
      int t = f.get(i).get(1);
      int ind = Collections.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
 
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();

        int fx = 1;
        int fy = 1;

        if (x1 > x2) {
            fx = -1;
        }

        if (y1 > y2) {
            fy = -1;
        }

        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(sc.nextInt());
            point.add(sc.nextInt());
            f.add(point);
        }

        f.sort(Comparator.comparing(p -> p.get(0)).thenComparing(p -> -p.get(1)));

        List<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;

        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }

        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }

        System.out.println(result);
    }
}
[/J
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int x1 = scanner.nextInt();
    int y1 = scanner.nextInt();
    int x2 = scanner.nextInt();
    int y2 = scanner.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = scanner.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = scanner.nextInt();
      f[i][1] = scanner.nextInt();
    }
    List<Integer> lis = new ArrayList<>();
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Collections.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      result += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
    }
    System.out.println(result);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        int fx = 1;
        int fy = 1;

        if (x1 > x2) {
            fx = -1;
        }

        if (y1 > y2) {
            fy = -1;
        }

        int N = scanner.nextInt();
        int[][] f = new int[N][2];

        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }

        int inf = 1000000000;
        int[] lis = new int[N];
        int lislen = 0;

        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }

        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();

        int fx = 1;
        int fy = 1;

        if (x1 > x2) {
            fx = -1;
        }

        if (y1 > y2) {
            fy = -1;
        }

        int N = sc.nextInt();
        int[][] f = new int[N][2];

        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }

        f = f.stream().filter(p -> (min(x1, x2) <= p[0] && p[0] <= max(x1, x2)) && (min(y1, y2) <= p[1] && p[1] <= max(y1, y2))).toArray(int[][]::new);

        f = f.stream().sorted(Comparator.comparingInt(p -> p[1]).thenComparingInt(p -> -p[0])).toArray(int[][]::new);

        ArrayList<Integer> lis = new ArrayList<>();
        int lislen = 0;

        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }

        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) {
                    return o1[0] - o2[0];
                } else {
                    return o1[1] - o2[1];
                }
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            ans += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    int inf = 1000000000;
    ArrayList<Integer> lis = new ArrayList<>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      if (min(x1, x2) <= f[i][0] && f[i][0] <= max(x1, x2) && min(y1, y2) <= f[i][1] && f[i][1] <= max(y1, y2)) {
        int ind = Collections.binarySearch(lis, f[i][1]);
        lis.set(ind, f[i][1]);
        lislen = Math.max(lislen, ind + 1);
      }
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    Arrays.sort(f, new Comparator<int[]>() {
      @Override
      public int compare(int[] a, int[] b) {
        if (a[0] != b[0]) {
          return a[0] - b[0];
        } else {
          return b[1] - a[1];
        }
      }
    });
    int[] lis = new int[N];
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Arrays.binarySearch(lis, 0, lislen, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis[ind] = t;
      lislen = Math.max(lislen, ind + 1);
    }
    int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      result += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
    } else {
      result += 5 * Math.PI * lislen;
    }
    System.out.println(result);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(scanner.nextInt());
            point.add(scanner.nextInt());
            f.add(point);
        }
        f = f.stream().filter(point -> (Math.min(x1, x2) <= point.get(0) && point.get(0) <= Math.max(x1, x2)) && (Math.min(y1, y2) <= point.get(1) && point.get(1) <= Math.max(y1, y2))).collect(Collectors.toList());
        f.sort((o1, o2) -> {
            if (o1.get(0) != o2.get(0)) {
                return o1.get(0) - o2.get(0);
            } else {
                return o1.get(1) - o2.get(1);
            }
        });
        int[] lis = new int[N];
        Arrays.fill(lis, inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    int[] lis = new int[N];
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Arrays.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis[ind] = t;
      lislen = Math.max(lislen, ind + 1);
    }
    int ans = 0;
    if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) fx = -1;
        if (y1 > y2) fy = -1;
        int[] lis = new int[N];
        Arrays.fill(lis, Integer.MAX_VALUE);
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
        }
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] != Integer.MAX_VALUE) {
                lislen++;
            }
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            ans += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        } else {
            ans += 5 * Math.PI * lislen;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1, fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = Arrays.stream(f)
                .filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2)))
                .map(p -> new int[] {p[0] * fx, p[1] * fy})
                .sorted((a, b) -> a[0] - b[0] == 0 ? b[1] - a[1] : a[0] - b[0])
                .toArray(int[][]::new);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * l
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, (a, b) -> a[0] - b[0]);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = 0;
        if (lislen == Math.abs(x2 - x1) + Math.abs(y2 - y1) + 1) {
            ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        } else {
            ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = Arrays.stream(f).filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toArray(int[][]::new);
        Arrays.sort(f, Comparator.comparing(p -> p[1]).thenComparing(p -> -p[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(scanner.nextInt());
            point.add(scanner.nextInt());
            f.add(point);
        }
        f.sort((p1, p2) -> p1.get(0) - p2.get(0));
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.abs(x2 - x1) + Math.abs(y2 - y1) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int inf = 1000000000;
    ArrayList<Integer> lis = new ArrayList<Integer>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Collections.binarySearch(lis, t);
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    int ans = 0;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        Arrays.sort(f, (a, b) -> (a[0] - b[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -(ind + 1);
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result;
        if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        ArrayList<ArrayList<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            ArrayList<Integer> p = new ArrayList<>();
            p.add(sc.nextInt());
            p.add(sc.nextInt());
            f.add(p);
        }
        f.sort(new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
                return o1.get(0) - o2.get(0);
            }
        });
        ArrayList<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t, new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    return o1.compareTo(o2);
                }
            });
            if (ind < 0) {
                ind = -(ind + 1);
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            if (x1 <= f[i][0] && f[i][0] <= x2 && y1 <= f[i][1] && f[i][1] <= y2) {
                f[i][0] *= fx;
                f[i][1] *= fy;
            } else {
                f[i][0] = Integer.MAX_VALUE;
                f[i][1] = Integer.MAX_VALUE;
            }
        }
        Arrays.sort(f, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            } else {
                return b[1] - a[1];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            if (f[i][1] < lis[lislen]) {
                lis[lislen] = f[i][1];
                lislen++;
            }
        }
        if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
           
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(sc.nextInt() * fx);
            point.add(sc.nextInt() * fy);
            f.add(point);
        }
        f.sort(Comparator.comparing(p -> p.get(0)).thenComparing(p -> -p.get(1)));
        List<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = bisectLeft(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        int result;
        if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
    
    public static int bisectLeft(List<Integer> lis, int t) {
        int low = 0;
        int high = lis.size() - 1;

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(sc.nextInt());
            point.add(sc.nextInt());
            f.add(point);
        }
        f.sort((a, b) -> (a.get(0) - b.get(0)) * fx + (a.get(1) - b.get(1)) * fy);
        List<Integer> lis = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int t = f.get(i).get(1);
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis.add(ind, t);
        }
        int lislen = lis.size();
        if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[0], o2[0]);
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }

    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }

    ArrayList<Integer> lis = new ArrayList<>();
    int lislen = 0;
    for (int i = 0; i < N; i++) {
      int t = f[i][1];
      int ind = Collections.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }

    int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      result -= 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      result -= 20 * lislen + 5 * Math.PI * lislen;
    }
    System.out.println(result);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        Arrays.sort(f, (a, b) -> (a[0] - b[0]) * fx + (a[1] - b[1]) * fy);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int inf = 1000000000;
    List<List<Integer>> f = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      List<Integer> point = new ArrayList<>();
      point.add(sc.nextInt());
      point.add(sc.nextInt());
      f.add(point);
    }
    f.sort((p1, p2) -> p1.get(0) - p2.get(0));
    List<Integer> lis = new ArrayList<>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.size(); i++) {
      int t = f.get(i).get(1);
      int ind = Collections.binarySearch(lis, t);
      lis.set(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, (a, b) -> (a[0] - b[0]) * fx + (a[1] - b[1]) * fy);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result += 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result += 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toArray(int[][]::new);
        f.sort(Comparator.comparing(p -> p[1]).thenComparing(p -> -p[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}

[/
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int fx = 1, fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        ArrayList<Integer> lis = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            if (x1 <= f[i][0] && f[i][0] <= x2 && y1 <= f[i][1] && f[i][1] <= y2) {
                lis.add(f[i][1] * fy);
            }
        }
        Collections.sort(lis);
        int lislen = lis.size();
        int minX = Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1;
        if (lislen == minX) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toArray(int[][]::new);
        f = f.stream().sorted(Comparator.comparing(p -> p[0], Comparator.reverseOrder())).toArray(int[][]::new);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/J
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toArray(int[][]::new);
        f.sort((p1, p2) -> (p1[0] - p2[0]) * fx + (p1[1] - p2[1]) * fy);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt() * fx;
      f[i][1] = sc.nextInt() * fy;
    }
    List<Integer> lis = new ArrayList<>();
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = lis.indexOf(t);
      if (ind == -1) {
        lis.add(t);
        lislen++;
      } else {
        lis.set(ind, t);
      }
    }
    int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      ans += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
    } else {
      ans += 5 * Math.PI * lislen;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] == o2[0]) {
                    return o1[1] - o2[1];
                } else {
                    return o1[0] - o2[0];
                }
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        ArrayList<ArrayList<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            ArrayList<Integer> point = new ArrayList<>();
            point.add(sc.nextInt());
            point.add(sc.nextInt());
            f.add(point);
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p.get(0) && Math.max(x1, x2) >= p.get(0) && Math.min(y1, y2) <= p.get(1) && Math.max(y1, y2) >= p.get(1))).collect(Collectors.toList());
        f.sort(Comparator.comparing(p -> p.get(0)).thenComparing(p -> -p.get(1)));
        ArrayList<Integer> lis = new ArrayList<>();
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
        }
        int lislen = lis.size();
        if (lislen == Math.abs(x2 - x1) + Math.abs(y2 - y1) + 1) {
            System.out.println(((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1)));
        } else {
            System.out.println(((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen));
        }
   
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = bisectLeft(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
    
    public static int bisectLeft(int[] arr, int target) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    int[] lis = new int[N];
    int lislen = 0;
    for (int i = 0; i < N; i++) {
      int t = f[i][1];
      int ind = Arrays.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis[ind] = t;
      lislen = Math.max(lislen, ind + 1);
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        Arrays.sort(f, (a, b) -> (a[0] - b[0]) * fx + (a[1] - b[1]) * fy);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) fx = -1;
        if (y1 > y2) fy = -1;
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = Arrays.stream(f)
                .filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2)))
                .map(p -> new int[] { p[0] * fx, p[1] * fy })
                .toArray(int[][]::new);
        Arrays.sort(f, Comparator.comparingInt(p -> p[1]).thenComparingInt(p -> -p[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);

======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toArray(int[][]::new);
        f.sort(Comparator.comparing(p -> p[1]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.lang.Math;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(sc.nextInt());
            point.add(sc.nextInt());
            f.add(point);
        }
        f.sort(Comparator.comparing(p -> p.get(0)));
        List<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> p = new ArrayList<>();
            p.add(sc.nextInt());
            p.add(sc.nextInt());
            f.add(p);
        }
        f.sort(Comparator.comparingInt(p -> p.get(0)).thenComparingInt(p -> -p.get(1)));
        List<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] p1, int[] p2) {
                if (p1[0] != p2[0]) {
                    return p1[0] - p2[0];
                } else {
                    return p1[1] - p2[1];
                }
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int xDiff = Math.abs(x2 - x1);
        int yDiff = Math.abs(y2 - y1);
        int totalArea = (xDiff + yDiff) * 100;
        int perimeter = 20 * lislen;
        int circleArea = 5 * Math.PI * lislen;
        int total = totalArea - perimeter + circleArea;
        System.out.println(total);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    Arrays.sort(f, (a, b) -> {
      if (a[0] != b[0]) {
        return a[0] - b[0];
      } else {
        return b[1] - a[1];
      }
    });
    int[] lis = new int[N];
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Arrays.binarySearch(lis, 0, lislen, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis[ind] = t;
      lislen = Math.max(lislen, ind + 1);
    }
    int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      ans += 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      ans += 5 * Math.PI * lislen;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int inf = 1000000000;
        List<Integer> lis = new ArrayList<Integer>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int inf = 1000000000;
        List<Integer> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            if (x1 <= x && x <= x2 && y1 <= y && y <= y2) {
                f.add(x * x1 + y * y1);
            }
        }
        f.sort(Comparator.comparing(a -> a));
        List<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i);
            int ind = Collections.binarySearch(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        int fx = 1;
        int fy = 1;

        if (x1 > x2) {
            fx = -1;
        }

        if (y1 > y2) {
            fy = -1;
        }

        int N = scanner.nextInt();
        int[][] f = new int[N][2];

        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }

        f = f.stream()
                .filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2)))
                .map(p -> new int[] { p[0] * fx, p[1] * fy })
                .toArray(int[][]::new);

        f.sort(Comparator.comparing(p -> p[0]).thenComparing(p -> -p[1]));

        int[] lis = new int[N];
        int lislen = 0;

        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = bisect_left(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }

        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1))
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<List<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            List<Integer> point = new ArrayList<>();
            point.add(sc.nextInt() * fx);
            point.add(sc.nextInt() * fy);
            f.add(point);
        }
        f.sort((p1, p2) -> (p1.get(0).compareTo(p2.get(0)) != 0 ? p1.get(0).compareTo(p2.get(0)) : p1.get(1).compareTo(p2.get(1))));
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int fx = 1, fy = 1;
        int x1 = sc.nextInt(), y1 = sc.nextInt(), x2 = sc.nextInt(), y2 = sc.nextInt();
        if (x1 > x2) fx = -1;
        if (y1 > y2) fy = -1;
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt() * fx;
            f[i][1] = sc.nextInt() * fy;
        }
        Arrays.sort(f, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) {
                    return a[0] - b[0];
                } else {
                    return b[1] - a[1];
                }
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) ind = -ind - 1;
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        Arrays.sort(f, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            } else {
                return b[1] - a[1];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            ans += 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        Arrays.sort(f, (a, b) -> {
            if (a[0] == b[0]) {
                return a[1] - b[1];
            } else {
                return a[0] - b[0];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] x1y1 = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] x2y2 = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int fx = 1;
        int fy = 1;
        if (x1y1[0] > x2y2[0]) {
            fx = -1;
        }
        if (x1y1[1] > x2y2[1]) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i] = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        }
        f = f.stream().filter(p -> (Math.min(x1y1[0], x2y2[0]) <= p[0] && p[0] <= Math.max(x1y1[0], x2y2[0]) && Math.min(x1y1[1], x2y2[1]) <= p[1] && p[1] <= Math.max(x1y1[1], x2y2[1]))).toArray(int[][]::new);
        f = f.stream().sorted((p1, p2) -> p1[0] - p2[0]).toArray(int[][]::new);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2y2[0] - x1y1[0]), Math.abs(x2y2[1] - x1y1[1])) + 1) {
            System.out.println((Math.abs(x2y2[0] - x1y1[0]) + Math.abs(x2y2[1] - x1y1[1])) * 100 - 2
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int x1 = scanner.nextInt();
    int y1 = scanner.nextInt();
    int x2 = scanner.nextInt();
    int y2 = scanner.nextInt();
    int N = scanner.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = scanner.nextInt();
      f[i][1] = scanner.nextInt();
    }
    int[] lis = new int[N];
    int lisLen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = Arrays.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis[ind] = t;
      lisLen = Math.max(lisLen, ind + 1);
    }
    int result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lisLen + 5 * Math.PI * lisLen;
    System.out.println(result);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Math;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<int[]> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] point = new int[2];
            point[0] = sc.nextInt();
            point[1] = sc.nextInt();
            f.add(point);
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).collect(Collectors.toList());
        f.sort(Comparator.comparingInt(p -> p[0]).thenComparingInt(p -> -p[1]));
        int[] lis = new int[N];
        Arrays.fill(lis, inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i)[1];
            int ind = Collections.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) +
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int inf = 1000000000;
    ArrayList<int[]> f = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] p = new int[2];
      p[0] = sc.nextInt();
      p[1] = sc.nextInt();
      f.add(p);
    }
    f.sort((p1, p2) -> (p1[0] - p2[0]) * fx + (p1[1] - p2[1]) * fy);
    ArrayList<Integer> lis = new ArrayList<>();
    int lislen = 0;
    for (int i = 0; i < f.size(); i++) {
      int t = f.get(i)[1];
      int ind = Collections.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      ans += 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      ans += 5 * Math.PI * lislen;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int inf = 1000000000;
        ArrayList<Point> points = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            if (x >= x1 && x <= x2 && y >= y1 && y <= y2) {
                points.add(new Point(x, y));
            }
        }
        Collections.sort(points, new Comparator<Point>() {
            @Override
            public int compare(Point p1, Point p2) {
                if (p1.x == p2.x) {
                    return p1.y - p2.y;
                } else {
                    return p1.x - p2.x;
                }
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < points.size(); i++) {
            int t = points.get(i).y;
            int ind = Collections.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }

    static class Point {
        int x;
        int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}

[/JAVA
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        f = filter(f, x1, x2, y1, y2);
        f = sort(f);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = bisect_left(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }

    public static int[][] filter(int[][] f, int x1, int x2, int y1, int y2) {
        int[][] filtered = new int[f.length][2];
        int count = 0;
        for (int i = 0; i < f.length; i++) {
            if (x1 <= f[i][0] && f[i][0] <= x2 && y1 <= f[i][1] && f[i][1] <= y2) {
                filtered[count][0] = f[i][0];
                filtered[count][1] = f[i][1];
                count++;
            }
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int inf = 1000000000;
    ArrayList<ArrayList<Integer>> f = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      ArrayList<Integer> point = new ArrayList<>();
      point.add(sc.nextInt());
      point.add(sc.nextInt());
      f.add(point);
    }
    f.sort(Comparator.comparing(p -> p.get(0)));
    ArrayList<Integer> lis = new ArrayList<>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.size(); i++) {
      int t = f.get(i).get(1);
      int ind = Collections.binarySearch(lis, t);
      lis.set(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, (a, b) -> (a[0] - b[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) {
                ind = -ind - 1;
            }
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int x1 = scanner.nextInt();
    int y1 = scanner.nextInt();
    int x2 = scanner.nextInt();
    int y2 = scanner.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = scanner.nextInt();
    int inf = 1000000000;
    List<List<Integer>> f = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      List<Integer> p = new ArrayList<>();
      p.add(scanner.nextInt());
      p.add(scanner.nextInt());
      f.add(p);
    }
    f.sort((p1, p2) -> {
      if (p1.get(0) != p2.get(0)) {
        return p1.get(0) - p2.get(0);
      } else {
        return p1.get(1) - p2.get(1);
      }
    });
    List<Integer> lis = new ArrayList<>();
    lis.add(inf);
    int lislen = 0;
    for (int i = 0; i < f.size(); i++) {
      int t = f.get(i).get(1);
      int ind = Collections.binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.set(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    int result = 0;
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
    } else {
      result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int x1 = sc.nextInt();
    int y1 = sc.nextInt();
    int x2 = sc.nextInt();
    int y2 = sc.nextInt();
    int fx = 1;
    int fy = 1;
    if (x1 > x2) {
      fx = -1;
    }
    if (y1 > y2) {
      fy = -1;
    }
    int N = sc.nextInt();
    int[][] f = new int[N][2];
    for (int i = 0; i < N; i++) {
      f[i][0] = sc.nextInt();
      f[i][1] = sc.nextInt();
    }
    Arrays.sort(f, (a, b) -> a[0] - b[0]);
    List<Integer> lis = new ArrayList<>();
    int lislen = 0;
    for (int i = 0; i < f.length; i++) {
      int t = f[i][1];
      int ind = binarySearch(lis, t);
      if (ind < 0) {
        ind = -ind - 1;
      }
      lis.add(ind, t);
      lislen = Math.max(lislen, ind + 1);
    }
    if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1));
    } else {
      System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
    }
  }

  private static int binarySearch(List<Integer> arr, int target) {
    int low = 0;
    int high = arr.size() - 1;
    while (low <= high) {
      int mid = (low + high) / 2;
      if (arr.get(mid) < target) {
        low = mid + 1;
      } else if (arr.get(mid) > target
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.lang.Math;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) fx = -1;
        if (y1 > y2) fy = -1;
        f = Arrays.stream(f)
                .filter(p -> (x1 <= p[0] && p[0] <= x2) && (y1 <= p[1] && p[1] <= y2))
                .map(p -> new int[] {p[0] * fx, p[1] * fy})
                .toArray(int[][]::new);
        Arrays.sort(f, (a, b) -> (a[0] == b[0] ? -a[1] + b[1] : a[0] - b[0]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            if (ind < 0) ind = -ind - 1;
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * (lislen - 1);
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Math;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            ans = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(ans);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int inf = 1000000000;
        List<Point> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            f.add(new Point(x, y));
        }
        f.sort(Comparator.comparing(Point::getX).thenComparing(Point::getY));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            Point p = f.get(i);
            int ind = Collections.binarySearch(lis, p.getY());
            lis[ind] = p.getY();
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }

    private static class Point {
        private int x;
        private int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int inf = 1000000000;
        ArrayList<ArrayList<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            ArrayList<Integer> point = new ArrayList<>();
            point.add(scanner.nextInt());
            point.add(scanner.nextInt());
            f.add(point);
        }
        f.sort(Comparator.comparing(p -> p.get(0)).thenComparing(p -> -p.get(1)));
        ArrayList<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.set(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int inf = 1000000000;
        ArrayList<ArrayList<Integer>> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            ArrayList<Integer> point = new ArrayList<>();
            point.add(scanner.nextInt());
            point.add(scanner.nextInt());
            f.add(point);
        }
        f.sort(new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {
                return o1.get(0).compareTo(o2.get(0));
            }
        });
        ArrayList<Integer> lis = new ArrayList<>();
        lis.add(inf);
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i).get(1);
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = scanner.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = scanner.nextInt();
            f[i][1] = scanner.nextInt();
        }
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            lis.add(ind, t);
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        List<Integer> lis = new ArrayList<>();
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(lis, t);
            if (ind >= 0) {
                lis.add(ind, t);
            } else {
                lis.add(-ind - 1, t);
            }
            lislen = Math.max(lislen, lis.size());
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int inf = 1000000000;
        List<int[]> f = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] point = new int[2];
            point[0] = sc.nextInt();
            point[1] = sc.nextInt();
            f.add(point);
        }
        f = f.stream().filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2))).toList();
        f.sort((a, b) -> (a[0] - b[0]) * fx + (a[1] - b[1]) * fy);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.size(); i++) {
            int t = f.get(i)[1];
            int ind = Collections.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < N; i++) {
            int t = f[i][1];
            int ind = Arrays.binarySearch(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result = 0;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int fx = 1;
        int fy = 1;
        if (x1 > x2) {
            fx = -1;
        }
        if (y1 > y2) {
            fy = -1;
        }
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        Arrays.sort(f, (a, b) -> (a[1] - b[1]));
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = Collections.binarySearch(Arrays.asList(lis), t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0));
        } else {
            System.out.println((Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();
        int N = sc.nextInt();
        int[][] f = new int[N][2];
        for (int i = 0; i < N; i++) {
            f[i][0] = sc.nextInt();
            f[i][1] = sc.nextInt();
        }
        f = filter(f, x1, x2, y1, y2);
        f = sort(f, 0, 1);
        int[] lis = new int[N];
        int lislen = 0;
        for (int i = 0; i < f.length; i++) {
            int t = f[i][1];
            int ind = bisectLeft(lis, t);
            lis[ind] = t;
            lislen = Math.max(lislen, ind + 1);
        }
        int result;
        if (lislen == Math.min(Math.abs(x2 - x1), Math.abs(y2 - y1)) + 1) {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 10 * Math.PI + 5 * Math.PI * Math.max(lislen - 1, 0);
        } else {
            result = (Math.abs(x2 - x1) + Math.abs(y2 - y1)) * 100 - 20 * lislen + 5 * Math.PI * lislen;
        }
        System.out.println(result);
    }

    public static int[][] filter(int[][] f, int x1, int x2, int y1, int y2) {
        return Arrays.stream(f)
                .filter(p -> (Math.min(x1, x2) <= p[0] && p[0] <= Math.max(x1, x2)) && (Math.min(y1, y2) <= p[1] && p[1] <= Math.max(y1, y2)))
                .toArray(int[][]::new);
    }

    public static int[][] sort(int[][] f, int i, int j) {
        return Arrays.stream(f)
                .sorted((p1
======
