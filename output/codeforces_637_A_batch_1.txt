  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a);
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a);
        int i = 0;
        while (i < n) {
            if (Collections.frequency(a, a.get(i)) < K) {
                int C = Collections.frequency(a, a.get(i));
                n -= C;
                int val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int minI = 1000001;
        int ID = -1;
        Set<Integer> A = new HashSet<>(a);
        for (int i : A) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != i) {
                j--;
            }
            if (j < minI) {
                minI = j;
                ID = i;
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    Set<Integer> A = new HashSet<>(a);
    for (int i : A) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = i;
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a, Comparator.comparingInt(a::count));
        int i = 0;
        while (true) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (i < n) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
    int K = Arrays.stream(a).map(a[i] -> a.count(a[i])).max().getAsInt();
    int i = 0;
    while (true) {
      if (a.count(a[i]) < K) {
        int C = a.count(a[i]);
        n -= C;
        int Val = a[i];
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    ArrayList<Integer> A = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = a.stream().mapToInt(i -> i).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (a.stream().filter(x -> x == a.get(i)).count() < k) {
        int c = a.stream().filter(x -> x == a.get(i)).count();
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = getMaxCount(a);
        int i = 0;
        while (i < n) {
            if (a.get(i) < K) {
                int C = a.get(i);
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }

    private static int getMaxCount(List<Integer> a) {
        Map<Integer, Integer> counts = new HashMap<>();
        for (int i = 0; i < a.size(); i++) {
            int count = counts.getOrDefault(a.get(i), 0) +
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a, Comparator.comparingInt(a::count));
        int i = 0;
        while (i < n) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int K = getMaxCount(a);
        int i = 0;
        while (true) {
            if (getCount(a, a[i]) < K) {
                int C = getCount(a, a[i]);
                n -= C;
                int val = a[i];
                for (int k = 0; k < C; k++) {
                    a = remove(a, val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int minI = 1000001;
        int ID = -1;
        int[] A = getUnique(a);
        for (int i = 0; i < A.length; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != A[i]) {
                j--;
            }
            if (j < minI) {
                minI = j;
                ID = A[i];
            }
        }
        System.out.println(ID);
    }

    private static int getMaxCount(int[] a) {
        int max = 0;
        for (int i = 0; i < a.length; i++) {
            int count = getCount(a, a[i]);
            if (count > max) {
                max = count;
            }
        }
        return max;
    }

    private static int getCount(int[] a, int val) {
        int count = 0;
        for (int i = 0; i < a.length; i
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(x -> x).max().getAsInt();
    int i = 0;
    while (true) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = a.stream().distinct().collect(Collectors.toList());
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = getMaxCount(a);
        int i = 0;
        while (true) {
            if (getCount(a, a[i]) < K) {
                int C = getCount(a, a[i]);
                n -= C;
                int val = a[i];
                for (int k = 0; k < C; k++) {
                    a = removeElement(a, val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int minI = 1000001;
        int ID = -1;
        int[] A = getUniqueElements(a);
        for (int i = 0; i < A.length; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != A[i]) {
                j--;
            }
            if (j < minI) {
                minI = j;
                ID = A[i];
            }
        }
        System.out.println(ID);
    }

    public static int getMaxCount(int[] a) {
        int maxCount = 0;
        for (int i = 0; i < a.length; i++) {
            int count = getCount(a, a[i]);
            if (count > maxCount) {
                maxCount = count;
            }
        }
        return maxCount;
    }

    public static int getCount(int[] a, int val) {
        int count = 0;
        for (int i = 0; i < a.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a);
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a);
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < k) {
        int c = Collections.frequency(a, a.get(i));
        n -= c;
        int val = a.get(i);
        for (int k = 0; k < c; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    Set<Integer> set = new HashSet<>(a);
    for (int i : set) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = i;
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
    int K = Collections.max(Arrays.stream(a).boxed().collect(Collectors.toList()));
    int i = 0;
    while (i < n) {
      if (Collections.frequency(Arrays.asList(a), a[i]) < K) {
        int C = Collections.frequency(Arrays.asList(a), a[i]);
        n -= C;
        int val = a[i];
        for (int k = 0; k < C; k++) {
          a = Arrays.stream(a).filter(x -> x != val).toArray();
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != A.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a);
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = a.stream().map(a::count).max(Integer::compare).get();
    int i = 0;
    while (i < n) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(Integer::intValue).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int maxCount = a.stream().map(a::count).max(Integer::compare).get();
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < maxCount) {
        int count = a.count(a.get(i));
        n -= count;
        int val = a.get(i);
        for (int k = 0; k < count; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    Set<Integer> set = new HashSet<>(a);
    for (int i : set) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = i;
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(a, (a1, a2) -> a1.count(a1.get(i)) - a2.count(a2.get(i)));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(Collections.frequency(a));
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(Integer::intValue).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(Integer::intValue).max().getAsInt();
    int i = 0;
    while (i < n) {
      int count = a.stream().filter(x -> x == a.get(i)).count();
      if (count < K) {
        int C = count;
        int val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a, Comparator.comparingInt(a::count)).count();
    int i = 0;
    while (i < n) {
      if (a.count(a.get(i)) < k) {
        int c = a.count(a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int maxCount = Collections.max(a.stream().map(a::count).collect(Collectors.toList()));
        int i = 0;
        while (true) {
            if (a.count(a.get(i)) < maxCount) {
                int count = a.count(a.get(i));
                n -= count;
                int val = a.get(i);
                for (int k = 0; k < count; k++) {
                    a.remove(val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        List<Integer> unique = new ArrayList<>(new HashSet<>(a));
        int minIndex = 1000001;
        int id = -1;
        for (int i = 0; i < unique.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != unique.get(i)) {
                j--;
            }
            if (j < minIndex) {
                minIndex = j;
                id = unique.get(i);
            }
        }
        System.out.println(id);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] > K) {
                K = a[i];
            }
        }
        int i = 0;
        while (i < n) {
            if (a[i] < K) {
                int C = 0;
                for (int j = 0; j < n; j++) {
                    if (a[j] == a[i]) {
                        C++;
                    }
                }
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    for (int j = 0; j < n; j++) {
                        if (a[j] == Val) {
                            a[j] = 0;
                        }
                    }
                }
            } else {
                i++;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        for (int i = 0; i < n; i++) {
            if (a[i] < MinI) {
                MinI = a[i];
                ID = i;
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(Collections.frequency(a));
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int k = 0;
    for (int i = 0; i < n; i++) {
      k = Math.max(k, a[i]);
    }
    int i = 0;
    while (i < n) {
      if (a[i] < k) {
        int c = 0;
        for (int j = 0; j < n; j++) {
          if (a[j] == a[i]) {
            c++;
          }
        }
        n -= c;
        int val = a[i];
        for (int j = 0; j < c; j++) {
          a[i] = val;
        }
      } else {
        i++;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aList = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      aList.add(a[i]);
    }
    Set<Integer> set = new HashSet<>(aList);
    for (int i : set) {
      int j = n - 1;
      while (j >= 0 && a[j] != i) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = i;
      }
    }
    System.out.println(id);
 
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int max = 0;
    for (int i = 0; i < n; i++) {
      int count = 0;
      for (int j = 0; j < n; j++) {
        if (a[j] == a[i]) {
          count++;
        }
      }
      if (count > max) {
        max = count;
      }
    }
    int i = 0;
    while (i < n) {
      if (a[i] == a[i + 1]) {
        int count = 0;
        for (int j = 0; j < n; j++) {
          if (a[j] == a[i]) {
            count++;
          }
        }
        if (count < max) {
          int val = a[i];
          for (int j = 0; j < count; j++) {
            a[i + j] = val;
          }
          i += count;
        } else {
          i++;
        }
      } else {
        i++;
      }
    }
    int minIndex = 1000001;
    int id = -1;
    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      if (!list.contains(a[i])) {
        list.add(a[i]);
      }
    }
    for (int i = 0; i < list.size(); i++) {
      int j
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a.stream().map(a::count).collect(Collectors.toList()));
    int i = 0;
    while (true) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int maxCount = Collections.max(Collections.frequency(a));
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < maxCount) {
        int count = Collections.frequency(a, a.get(i));
        n -= count;
        int val = a.get(i);
        for (int k = 0; k < count; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> b = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < b.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != b.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = b.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(x -> x).max().getAsInt();
    int i = 0;
    while (true) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = a.stream().distinct().collect(Collectors.toList());
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a, Comparator.comparingInt(a::count));
        int i = 0;
        while (true) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int k = getMaxCount(a);
        int i = 0;
        while (i < n) {
            if (getCount(a, a[i]) < k) {
                int c = getCount(a, a[i]);
                n -= c;
                int val = a[i];
                for (int j = 0; j < c; j++) {
                    a = removeElement(a, val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int minI = 1000001;
        int id = -1;
        List<Integer> aList = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            aList.add(a[i]);
        }
        Set<Integer> unique = new HashSet<>(aList);
        for (int i : unique) {
            int j = n - 1;
            while (j >= 0 && a[j] != i) {
                j--;
            }
            if (j < minI) {
                minI = j;
                id = i;
            }
        }
        System.out.println(id);
    }

    private static int getMaxCount(int[] a) {
        int maxCount = 0;
        for (int i = 0; i < a.length; i++) {
            int count = getCount(a, a[i]);
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().map(x -> Collections.frequency(a, x)).max(Comparator.naturalOrder()).get();
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(Integer::intValue).max().getAsInt();
    int i = 0;
    while (true) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = a.stream().distinct().collect(Collectors.toList());
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int K = Collections.max(Arrays.stream(a).boxed().collect(Collectors.toList()));
    int i = 0;
    while (true) {
      if (Collections.frequency(Arrays.asList(a), a[i]) < K) {
        int C = Collections.frequency(Arrays.asList(a), a[i]);
        n -= C;
        int Val = a[i];
        for (int k = 0; k < C; k++) {
          a = Arrays.stream(a).filter(x -> x != Val).toArray();
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = a.stream().mapToInt(x -> x).max().getAsInt();
        int i = 0;
        while (i < n) {
            int count = a.stream().filter(x -> x == a.get(i)).count();
            if (count < K) {
                int C = count;
                int val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(val);
                }
            } else {
                i++;
            }
        }
        int minI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < minI) {
                minI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int K = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] > K) {
                K = a[i];
            }
        }
        int i = 0;
        while (i < n) {
            if (a[i] < K) {
                int C = 0;
                for (int j = 0; j < n; j++) {
                    if (a[j] == a[i]) {
                        C++;
                    }
                }
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    for (int j = 0; j < n; j++) {
                        if (a[j] == Val) {
                            a[j] = 0;
                        }
                    }
                }
            } else {
                i++;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        for (int i = 0; i < n; i++) {
            if (a[i] != 0) {
                int j = n - 1;
                while (j >= 0 && a[j] != a[i]) {
                    j--;
                }
                if (j < MinI) {
                    MinI = j;
                    ID = a[i];
                }
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = a.stream().mapToInt(x -> x).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    Set<Integer> A = new HashSet<>(a);
    for (int i : A) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = i;
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(a.stream().map(x -> Collections.frequency(a, x)).collect(Collectors.toList()));
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a.stream().map(a::count).collect(Collectors.toList()));
        int i = 0;
        while (i < n) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        Set<Integer> A = new HashSet<>(a);
        for (Integer a1 : A) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != a1) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = a1;
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a.stream().map(i -> a.stream().filter(j -> j == i).count()).collect(Collectors.toList()));
    int i = 0;
    while (i < n) {
      if (a.stream().filter(j -> j == a.get(i)).count() < k) {
        int c = a.stream().filter(j -> j == a.get(i)).count();
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
    }
    int minI = 1000001;
    int id = -1;
    Set<Integer> s = new HashSet<>(a);
    for (Integer i : s) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = i;
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a);
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < k) {
        int c = Collections.frequency(a, a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = findMax(a);
        int i = 0;
        while (true) {
            if (count(a, a[i]) < K) {
                int C = count(a, a[i]);
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    a = remove(a, Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = a[i];
        }
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != A[i]) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A[i];
            }
        }
        System.out.println(ID);
    }

    public static int findMax(int[] a) {
        int max = a[0];
        for (int i = 1; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        return max;
    }

    public static int count(int[] a, int val) {
        int count = 0;
        for (int
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int K = Arrays.stream(a).boxed().collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).values().stream().mapToInt(Integer::intValue).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (Arrays.stream(a).filter(x -> x == a[i]).count() < K) {
        int C = Arrays.stream(a).filter(x -> x == a[i]).count();
        n -= C;
        int Val = a[i];
        for (int k = 0; k < C; k++) {
          a[i] = 0;
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = a.length;
        int i = 0;
        while (i < n) {
            if (a.count(a[i]) < K) {
                int C = a.count(a[i]);
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = a[i];
        }
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && A[j] != i) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = i;
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = a.stream().mapToInt(x -> x).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (a.stream().filter(x -> x == a.get(i)).count() < K) {
        int C = a.stream().filter(x -> x == a.get(i)).count();
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    Set<Integer> A = new HashSet<>(a);
    for (Integer x : A) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != x) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = x;
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < k) {
        int c = a.count(a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(Collections.frequency(a));
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int K = findMaxCount(a);
        int i = 0;
        while (true) {
            if a.count(a[i]) < K) {
                int C = a.count(a[i]);
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        for (int i = 0; i < a.length; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != A[i]) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A[i];
            }
        }
        System.out.println(ID);
    }

    public static int findMaxCount(int[] a) {
        int maxCount = 0;
        for (int i = 0; i < a.length; i++) {
            int count = 0;
            for (int j = 0; j < a.length; j++) {
                if (a[i] == a[j]) {
                    count++;
                }
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        return maxCount;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a, new Comparator<Integer>() {
      @Override
      public int compare(Integer a1, Integer a2) {
        return a1.compareTo(a2);
      }
    });
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < k) {
        int c = Collections.frequency(a, a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
    }
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    int minI = 1000001;
    int id = -1;
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int maxCount = Collections.max(a.stream().map(a::count).collect(Collectors.toList()));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < maxCount) {
        int count = a.count(a.get(i));
        n -= count;
        int val = a.get(i);
        for (int k = 0; k < count; k++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    Set<Integer> set = new HashSet<>(a);
    int minIndex = 1000001;
    int id = -1;
    for (int i : set) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < minIndex) {
        minIndex = j;
        id = i;
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int K = findMax(a);
    int i = 0;
    while (true) {
      if (count(a, a[i]) < K) {
        int C = count(a, a[i]);
        n -= C;
        int val = a[i];
        for (int k = 0; k < C; k++) {
          remove(a, val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != A.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }

  private static int findMax(int[] a) {
    int max = 0;
    for (int i = 0; i < a.length; i++) {
      if (count(a, a[i]) > max) {
        max = count(a, a[i]);
      }
    }
    return max;
  }

  private static int count(int
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] > K) {
                K = a[i];
            }
        }
        int i = 0;
        while (i < n) {
            if (a[i] < K) {
                int C = a[i];
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != a[i]) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = a[i];
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = a.stream().mapToInt(Integer::intValue).max().getAsInt();
        int i = 0;
        while (true) {
            if (a.stream().filter(x -> x == a.get(i)).count() < K) {
                int C = a.stream().filter(x -> x == a.get(i)).count();
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = a.stream().distinct().collect(Collectors.toList());
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a);
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }
        int K = Collections.max(a, Comparator.comparingInt(a::count));
        int i = 0;
        while (true) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }
        int K = Collections.max(a, Comparator.comparingInt(a::count));
        int i = 0;
        while (true) {
            if (a.count(a.get(i)) < K) {
                int C = a.count(a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    Set<Integer> A = new HashSet<>(a);
    for (Integer x : A) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != x) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = x;
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (i < n) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }

    int k = Collections.max(a);
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < k) {
        int c = Collections.frequency(a, a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }

    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }

    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = getMaxCount(a);
        int i = 0;
        while (i < n) {
            if (getCount(a, a[i]) < K) {
                int C = getCount(a, a[i]);
                n -= C;
                int val = a[i];
                for (int k = 0; k < C; k++) {
                    a = remove(a, val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int minI = 1000001;
        int ID = -1;
        int[] A = getUnique(a);
        for (int i = 0; i < A.length; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != A[i]) {
                j--;
            }
            if (j < minI) {
                minI = j;
                ID = A[i];
            }
        }
        System.out.println(ID);
    }

    private static int getMaxCount(int[] a) {
        int max = 0;
        for (int i = 0; i < a.length; i++) {
            int count = getCount(a, a[i]);
            if (count > max) {
                max = count;
            }
        }
        return max;
    }

    private static int getCount(int[] a, int val) {
        int count = 0;
        for (int i = 0; i < a.length; i++)
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(sc.nextInt());
    }
    int K = Collections.max(Collections.frequency(a));
    int i = 0;
    while (true) {
      if (Collections.frequency(a, a.get(i)) < K) {
        int C = Collections.frequency(a, a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    List<Integer> A = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < A.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != A.get(i)) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = A.get(i);
      }
    }
    System.out.println(ID);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int k = Arrays.stream(a).max().getAsInt();
    int i = 0;
    while (i < n) {
      if (Arrays.stream(a).filter(x -> x == a[i]).count() < k) {
        int count = Arrays.stream(a).filter(x -> x == a[i]).count();
        n -= count;
        int val = a[i];
        for (int j = 0; j < count; j++) {
          a = Arrays.stream(a).filter(x -> x != val).toArray();
        }
      } else {
        i++;
      }
    }
    List<Integer> list = new ArrayList<>(Arrays.stream(a).boxed().collect(Collectors.toList()));
    int minI = 1000001;
    int id = -1;
    for (int i = 0; i < list.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a[j] != list.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = list.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int k = Collections.max(a);
    int i = 0;
    while (i < n) {
      if (Collections.frequency(a, a.get(i)) < k) {
        int c = Collections.frequency(a, a.get(i));
        n -= c;
        int val = a.get(i);
        for (int j = 0; j < c; j++) {
          a.remove(val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aSet = new ArrayList<>(new HashSet<>(a));
    for (int i = 0; i < aSet.size(); i++) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != aSet.get(i)) {
        j--;
      }
      if (j < minI) {
        minI = j;
        id = aSet.get(i);
      }
    }
    System.out.println(id);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      a.add(scanner.nextInt());
    }
    int K = Collections.max(a, Comparator.comparingInt(a::count));
    int i = 0;
    while (true) {
      if (a.count(a.get(i)) < K) {
        int C = a.count(a.get(i));
        n -= C;
        int Val = a.get(i);
        for (int k = 0; k < C; k++) {
          a.remove(Val);
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int MinI = 1000001;
    int ID = -1;
    Set<Integer> A = new HashSet<>(a);
    for (Integer i : A) {
      int j = n - 1;
      while (j >= 0 && a.get(j) != i) {
        j--;
      }
      if (j < MinI) {
        MinI = j;
        ID = i;
      }
    }
    System.out.println(ID);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int K = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] > K) {
                K = a[i];
            }
        }
        int i = 0;
        while (true) {
            if (a[i] < K) {
                int C = a[i];
                n -= C;
                int Val = a[i];
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }
        int MinI = 1000001;
        int ID = -1;
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && a[j] != i) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = i;
            }
        }
        System.out.println(ID);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] a = new int[n];
    for (int i = 0; i < n; i++) {
      a[i] = scanner.nextInt();
    }
    int K = 0;
    for (int i = 0; i < n; i++) {
      int count = 0;
      for (int j = 0; j < n; j++) {
        if (a[i] == a[j]) {
          count++;
        }
      }
      if (count > K) {
        K = count;
      }
    }
    int i = 0;
    while (true) {
      int count = 0;
      for (int j = 0; j < n; j++) {
        if (a[i] == a[j]) {
          count++;
        }
      }
      if (count < K) {
        int val = a[i];
        for (int j = 0; j < n; j++) {
          if (a[j] == val) {
            a[j] = 0;
          }
        }
      } else {
        i++;
      }
      if (i == n) {
        break;
      }
    }
    int minI = 1000001;
    int id = -1;
    List<Integer> aList = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      if (!aList.contains(a[i])) {
        aList.add(a[i]);
      }
    }
    for (int i = 0; i < aList.size(); i++) {
      int j = n - 1;
      while (j
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(scanner.nextInt());
        }

        int K = Collections.max(a);
        int i = 0;
        while (true) {
            if (Collections.frequency(a, a.get(i)) < K) {
                int C = Collections.frequency(a, a.get(i));
                n -= C;
                int Val = a.get(i);
                for (int k = 0; k < C; k++) {
                    a.remove(Val);
                }
            } else {
                i++;
            }
            if (i == n) {
                break;
            }
        }

        int MinI = 1000001;
        int ID = -1;
        List<Integer> A = new ArrayList<>(new HashSet<>(a));
        for (int i = 0; i < A.size(); i++) {
            int j = n - 1;
            while (j >= 0 && a.get(j) != A.get(i)) {
                j--;
            }
            if (j < MinI) {
                MinI = j;
                ID = A.get(i);
            }
        }

        System.out.println(ID);
    }
}
[/JAVA]
======
