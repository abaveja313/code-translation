  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];

    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }

    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }

    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;

    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;

      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }

      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int q = scanner.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = scanner.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = scanner.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = scanner.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -1000000000;
        t[0] = -1000000000;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = 1000000000;
        t[B + 1] = 1000000000;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = findIndex(s, x);
            int tind = findIndex(t, x);
            int res = 1000000000;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, d1);
                    res = Math.min(res, d2);
                }
            }
            System.out.println(res);
        }
    }

    public static int findIndex(int[] arr, int x) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == x) {
                return mid;
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        s[0] = -INF;
        t[0] = -INF;
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[A + 1] = INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 100000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[0] = -INF;
    s[A + 1] = INF;
    t[0] = -INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x) + 1;
      int tind = Arrays.binarySearch(t, x) + 1;
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000000000000;
    ArrayList<Integer> s = new ArrayList<Integer>();
    s.add(-INF);
    for (int i = 0; i < A; i++) {
      s.add(sc.nextInt());
    }
    s.add(INF);
    ArrayList<Integer> t = new ArrayList<Integer>();
    t.add(-INF);
    for (int i = 0; i < B; i++) {
      t.add(sc.nextInt());
    }
    t.add(INF);
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = binarySearch(s, x);
      int tind = binarySearch(t, x);
      int res = INF;
      for (int S : s.subList(sind - 1, sind + 1)) {
        for (int T : t.subList(tind - 1, tind + 1)) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }

  public static int binarySearch(ArrayList<Integer> arr, int x) {
    int low = 0;
    int high = arr.size() - 1;
    while (low <= high) {
      int mid = (low + high) / 2;
      if (arr.get(mid) == x) {
        return mid;
      } else if (arr.get(mid) < x) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return low;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 1000000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] { s[sind - 1], s[sind] }) {
                for (int T : new int[] { t[tind - 1], t[tind] }) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = (int) 1e18;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x) + 1;
            int tind = Arrays.binarySearch(t, x) + 1;
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = (int) 1e18;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int q = sc.nextInt();
        int INF = 100000000;
        int[] s = new int[A + 2];
        int[] t = new int[B + 2];
        for (int i = 1; i <= A; i++) {
            s[i] = sc.nextInt();
        }
        for (int i = 1; i <= B; i++) {
            t[i] = sc.nextInt();
        }
        s[0] = -INF;
        s[A + 1] = INF;
        t[0] = -INF;
        t[B + 1] = INF;
        for (int i = 0; i < q; i++) {
            int x = sc.nextInt();
            int sind = Arrays.binarySearch(s, x);
            int tind = Arrays.binarySearch(t, x);
            int res = INF;
            for (int S : new int[] {s[sind - 1], s[sind]}) {
                for (int T : new int[] {t[tind - 1], t[tind]}) {
                    int d1 = Math.abs(x - S) + Math.abs(S - T);
                    int d2 = Math.abs(x - T) + Math.abs(T - S);
                    res = Math.min(res, Math.min(d1, d2));
                }
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int INF = 1000000000;
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int A = sc.nextInt();
    int B = sc.nextInt();
    int q = sc.nextInt();
    int[] s = new int[A + 2];
    int[] t = new int[B + 2];
    int INF = (int) 1e18;
    s[0] = -INF;
    t[0] = -INF;
    for (int i = 1; i <= A; i++) {
      s[i] = sc.nextInt();
    }
    for (int i = 1; i <= B; i++) {
      t[i] = sc.nextInt();
    }
    s[A + 1] = INF;
    t[B + 1] = INF;
    for (int i = 0; i < q; i++) {
      int x = sc.nextInt();
      int sind = Arrays.binarySearch(s, x);
      int tind = Arrays.binarySearch(t, x);
      int res = INF;
      for (int S : new int[] {s[sind - 1], s[sind]}) {
        for (int T : new int[] {t[tind - 1], t[tind]}) {
          int d1 = Math.abs(x - S) + Math.abs(S - T);
          int d2 = Math.abs(x - T) + Math.abs(T - S);
          res = Math.min(res, Math.min(d1, d2));
        }
      }
      System.out.println(res);
    }
  }
}
[/JAVA]
======
