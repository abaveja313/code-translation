  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  private static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        int[][] L = new int[M][2];
        for (int i = 0; i < M; i++) {
            L[i][0] = sc.nextInt();
            L[i][1] = sc.nextInt();
        }
        int[] par = new int[N];
        int[] rank = new int[N];
        for (int i = 0; i < N; i++) {
            par[i] = i;
            rank[i] = 0;
        }
        for (int i = 0; i < M; i++) {
            unite(L[i][0] - 1, L[i][1] - 1, par, rank);
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (find(P[i] - 1, par) == find(i, par)) {
                ans++;
            }
        }
        System.out.println(ans);
    }
    
    private static int find(int x, int[] par) {
        if (par[x] == x) {
            return x;
        } else {
            return find(par[x], par);
        }
    }
    
    private static void unite(int x, int y, int[] par, int[] rank) {
        x = find(x, par);
        y = find(y, par);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
            } else {
                par[y] = x;
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  private static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  private static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  private static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    List<Integer> P = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      P.add(scanner.nextInt());
    }
    List<List<Integer>> L = new ArrayList<>();
    for (int i = 0; i < M; i++) {
      List<Integer> row = new ArrayList<>();
      row.add(scanner.nextInt());
      row.add(scanner.nextInt());
      L.add(row);
    }
    List<Integer> par = new ArrayList<>();
    List<Integer> rank = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      par.add(i);
      rank.add(0);
    }
    for (int i = 0; i < M; i++) {
      unite(L.get(i).get(0) - 1, L.get(i).get(1) - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P.get(i) - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, List<Integer> par) {
    if (par.get(x) == x) {
      return x;
    } else {
      return find(par.get(x), par);
    }
  }

  private static void unite(int x, int y, List<Integer> par, List<Integer> rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank.get(x) < rank.get(y)) {
        par.set(x, y);
      } else {
        par.set(y, x);
        if (rank.get(x) == rank.get(y)) {
          rank.set(x, rank.get(x) + 1);
        }
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        int[][] L = new int[M][2];
        for (int i = 0; i < M; i++) {
            L[i][0] = sc.nextInt();
            L[i][1] = sc.nextInt();
        }
        int[] par = new int[N];
        int[] rank = new int[N];
        for (int i = 0; i < N; i++) {
            par[i] = i;
            rank[i] = 0;
        }
        for (int i = 0; i < M; i++) {
            unite(L[i][0] - 1, L[i][1] - 1, par, rank);
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (find(P[i] - 1, par) == find(i, par)) {
                ans++;
            }
        }
        System.out.println(ans);
    }

    public static int find(int x, int[] par) {
        if (par[x] == x) {
            return x;
        } else {
            return find(par[x], par);
        }
    }

    public static void unite(int x, int y, int[] par, int[] rank) {
        x = find(x, par);
        y = find(y, par);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
            } else {
                par[y] = x;
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        int[][] L = new int[M][2];
        for (int i = 0; i < M; i++) {
            L[i][0] = sc.nextInt();
            L[i][1] = sc.nextInt();
        }
        int[] par = new int[N];
        int[] rank = new int[N];
        for (int i = 0; i < N; i++) {
            par[i] = i;
            rank[i] = 0;
        }
        for (int i = 0; i < M; i++) {
            unite(L[i][0] - 1, L[i][1] - 1, par, rank);
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (find(P[i] - 1, par) == find(i, par)) {
                ans++;
            }
        }
        System.out.println(ans);
    }

    private static int find(int x, int[] par) {
        if (par[x] == x) {
            return x;
        } else {
            return find(par[x], par);
        }
    }

    private static void unite(int x, int y, int[] par, int[] rank) {
        x = find(x, par);
        y = find(y, par);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
            } else {
                par[y] = x;
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  private static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  private static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] P = new int[N];
    for (int i = 0; i < N; i++) {
      P[i] = sc.nextInt();
    }
    int[][] L = new int[M][2];
    for (int i = 0; i < M; i++) {
      L[i][0] = sc.nextInt();
      L[i][1] = sc.nextInt();
    }
    int[] par = new int[N];
    int[] rank = new int[N];
    for (int i = 0; i < N; i++) {
      par[i] = i;
      rank[i] = 0;
    }
    for (int i = 0; i < M; i++) {
      unite(L[i][0] - 1, L[i][1] - 1, par, rank);
    }
    int ans = 0;
    for (int i = 0; i < N; i++) {
      if (find(P[i] - 1, par) == find(i, par)) {
        ans++;
      }
    }
    System.out.println(ans);
  }

  public static int find(int x, int[] par) {
    if (par[x] == x) {
      return x;
    } else {
      return find(par[x], par);
    }
  }

  public static void unite(int x, int y, int[] par, int[] rank) {
    x = find(x, par);
    y = find(y, par);
    if (x != y) {
      if (rank[x] < rank[y]) {
        par[x] = y;
      } else {
        par[y] = x;
        if (rank[x] == rank[y]) {
          rank[x]++;
        }
      }
    }
  }
}

[/JAVA]
======
