  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int x, int[] A, int K, int mask) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      if (a <= K) {
        dp |= (dp << a) & mask;
      }
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      dp |= (dp << a);
      dp &= mask;
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    Arrays.sort(A);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : IntStream.range(0, x).map(i -> A[i]).toArray()) {
      dp |= (dp << a);
      dp &= mask;
    }
    for (int a : IntStream.range(x + 1, N).map(i -> A[i]).toArray()) {
      dp |= (dp << a);
      dp &= mask;
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int N = Integer.parseInt(input[0]);
    int K = Integer.parseInt(input[1]);
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = Integer.parseInt(input[i + 2]);
    }
    A = Arrays.stream(A).map(x -> x <= K ? x : K + 1).toArray();
    Arrays.sort(A);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      dp |= (dp << a);
      dp &= mask;
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    Arrays.sort(A);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      dp |= (dp << a) & mask;
      dp >>= (K - A[x]);
    }
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int mask = (1 << K) - 1;
        int left = -1;
        int right = N;
        while (left + 1 < right) {
            int x = (left + right) / 2;
            if (test(x, A, mask)) {
                right = x;
            } else {
                left = x;
            }
        }
        int answer = left + 1;
        System.out.println(answer);
    }

    private static boolean test(int x, int[] A, int mask) {
        if (A[x] > K) {
            return true;
        }
        int dp = 1;
        for (int a : A) {
            dp |= (dp << a);
            dp &= mask;
        }
        dp >>= (K - A[x]);
        return (dp > 0);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      A.add(sc.nextInt());
    }
    A.sort(Comparator.naturalOrder());
    int mask = (1 << K) - 1;

    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A.get(x) > K) {
      return true;
    }
    int dp = 1;
    for (int a : A.subList(0, x)) {
      dp |= (dp << a) & mask;
    }
    for (int a : A.subList(x + 1, N)) {
      dp |= (dp << a) & mask;
    }
    dp >>= (K - A.get(x));
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }

        int mask = (1 << K) - 1;
        int left = -1;
        int right = N;
        while (left + 1 < right) {
            int x = (left + right) / 2;
            if (test(x, A, K, mask)) {
                right = x;
            } else {
                left = x;
            }
        }
        int answer = left + 1;
        System.out.println(answer);
    }

    public static boolean test(int x, int[] A, int K, int mask) {
        if (A[x] > K) {
            return true;
        }
        int dp = 1;
        for (int a : A) {
            if (a != A[x]) {
                dp |= (dp << a);
                dp &= mask;
            }
        }
        dp >>= (K - A[x]);
        return (dp > 0);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      if (a <= K) {
        dp |= (dp << a) & mask;
      }
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      A.add(sc.nextInt());
    }
    A.sort(Integer::compareTo);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x, List<Integer> A, int K, int mask) {
    if (A.get(x) > K) {
      return true;
    }
    int dp = 1;
    for (int a : A.subList(0, x)) {
      dp |= (dp << a) & mask;
    }
    for (int a : A.subList(x + 1, A.size())) {
      dp |= (dp << a) & mask;
    }
    dp >>= (K - A.get(x));
    return dp > 0;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] inputs = scanner.nextLine().split(" ");
    int N = Integer.parseInt(inputs[0]);
    int K = Integer.parseInt(inputs[1]);
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = Integer.parseInt(inputs[i + 2]);
    }

    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x, int[] A, int K, int mask) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      dp |= (dp << a) & mask;
      dp >>= (K - A[x]);
    }
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }

    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      if (A[i] > K) {
        list.add(i);
      }
    }

    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }

    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x, int[] A, int K, int mask) {
    if (A[x] > K) {
      return true;
    }

    int dp = 1;
    for (int i = 0; i < x; i++) {
      dp |= (dp << A[i]);
      dp &= mask;
    }

    for (int i = x + 1; i < A.length; i++) {
      dp |= (dp << A[i]);
      dp &= mask;
    }

    dp >>= (K - A[x]);
    return (dp > 0);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      A.add(scanner.nextInt());
    }
    A.replaceAll(x -> x > K ? K + 1 : x);
    A.sort(Integer::compare);
    int mask = (1 << K) - 1;

    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A.get(x) > K) {
      return true;
    }
    int dp = 1;
    for (int a : A.subList(0, x)) {
      dp |= (dp << a) & mask;
    }
    for (int a : A.subList(x + 1, N)) {
      dp |= (dp << a) & mask;
    }
    dp >>= K - A.get(x);
    return dp > 0;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    A = Arrays.stream(A).map(x -> x <= K ? x : K + 1).toArray();
    Arrays.sort(A);
    int mask = (1 << K) - 1;

    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : Arrays.stream(A).limit(x).toArray()) {
      dp |= (dp << a) & mask;
    }
    for (int a : Arrays.stream(A).skip(x + 1).toArray()) {
      dp |= (dp << a) & mask;
    }
    dp >>= (K - A[x]);
    return dp > 0;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    Arrays.sort(A);
    int mask = (1 << K) - 1;

    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x, int[] A, int K, int mask) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : IntStream.range(0, x).map(i -> A[i]).toArray()) {
      dp |= (dp << a) & mask;
      dp >>= K - A[x];
    }
    for (int a : IntStream.range(x + 1, A.length).map(i -> A[i]).toArray()) {
      dp |= (dp << a) & mask;
      dp >>= K - A[x];
    }
    return dp > 0;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    A = Arrays.stream(A).map(x -> x <= K ? x : K + 1).toArray();
    Arrays.sort(A);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(A, x, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int[] A, int x, int K, int mask) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      if (a != A[x]) {
        dp |= (dp << a);
        dp &= mask;
      }
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    Arrays.sort(A);
    int mask = (1 << K) - 1;

    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x, A, K, mask)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int x, int[] A, int K, int mask) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : IntStream.range(0, x).map(i -> A[i]).toArray()) {
      dp |= (dp << a) & mask;
    }
    for (int a : IntStream.range(x + 1, A.length).map(i -> A[i]).toArray()) {
      dp |= (dp << a) & mask;
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      dp |= (dp << a) & mask;
      dp >>= (K - A[x]);
    }
    return (dp > 0);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    Arrays.sort(A);
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  public static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : IntStream.concat(Arrays.stream(A, 0, x), Arrays.stream(A, x + 1, A.length)).boxed().collect(Collectors.toList())) {
      dp |= (dp << a) & mask;
      dp >>= (K - A[x]);
    }
    return (dp > 0);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int mask = (1 << K) - 1;
    int left = -1;
    int right = N;
    while (left + 1 < right) {
      int x = (left + right) / 2;
      if (test(x)) {
        right = x;
      } else {
        left = x;
      }
    }
    int answer = left + 1;
    System.out.println(answer);
  }

  private static boolean test(int x) {
    if (A[x] > K) {
      return true;
    }
    int dp = 1;
    for (int a : A) {
      if (a <= K) {
        dp |= (dp << a);
        dp &= mask;
      }
    }
    dp >>= (K - A[x]);
    return (dp > 0);
  }
}
[/JAVA]

This is the Java code that is functionally equivalent to the Python code. It uses the `Scanner` class to read input from the console, and the `Arrays` and `IntStream` classes to perform operations on arrays. The `test` method is implemented as a private method in the `Solution` class, and it is called from the `main` method to perform the binary search. The `mask` variable is used to mask off the bits that are beyond the `K`th bit, and the `dp` variable is used to store the result of the bitwise operations. The `left` and `right` variables are used to keep track of the bounds of the search, and the `answer` variable is used to store the final result.
======
