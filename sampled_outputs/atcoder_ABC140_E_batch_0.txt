  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = i;
        }
        Arrays.sort(p2, (a, b) -> b - a);
        int ans = 0;
        int[] s = new int[] {-1, -1, n, n};
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = scanner.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = p[i];
    }
    Arrays.sort(p2, (a, b) -> b - a);
    int ans = 0;
    int[] s = new int[] {-1, -1, n, n};
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[i] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = i;
    }
    Arrays.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return p[o2] - p[o1];
      }
    });
    long ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        ArrayList<Integer> p = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            p.add(sc.nextInt() - 1);
        }
        Collections.sort(p, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
        int ans = 0;
        ArrayList<Integer> s = new ArrayList<>();
        s.add(-1);
        s.add(-1);
        s.add(n);
        s.add(n);
        for (int i = 0; i < n; i++) {
            int idx = p.get(i);
            int t = Collections.binarySearch(s, idx);
            s.add(t, idx);
            int l1 = s.get(t - 1);
            int l2 = s.get(t - 2);
            int r1 = s.get(t + 1);
            int r2 = s.get(t + 2);
            ans += (p.get(i) + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt() - 1;
        }

        ArrayList<Integer> p2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            p2.add(i, p[i]);
        }
        Collections.sort(p2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });

        int ans = 0;
        int[] s = new int[] { -1, -1, n, n };
        for (int i = 0; i < n; i++) {
            int idx = p2.get(i);
            int t = Collections.binarySearch(s, idx);
            s = insert(s, t, idx);
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }

    private static int[] insert(int[] s, int t, int idx) {
        int[] newS = new int[s.length + 1];
        System.arraycopy(s, 0, newS, 0, t);
        newS[t] = idx;
        System.arraycopy(s, t, newS, t + 1, s.length - t);
        return newS;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = scanner.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = p[i];
    }
    Arrays.sort(p2, (a, b) -> b - a);
    int ans = 0;
    int[] s = new int[] {-1, -1, n, n};
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[i] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = scanner.nextInt() - 1;
    }
    List<Integer> p2 = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      p2.add(i);
    }
    Collections.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return p[o2] - p[o1];
      }
    });
    int[] s = new int[n + 2];
    Arrays.fill(s, -1);
    s[n] = n;
    s[n + 1] = n;
    int ans = 0;
    for (int i = 0; i < n; i++) {
      int idx = p2.get(i);
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = p[i];
        }
        Arrays.sort(p2);
        int ans = 0;
        int[] s = new int[] {-1, -1, n, n};
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = i;
        }
        Arrays.sort(p2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        int ans = 0;
        int[] s = new int[] { -1, -1, n, n };
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = p[i];
    }
    Arrays.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return o2.compareTo(o1);
      }
    });
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[i] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = i;
    }
    Arrays.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer a, Integer b) {
        return p[b] - p[a];
      }
    });
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int[] p2 = Arrays.stream(p).boxed().collect(Collectors.toList()).stream().sorted((x, y) -> y[1] - x[1]).mapToInt(i -> i[0]).toArray();
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < p2.length; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = i;
        }
        Arrays.sort(p2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return Integer.compare(p[o2], p[o1]);
            }
        });
        int ans = 0;
        int[] s = new int[] { -1, -1, n, n };
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = scanner.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = p[i];
    }
    Arrays.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return o2 - o1;
      }
    });
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[i] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = i;
    }
    Arrays.sort(p2, (a, b) -> Integer.compare(p[b], p[a]));
    int ans = 0;
    int[] s = new int[] {-1, -1, n, n};
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = scanner.nextInt() - 1;
    }
    int[] p2 = new int[n];
    for (int i = 0; i < n; i++) {
      p2[i] = i;
    }
    Arrays.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return o2.compareTo(o1);
      }
    });
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2[i];
      int t = Arrays.binarySearch(s, idx);
      s = Arrays.copyOf(s, s.length + 1);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = i;
        }
        Arrays.sort(p2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        int ans = 0;
        int[] s = new int[] { -1, -1, n, n };
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt() - 1;
        }
        int[] p2 = new int[n];
        for (int i = 0; i < n; i++) {
            p2[i] = i;
        }
        Arrays.sort(p2, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
        int[] s = new int[n + 2];
        s[0] = -1;
        s[1] = -1;
        s[n + 1] = n;
        s[n + 2] = n;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int idx = p2[i];
            int t = Arrays.binarySearch(s, idx);
            s = Arrays.copyOf(s, s.length + 1);
            s[t] = idx;
            int l1 = s[t - 1];
            int l2 = s[t - 2];
            int r1 = s[t + 1];
            int r2 = s[t + 2];
            ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    ArrayList<Integer> p2 = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      p2.add(i);
    }
    Collections.sort(p2, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return p[o2] - p[o1];
      }
    });
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2.get(i);
      int t = bisectLeft(s, idx);
      s[t] = idx;
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[idx] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }

  public static int bisectLeft(int[] s, int idx) {
    int lo = 0;
    int hi = s.length - 1;
    while (lo < hi) {
      int mid = (lo + hi) / 2;
      if (s[mid] < idx) {
        lo = mid + 1;
      } else {
        hi = mid;
      }
    }
    return lo;
  }
}

[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the same logic and data structures, with the exception of the `bisectLeft` method, which is implemented in Java using a binary search.

The `bisectLeft` method takes an array of integers `s` and an index `idx` as input, and returns the index of the first element in `s` that is less than or equal to `idx`. This method is used to find the insertion point for the current index `idx` in the sorted array `s`.

The rest of the code is similar to the Python code, with the exception of the `main` method, which is the entry point of the program in Java. The `main` method takes an array of strings `args` as input, and uses a `Scanner` object to read the input from the console. The rest of the code is the same as the Python code, with the exception of the `bisectLeft` method, which is implemented in Java using a binary search.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] p = new int[n];
    for (int i = 0; i < n; i++) {
      p[i] = sc.nextInt() - 1;
    }
    List<Integer> p2 = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      p2.add(i, p[i]);
    }
    Collections.sort(p2, (a, b) -> b - a);
    int ans = 0;
    int[] s = new int[] { -1, -1, n, n };
    for (int i = 0; i < n; i++) {
      int idx = p2.get(i);
      int t = Collections.binarySearch(s, idx);
      s.add(t, idx);
      int l1 = s[t - 1];
      int l2 = s[t - 2];
      int r1 = s[t + 1];
      int r2 = s[t + 2];
      ans += (p[i] + 1) * ((idx - l1) * (r2 - r1) + (r1 - idx) * (l1 - l2));
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
