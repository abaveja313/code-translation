  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int[] arr = new int[input.length];
    for (int i = 0; i < input.length; i++) {
      arr[i] = Integer.parseInt(input[i]);
    }
    Set<Integer> set = new HashSet<>();
    for (int i : arr) {
      set.add(i);
    }
    int counter = 0;
    for (int i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This Java code is functionally identical to the Python code. It first reads the input as a string, splits it by spaces, and converts each element to an integer. It then creates a set to store the unique elements of the array, and iterates through the set to calculate the number of pairs of elements that are not unique. Finally, it prints the result.

Note that the `HashSet` class is used to store the unique elements of the array, and the `Set` interface is used to iterate through the set. The `Integer.parseInt()` method is used to convert the input string to an integer, and the `String.split()` method is used to split the input string by spaces.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int[] arr = new int[input.length];
    for (int i = 0; i < input.length; i++) {
      arr[i] = Integer.parseInt(input[i]);
    }
    Set<Integer> set = new HashSet<>();
    for (int i : arr) {
      set.add(i);
    }
    int counter = 0;
    for (int i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This is the Java code that achieves the same functionality as the Python code. The code first takes input from the user and splits it into an array of integers. It then creates a set of unique integers from the array using a HashSet. The set is used to count the number of unique integers in the array. Finally, the code prints the number of unique integers in the array.

Note that the code uses the `Scanner` class to read input from the user, and the `HashSet` class to create a set of unique integers. The `Integer.parseInt()` method is used to convert the input strings to integers.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Set<Integer> set = new HashSet<>();
        for (int i : arr) {
            set.add(i);
        }
        int counter = 0;
        for (int i : set) {
            counter += arr.length - set.size();
        }
        System.out.println(counter);
    }
}
[/JAVA]

Explanation:

1. We first read the input from the user using the `Scanner` class.
2. We then split the input string into an array of strings using the `split` method.
3. We then convert each string in the array to an integer using the `Integer.parseInt` method.
4. We create a `Set` data structure to store the unique elements of the array.
5. We iterate over the array and add each element to the `Set`.
6. We then iterate over the `Set` and for each element, we calculate the number of occurrences of that element in the array using the `count` method.
7. We then subtract the number of occurrences from the total number of elements in the array to get the number of pairs.
8. We print the final result.

Note: The `HashSet` class is used to create a hash-based `Set` data structure, which is more efficient than the `TreeSet` class for large sets.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int[] arr = new int[input.length];
    for (int i = 0; i < input.length; i++) {
      arr[i] = Integer.parseInt(input[i]);
    }
    Set<Integer> set = new TreeSet<>();
    for (int i : arr) {
      set.add(i);
    }
    int counter = 0;
    for (int i : set) {
      counter += arr.length - set.tailSet(i).size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This code first takes input from the user and splits it into an array of strings using the `split` method. Then, it converts each string to an integer using the `parseInt` method and stores it in an integer array.

Next, it creates a `Set` object to store the unique elements of the array. It uses the `add` method to add each element of the array to the set.

The `TreeSet` class is used because it maintains the elements in sorted order, which makes it easy to find the number of elements that are greater than or equal to a given element.

The `tailSet` method is used to find the number of elements that are greater than or equal to a given element. It returns a view of the elements in the set that are greater than or equal to the given element. The `size` method is then used to find the number of elements in this view.

The `counter` variable is used to keep track of the total number of elements that are greater than or equal to a given element. It is initialized to 0 and is incremented by the number of elements in the view returned by the `tailSet` method for each element in the set.

Finally, the `System.out.println` method is used to print the value of the `counter` variable, which is the total number of elements that are greater than or equal to a given element.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    String[] arr = input.split(" ");
    Set<Integer> set = new HashSet<>();
    for (String x : arr) {
      set.add(Integer.parseInt(x));
    }
    int counter = 0;
    for (Integer i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The `input()` function in Python is replaced by `Scanner` in Java, which allows us to read a line of input from the console. The `split()` method in Python is replaced by `split()` in Java, which splits the input string into an array of strings based on a separator. The `int()` function in Python is replaced by `Integer.parseInt()` in Java, which converts a string to an integer. The `set()` function in Python is replaced by `Set` in Java, which creates a set of unique elements. The `count()` method in Python is replaced by `size()` in Java, which returns the number of elements in a set. The `print()` function in Python is replaced by `System.out.println()` in Java, which prints a line of output to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    String[] arr = input.split(" ");
    Set<Integer> set = new HashSet<>();
    for (String x : arr) {
      set.add(Integer.parseInt(x));
    }
    int counter = 0;
    for (Integer i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This code first reads the input from the user and splits it into an array of strings using the `split` method. It then converts each string to an integer using the `Integer.parseInt` method and adds it to a set using the `add` method.

The `set` data structure is used to store the unique elements of the array, and the `HashSet` class is used to implement the set. The `HashSet` class is a hash-based implementation of the `Set` interface, which means that it uses a hash table to store the elements and provides constant-time performance for the basic operations (add, remove, contains, and size).

The code then iterates over the set using a for-each loop and for each element `i`, it calculates the number of occurrences of `i` in the array using the `count` method of the `Set` interface. The number of occurrences is then subtracted from the length of the array to get the number of pairs of elements that are not unique.

Finally, the code prints the number of pairs of elements that are not unique to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    String[] arr = input.split(" ");
    int counter = 0;
    Set<Integer> set = new HashSet<>();
    for (String x : arr) {
      set.add(Integer.parseInt(x));
    }
    for (Integer i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This code uses the same logic as the Python code, but it is written in Java. It uses the `Scanner` class to read input from the user, the `String.split()` method to split the input into an array of strings, and the `Integer.parseInt()` method to convert each string to an integer. It then uses a `Set` to store the unique elements of the array, and a `for` loop to iterate over the set and increment the counter by the number of elements in the set minus the number of unique elements. Finally, it prints the counter to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] arr = input.split(" ");
        int[] intArr = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            intArr[i] = Integer.parseInt(arr[i]);
        }
        Set<Integer> set = new HashSet<>(Arrays.asList(intArr));
        int counter = 0;
        for (int i : set) {
            counter += intArr.length - set.size();
        }
        System.out.println(counter);
    }
}
[/JAVA]

Explanation:

1. The `import` statements are used to import the necessary classes for the program.
2. The `Scanner` class is used to read input from the user.
3. The `String` class is used to store the input string.
4. The `String[]` array is used to store the individual numbers in the input string.
5. The `int[]` array is used to store the individual numbers in the input string as integers.
6. The `Set` interface is used to store the unique numbers in the input string.
7. The `HashSet` class is used to implement the `Set` interface.
8. The `Arrays` class is used to convert the `int[]` array to a `Set` of integers.
9. The `for` loop is used to iterate over the unique numbers in the input string.
10. The `counter` variable is used to keep track of the number of pairs of unique numbers in the input string.
11. The `System.out.println()` method is used to print the final result.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    String[] arr = input.split(" ");
    Set<Integer> set = new HashSet<>();
    for (String x : arr) {
      set.add(Integer.parseInt(x));
    }
    int counter = 0;
    for (Integer i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This code uses the `Scanner` class to read the input, and the `String.split()` method to split the input into an array of strings. It then uses the `Set` interface and its implementation `HashSet` to store the unique elements of the array. The `Set.add()` method is used to add elements to the set, and the `Set.size()` method is used to get the size of the set.

The `for` loop iterates over the set and for each element `i`, it calculates the number of occurrences of `i` in the array using the `Arrays.asList(arr).contains(i)` method. The `Arrays.asList(arr).contains(i)` method returns `true` if `i` is in the array, and `false` otherwise. The `Arrays.asList(arr).contains(i)` method is used to check if `i` is in the array.

The `counter` variable is incremented by the number of occurrences of `i` in the array, and the final value of `counter` is printed to the console.

Note that this code assumes that the input is a string of space-separated integers. If the input is a string of comma-separated integers, you will need to modify the `String.split()` method accordingly.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] arr = scanner.nextLine().split(" ");
    Set<Integer> set = new HashSet<>();
    int counter = 0;
    for (String s : arr) {
      set.add(Integer.parseInt(s));
    }
    for (Integer i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

Explanation:

1. We first read the input array from the user using `Scanner`.
2. We then create a `Set` to store the unique elements of the array.
3. We iterate over the array and add each element to the `Set`.
4. We then iterate over the `Set` and for each element `i`, we calculate the number of occurrences of `i` in the array using `arr.length - set.size()`.
5. We then add the number of occurrences to the `counter` variable.
6. Finally, we print the `counter` variable as the output.

Note: The `HashSet` class is used to store the unique elements of the array. The `HashSet` class is a type of `Set` that uses a hash table to store the elements. The `HashSet` class provides constant-time performance for the basic operations (add, remove, contains, and size).
======
  [JAVA]
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] arr = scanner.nextLine().split(" ");
        Set<Integer> set = new HashSet<>();
        int counter = 0;

        for (int i = 0; i < arr.length; i++) {
            set.add(Integer.parseInt(arr[i]));
        }

        for (int i : set) {
            counter += arr.length - set.size();
        }

        System.out.println(counter);
    }
}
[/JAVA]

This code uses the `Scanner` class to read input from the console, and the `HashSet` class to store the unique elements of the array. The `Set` interface is used to ensure that the set only contains unique elements.

The code first splits the input string into an array of strings using the `split` method. Then, it uses a `for` loop to iterate over the array and add each element to the set using the `add` method.

After the set is created, the code uses a nested `for` loop to iterate over the set and count the number of elements that are not in the set. This is done by subtracting the size of the set from the length of the array.

Finally, the code prints the result to the console using the `System.out.println` method.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Set<Integer> set = new TreeSet<>();
        for (int i : arr) {
            set.add(i);
        }
        int counter = 0;
        for (int i : set) {
            counter += arr.length - set.tailSet(i).size();
        }
        System.out.println(counter);
    }
}
[/JAVA]

This is a Java implementation of the Python code. It uses the `Scanner` class to read input from the console, and the `String.split()` method to split the input string into an array of strings. The `Integer.parseInt()` method is used to convert each string to an integer.

The code then uses a `Set` data structure to store the unique elements of the array, and a `TreeSet` to store the elements in sorted order. The `Set.tailSet()` method is used to get the set of elements that are greater than or equal to a given element, and the `Set.size()` method is used to get the size of the set.

The `counter` variable is initialized to 0, and for each element in the set, the code calculates the number of elements in the array that are greater than or equal to the current element, and adds it to the `counter` variable.

Finally, the `System.out.println()` method is used to print the value of the `counter` variable.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Set<Integer> set = new HashSet<>();
        for (int i : arr) {
            set.add(i);
        }
        int counter = 0;
        for (int i : set) {
            counter += arr.length - set.size();
        }
        System.out.println(counter);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Set<Integer> set = new HashSet<>(Arrays.asList(arr));
        int counter = 0;
        for (int i : set) {
            counter += arr.length - set.size();
        }
        System.out.println(counter);
    }
}
[/JAVA]

This Java code is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and then uses the `split` method to split the input string into an array of strings. The `parseInt` method is used to convert each string to an integer. The `Set` class is used to store the unique elements of the array, and the `HashSet` class is used to implement the set. The `count` method is used to count the number of times each element appears in the array, and the `size` method is used to get the size of the set. Finally, the `println` method is used to print the result.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int[] arr = new int[input.length];
    for (int i = 0; i < input.length; i++) {
      arr[i] = Integer.parseInt(input[i]);
    }
    Set<Integer> set = new HashSet<>();
    for (int i : arr) {
      set.add(i);
    }
    int counter = 0;
    for (int i : set) {
      counter += arr.length - set.size();
    }
    System.out.println(counter);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Set<Integer> set = new HashSet<>();
        for (int i : arr) {
            set.add(i);
        }
        int counter = 0;
        for (int i : set) {
            counter += arr.length - set.size();
        }
        System.out.println(counter);
    }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The `Scanner` class is used to read the input, and the `split()` method is used to split the input into an array of strings. The `parseInt()` method is used to convert each string to an integer. The `Set` and `HashSet` classes are used to create a set of unique integers from the array. The `for` loop is used to iterate over the set and count the number of elements that appear more than once in the array. Finally, the `println()` method is used to print the result.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] arr = scanner.nextLine().split(" ");
    int counter = 0;
    Set<Integer> set = new TreeSet<>();
    for (String s : arr) {
      set.add(Integer.parseInt(s));
    }
    for (Integer i : set) {
      counter += arr.length - set.tailSet(i).size();
    }
    System.out.println(counter);
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. The `TreeSet` class is used to store the unique elements of the array, and the `tailSet` method is used to get the tail of the set starting from a given element. The `size` method is used to get the size of the tail set, and the `length` method is used to get the length of the original array. The `counter` variable is used to keep track of the number of elements that are greater than or equal to the current element in the set.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        List<Integer> arr = new ArrayList<>();
        for (String s : input) {
            arr.add(Integer.parseInt(s));
        }
        Set<Integer> uniqueValues = new HashSet<>(arr);
        int counter = 0;
        for (Integer i : uniqueValues) {
            counter += arr.stream().filter(x -> x.equals(i)).count() - 1;
        }
        System.out.println(counter);
    }
}
[/JAVA]

Explanation:

1. We first read the input from the user using `Scanner` and split it into an array of strings using the `split()` method.
2. We then convert each string in the array to an integer using `Integer.parseInt()` and add it to a `List<Integer>`.
3. We create a `Set<Integer>` from the `List<Integer>` using the `HashSet<Integer>()` constructor, which removes duplicates.
4. We iterate over the `Set<Integer>` using a `for-each` loop and for each integer `i`, we count the number of occurrences of `i` in the `List<Integer>` using the `stream().filter(x -> x.equals(i)).count()` method.
5. We subtract 1 from the count to avoid counting the current integer itself.
6. We add the count to the `counter` variable.
7. Finally, we print the `counter` variable.

Note: The `stream()` method is used to convert the `List<Integer>` to a stream of integers, which allows us to use the `filter()` method to filter out all integers that are not equal to `i`. The `count()` method is then used to count the number of integers in the stream.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int counter = 0;
        for (int i : arr) {
            counter += arr.length - 1 - arr.indexOf(i);
        }
        System.out.println(counter);
    }
}
[/JAVA]

Explanation:

1. The first line imports the `Scanner` class from the `java.util` package, which is used to read input from the user.
2. The `Solution` class is defined, which contains the `main` method that will be executed when the program is run.
3. Inside the `main` method, a `Scanner` object is created to read input from the user.
4. The user input is read using the `nextLine()` method and split into an array of strings using the `split()` method.
5. The array of strings is converted to an array of integers using a for-each loop and the `Integer.parseInt()` method.
6. The `counter` variable is initialized to 0.
7. A for-each loop is used to iterate over the array of integers. For each integer `i`, the `counter` variable is incremented by the number of elements in the array minus 1 minus the index of `i` in the array.
8. The final value of the `counter` variable is printed to the console using the `System.out.println()` method.

Note: The `indexOf()` method is used to find the index of an element in an array. If the element is not found, it returns -1.
======
  [JAVA]
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    String[] arr = input.split(" ");

    Set<Integer> set = new HashSet<>();
    for (String s : arr) {
      set.add(Integer.parseInt(s));
    }

    int counter = 0;
    for (Integer i : set) {
      counter += arr.length - set.size();
    }

    System.out.println(counter);
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. We first read the input from the user using a `Scanner` object, and then split the input string into an array of strings using the `split` method.

Next, we create a `Set` object to store the unique elements of the array, and add each element of the array to the set using the `add` method.

We then iterate over the set and for each element `i`, we calculate the number of occurrences of `i` in the array using the `count` method, and subtract the number of unique elements in the set from the total number of elements in the array. This gives us the number of pairs of elements that are not unique in the array.

Finally, we print the total number of pairs of elements that are not unique in the array.
======
