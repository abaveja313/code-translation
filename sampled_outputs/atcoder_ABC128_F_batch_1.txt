  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[0];
    int[] upperDivisors = new int[0];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors = Arrays.copyOf(lowerDivisors, lowerDivisors.length + 1);
        lowerDivisors[lowerDivisors.length - 1] = i;
        if (i != n / i) {
          upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }

======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }

        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[] DD = new int[N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }

        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivisors + upperDivis
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  private static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
      }
      i
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) upperDivisors[n / i] = n / i;
      }
      i++;
    }
    return lowerDivisors + upperDivisors;
  }

======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = 1;
                if (i != n / i) {
                    upperDivisors[n / i] = 1;
                }
            }
            i++;
        }
        return lowerDivisors + upperDiv
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = 1;
        if (i != n / i) {
          upperDivisors[n / i] = 1;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivisors
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = scanner.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) {
                start += i;
            }
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) {
                    break;
                }
                if (n % m == 0 && end >= n) {
                    continue;
                }
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;

======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = scanner.nextInt();
        }
        int[][] D = new int[N][2];
        for (int i = 1; i < N; i++) {
            int[] DD = new int[2];
            int[] T = new int[N];
            T[0] = 0;
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            T[0] = 0;
            int start = (N - 1) % i;
            if (start == 0) {
                start += i;
            }
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) {
                    break;
                }
                if (n % m == 0 && end >= n) {
                    continue;
                }
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
         
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    private static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivisors + upperDiv
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = scanner.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivisors
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      T[0] = 0;
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      T[0] = 0;
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }

======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = scanner.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upper
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][N];
    for (int i = 1; i < N; i++) {
      int[][] DD = new int[2][N];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) {
        start += i;
      }
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) {
          break;
        }
        if (n % m == 0 && end >= n) {
          continue;
        }
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] s = new int[N];
    for (int i = 0; i < N; i++) {
      s[i] = sc.nextInt();
    }
    int[][] D = new int[N][2];
    for (int i = 1; i < N; i++) {
      int[] DD = new int[2];
      int[] T = new int[N];
      for (int j = i; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[0] = T;
      T = new int[N];
      int start = (N - 1) % i;
      if (start == 0) start += i;
      for (int j = start; j < N; j += i) {
        T[j] = T[j - 1] + s[j];
      }
      DD[1] = T;
      D[i] = DD;
    }
    int ans = s[N - 1];
    int cnt = 0;
    for (int n = 2; n < N - 1; n++) {
      int end = N - 1 - n;
      for (int m : makeDivisors(end)) {
        if (n <= m) break;
        if (n % m == 0 && end >= n) continue;
        int k = end / m;
        int a = D[m][0][k];
        int l = D[m][1].length;
        int b = D[m][1][l - 1] - D[m][1][l - k - 2];
        ans = Math.max(ans, a + b);
      }
    }
    System.out.println(ans);
  }

  public static int[] makeDivisors(int n) {
    int[] lowerDivisors = new int[n];
    int[] upperDivisors = new int[n];
    int i = 1;
    while (i * i <= n) {
      if (n % i == 0) {
        lowerDivisors[i] = i;
        if (i != n / i) {
          upperDivisors[n / i] = n / i;
        }
      }
      i++;
    }
    return lowerDivisors + upperDivisors;

======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] s = new int[N];
        for (int i = 0; i < N; i++) {
            s[i] = sc.nextInt();
        }
        int[][] D = new int[N][N];
        for (int i = 1; i < N; i++) {
            int[][] DD = new int[2][N];
            int[] T = new int[N];
            for (int j = i; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[0] = T;
            T = new int[N];
            int start = (N - 1) % i;
            if (start == 0) start += i;
            for (int j = start; j < N; j += i) {
                T[j] = T[j - 1] + s[j];
            }
            DD[1] = T;
            D[i] = DD;
        }
        int ans = s[N - 1];
        int cnt = 0;
        for (int n = 2; n < N - 1; n++) {
            int end = N - 1 - n;
            for (int m : makeDivisors(end)) {
                if (n <= m) break;
                if (n % m == 0 && end >= n) continue;
                int k = end / m;
                int a = D[m][0][k];
                int l = D[m][1].length;
                int b = D[m][1][l - 1] - D[m][1][l - k - 2];
                ans = Math.max(ans, a + b);
            }
        }
        System.out.println(ans);
    }

    public static int[] makeDivisors(int n) {
        int[] lowerDivisors = new int[n];
        int[] upperDivisors = new int[n];
        int i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                lowerDivisors[i] = i;
                if (i != n / i) {
                    upperDivisors[n / i] = n / i;
                }
            }
            i++;
        }
        return lowerDivisors;
   
======
