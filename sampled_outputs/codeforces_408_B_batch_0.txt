  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        line = sc.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        for (char c : madeCount.keySet()) {
            if (!boughtCount.containsKey(c)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(c), madeCount.get(c));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. The code uses the same data structures and algorithms as the Python code, but with Java-specific syntax and libraries.

The `Scanner` class is used to read input from the console, and the `HashMap` class is used to store the counts of the colors in the input strings. The `Math.min` method is used to find the minimum of two integers, and the `System.out.println` method is used to print the result.

The `main` method is the entry point of the program, and it reads the number of test cases `t` from the console, and then calls the `solution` method `t` times. The `solution` method reads two lines of input, and then uses the `HashMap` class to store the counts of the colors in the input strings. It then calculates the minimum number of colors needed to make the target string, and prints the result.

Note that the Java code uses the `import` statement to import the necessary libraries, and the `public` and `static` keywords to make the `main` method and the `solution` method accessible from outside the class.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    private static void solution() {
        String line = scanner.nextLine();
        Map<String, Integer> boughtCount = new HashMap<>();
        for (String color : line.split(" ")) {
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }

        line = scanner.nextLine();
        Map<String, Integer> madeCount = new HashMap<>();
        for (String color : line.split(" ")) {
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }

        int res = 0;
        for (String color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            String line = scanner.nextLine();
            Map<Character, Integer> boughtCount = new HashMap<>();
            for (char c : line.toCharArray()) {
                boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
            }
            line = scanner.nextLine();
            Map<Character, Integer> madeCount = new HashMap<>();
            for (char c : line.toCharArray()) {
                madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
            }
            int res = 0;
            for (char color : madeCount.keySet()) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(color), madeCount.get(color));
            }
            System.out.println(res);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        Map<String, Integer> boughtCount = new HashMap<>();
        for (String color : line.split(" ")) {
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<String, Integer> madeCount = new HashMap<>();
        for (String color : line.split(" ")) {
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (String color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the same data structures and algorithms to solve the problem. The only difference is that in Java, we use `HashMap` instead of `Counter` to keep track of the number of times each color is bought and made.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            boughtCount.put(line.charAt(i), boughtCount.getOrDefault(line.charAt(i), 0) + 1);
        }
        line = sc.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            madeCount.put(line.charAt(i), madeCount.getOrDefault(line.charAt(i), 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. I have used the `Scanner` class to read input from the user, and the `HashMap` class to store the counts of each color. I have also used the `Math.min` method to find the minimum of two integers.

Note that I have added a `main` method to the `Solution` class, which reads the number of test cases from the user and calls the `solution` method that many times. This is not necessary in Python, since the `solution` function is called automatically when the script is executed.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    for (int i = 0; i < t; i++) {
      solution();
    }
  }

  public static void solution() {
    Scanner scanner = new Scanner(System.in);
    String line = scanner.nextLine();
    Map<String, Integer> boughtCount = new HashMap<>();
    for (String color : line.split(" ")) {
      boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
    }
    line = scanner.nextLine();
    Map<String, Integer> madeCount = new HashMap<>();
    for (String color : line.split(" ")) {
      madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
    }
    int res = 0;
    for (String color : madeCount.keySet()) {
      if (!boughtCount.containsKey(color)) {
        System.out.println(-1);
        return;
      }
      res += Math.min(boughtCount.get(color), madeCount.get(color));
    }
    System.out.println(res);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    for (int i = 0; i < t; i++) {
      solution();
    }
  }

  public static void solution() {
    Scanner scanner = new Scanner(System.in);
    String line = scanner.nextLine();
    Map<String, Integer> boughtCount = new HashMap<>();
    for (String color : line.split(" ")) {
      boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
    }

    line = scanner.nextLine();
    Map<String, Integer> madeCount = new HashMap<>();
    for (String color : line.split(" ")) {
      madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
    }

    int res = 0;
    for (String color : madeCount.keySet()) {
      if (!boughtCount.containsKey(color)) {
        System.out.println(-1);
        return;
      }
      res += Math.min(boughtCount.get(color), madeCount.get(color));
    }
    System.out.println(res);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Queue;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            String line = scanner.nextLine();
            Map<String, Integer> boughtCount = new HashMap<>();
            for (String color : line.split(" ")) {
                boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
            }
            line = scanner.nextLine();
            Map<String, Integer> madeCount = new HashMap<>();
            for (String color : line.split(" ")) {
                madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
            }
            int res = 0;
            for (String color : madeCount.keySet()) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(color), madeCount.get(color));
            }
            System.out.println(res);
        }
    }
}
[/JAVA]

This is the Java code that implements the same logic as the Python code. It uses the `Scanner` class to read input from the console, and the `HashMap` class to store the counts of the colors. The `main` method reads the input, and the `solution` method calculates the result and prints it to the console.

Note that the `solution` method uses the `Math.min` method to calculate the minimum of two numbers, and the `System.out.println` method to print the result to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    private static void solution() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.PriorityQueue;
import java.util.function.Function;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            String line = scanner.nextLine();
            Map<String, Integer> boughtCount = new HashMap<>();
            for (String color : line.split(" ")) {
                boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
            }
            line = scanner.nextLine();
            Map<String, Integer> madeCount = new HashMap<>();
            for (String color : line.split(" ")) {
                madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
            }
            int res = 0;
            for (String color : madeCount.keySet()) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(color), madeCount.get(color));
            }
            System.out.println(res);
        }
    }
}
[/JAVA]

This is the Java code equivalent to the given Python code. I have used the same data structures and methods as in the Python code, but I have used Java's built-in data structures and methods instead of the third-party libraries used in the Python code.

I have also used the `Scanner` class to read input from the user, and the `Math` class to perform mathematical operations.

The `main` method is the entry point of the program, and it reads the input from the user and calls the `solution` method for each test case. The `solution` method first reads the input and stores it in a `Map` data structure, and then it calculates the result and prints it to the console.

I hope this helps! Let me know if you have any questions.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String line = sc.nextLine();
            Map<Character, Integer> boughtCount = new HashMap<>();
            for (int j = 0; j < line.length(); j++) {
                char c = line.charAt(j);
                if (boughtCount.containsKey(c)) {
                    boughtCount.put(c, boughtCount.get(c) + 1);
                } else {
                    boughtCount.put(c, 1);
                }
            }

            line = sc.nextLine();
            Map<Character, Integer> madeCount = new HashMap<>();
            for (int j = 0; j < line.length(); j++) {
                char c = line.charAt(j);
                if (madeCount.containsKey(c)) {
                    madeCount.put(c, madeCount.get(c) + 1);
                } else {
                    madeCount.put(c, 1);
                }
            }

            int res = 0;
            for (char c : madeCount.keySet()) {
                if (!boughtCount.containsKey(c)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(c), madeCount.get(c));
            }
            System.out.println(res);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    for (int i = 0; i < t; i++) {
      solution();
    }
  }

  public static void solution() {
    Scanner sc = new Scanner(System.in);
    String line = sc.nextLine();
    Map<Character, Integer> boughtCount = new HashMap<>();
    for (int i = 0; i < line.length(); i++) {
      char c = line.charAt(i);
      boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
    }

    line = sc.nextLine();
    Map<Character, Integer> madeCount = new HashMap<>();
    for (int i = 0; i < line.length(); i++) {
      char c = line.charAt(i);
      madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
    }

    int res = 0;
    for (char c : madeCount.keySet()) {
      if (!boughtCount.containsKey(c)) {
        System.out.println(-1);
        return;
      }
      res += Math.min(boughtCount.get(c), madeCount.get(c));
    }
    System.out.println(res);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char color = line.charAt(i);
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `import` statements at the beginning of the code import the necessary libraries for the code to run. The `main` method is the entry point of the program, and it takes an array of strings as input. The `solution` method is the method that contains the actual logic of the code, and it takes no input.

The `solution` method first reads in two lines of input using the `Scanner` class. The first line is read into a `String` variable called `line`, and the second line is read into a `Map` called `boughtCount`. The `Map` is created using the `HashMap` class, and it maps each character in the line to the number of times that character appears in the line.

Next, the `solution` method reads in another line of input and stores it in a `Map` called `madeCount`. The `madeCount` map is also created using the `HashMap` class, and it maps each character in the line to the number of times that character appears in the line.

The `solution` method then iterates over the keys in the `madeCount` map, and for each key, it checks if the corresponding value is less than or equal to the value in the `boughtCount` map. If the value in the `madeCount` map is less than or equal to the value in the `boughtCount` map, the method adds the value in the `madeCount` map to the `res` variable. If the value in the `madeCount` map is greater than the value in the `boughtCount` map, the method subtracts the value in the `madeCount` map from the value in the `boughtCount` map and adds the result to the `res` variable.

Finally, the `solution` method prints the value of the `res` variable.

The `main` method simply calls the `solution` method once for each line of input that is provided.
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        String line = scanner.nextLine();
        Map<String, Integer> boughtCount = new HashMap<>();
        for (String color : line.split(" ")) {
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<String, Integer> madeCount = new HashMap<>();
        for (String color : line.split(" ")) {
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (String color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code, with the necessary imports and a driver class called `Solution` with an executable `main(String[] args)` method. The `solution()` method is functionally identical to the Python code, with the same logic and data structures used. The `main()` method is also functionally identical, with the only difference being that the `solution()` method is called multiple times in a loop in the Java code, while in the Python code it is called only once.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if (!boughtCount.containsKey(c)) {
                boughtCount.put(c, 1);
            } else {
                boughtCount.put(c, boughtCount.get(c) + 1);
            }
        }

        line = sc.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if (!madeCount.containsKey(c)) {
                madeCount.put(c, 1);
            } else {
                madeCount.put(c, madeCount.get(c) + 1);
            }
        }

        int res = 0;
        for (char c : madeCount.keySet()) {
            if (!boughtCount.containsKey(c)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(c), madeCount.get(c));
        }
        System.out.println(res);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        Map<String, Integer> boughtCount = new HashMap<>();
        for (String color : line.split(" ")) {
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = scanner.nextLine();
        Map<String, Integer> madeCount = new HashMap<>();
        for (String color : line.split(" ")) {
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (String color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `main` method is the entry point of the program, and it reads the input from the user and calls the `solution` method for each test case. The `solution` method first reads the input for the bought and made colors, and then it calculates the number of each color that can be used to make a shirt. Finally, it prints the result.

Note that in Java, we use the `Scanner` class to read input from the user, and we use the `HashMap` class to store the bought and made colors. We also use the `Math` class to calculate the minimum of two numbers.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            String line = scanner.nextLine();
            HashMap<Character, Integer> boughtCount = new HashMap<>();
            for (char c : line.toCharArray()) {
                boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
            }
            line = scanner.nextLine();
            HashMap<Character, Integer> madeCount = new HashMap<>();
            for (char c : line.toCharArray()) {
                madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
            }
            int res = 0;
            for (char color : madeCount.keySet()) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(color), madeCount.get(color));
            }
            System.out.println(res);
        }
    }
}
[/JAVA]

This is a Java implementation of the Python code. It uses the `Scanner` class to read input from the user, and the `HashMap` class to store the counts of the colors. The `PriorityQueue` class is used to implement the heap, and the `Comparator` class is used to compare the colors. The `Math.min()` method is used to find the minimum of two integers.

The `main()` method reads the input from the user and calls the `solution()` method for each test case. The `solution()` method first reads the input and stores the counts of the colors in two hash maps. It then iterates through the colors in the `madeCount` hash map and checks if the corresponding color is present in the `boughtCount` hash map. If it is not, it prints -1 and returns. Otherwise, it calculates the minimum of the two counts and adds it to the result. Finally, it prints the result.

Note that the Java code uses the `String.toCharArray()` method to convert a string to an array of characters, and the `HashMap.getOrDefault()` method to retrieve the value of a key and return a default value if it is not present in the map. The `Math.min()` method is used to find the minimum of two integers.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    for (int i = 0; i < t; i++) {
      solution();
    }
  }

  private static void solution() {
    Map<String, Integer> boughtCount = new HashMap<>();
    Map<String, Integer> madeCount = new HashMap<>();
    PriorityQueue<String> pq = new PriorityQueue<>(Comparator.comparingInt(boughtCount::get));
    Scanner scanner = new Scanner(System.in);
    String line = scanner.nextLine();
    for (String color : line.split(" ")) {
      boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
    }
    line = scanner.nextLine();
    for (String color : line.split(" ")) {
      madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
    }
    int res = 0;
    for (String color : madeCount.keySet()) {
      if (!boughtCount.containsKey(color)) {
        System.out.println(-1);
        return;
      }
      res += Math.min(boughtCount.get(color), madeCount.get(color));
    }
    System.out.println(res);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. It uses the `java.util` package for various data structures and algorithms, such as `HashMap`, `PriorityQueue`, and `Comparator`. The `Scanner` class is used to read input from the console.

The `solution` method is the main logic of the program, which takes care of reading the input, counting the colors, and calculating the result. The `main` method is the driver method that reads the number of test cases and calls the `solution` method for each test case.

Note that the `PriorityQueue` class is used to implement the heap in the Python code, but in Java, we can use the `PriorityQueue` class directly. Also, the `Counter` class in Python is replaced by a `HashMap` in Java, which is used to count the colors.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Comparator;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            solution();
        }
    }

    public static void solution() {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        Map<String, Integer> boughtCount = new HashMap<>();
        for (String color : line.split(" ")) {
            boughtCount.put(color, boughtCount.getOrDefault(color, 0) + 1);
        }
        line = sc.nextLine();
        Map<String, Integer> madeCount = new HashMap<>();
        for (String color : line.split(" ")) {
            madeCount.put(color, madeCount.getOrDefault(color, 0) + 1);
        }
        int res = 0;
        for (String color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code. It uses the same data structures and algorithms as the Python code, but with the necessary imports and class structure to run in Java.

Note that the `heappush` and `heappop` functions are not needed in Java, as the `PriorityQueue` class provides the necessary functionality. Additionally, the `Counter` class is not needed in Java, as the `HashMap` class provides the necessary functionality.
======
