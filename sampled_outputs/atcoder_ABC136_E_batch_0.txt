  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int S = 0;
        for (int i = 0; i < N; i++) {
            S += A[i];
        }
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k <= N; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k <= N; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int S = sum(A);
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                List<Integer> B = new ArrayList<>();
                for (int a : A) {
                    B.add(a % d);
                }
                B.sort(null);
                List<Integer> C = new ArrayList<>();
                C.add(0);
                for (int k = 0; k < N; k++) {
                    C.add(C.get(k) + B.get(k));
                }
                for (int k = 0; k < N + 1; k++) {
                    if (((N - k) * d - (C.get(-1) - C.get(k)) - C.get(k)) % d == 0) {
                        if (Math.max(C.get(k), (N - k) * d - (C.get(-1) - C.get(k))) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    private static int sum(int[] A) {
        int sum = 0;
        for (int a : A) {
            sum += a;
        }
        return sum;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int S = 0;
        for (int i = 0; i < N; i++) {
            S += A[i];
        }
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                B = java.util.Arrays.stream(B).sorted().toArray();
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k <= N; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k <= N; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int S = 0;
        for (int i = 0; i < N; i++) {
            S += A[i];
        }
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k < N + 1; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k < N + 1; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int S = Arrays.stream(A).sum();
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                Arrays.sort(B);
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k <= N; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k <= N; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    List<Integer> A = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      A.add(scanner.nextInt());
    }
    int S = A.stream().mapToInt(Integer::intValue).sum();
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        List<Integer> B = new ArrayList<>();
        for (int a : A) {
          B.add(a % d);
        }
        B.sort(Comparator.naturalOrder());
        List<Integer> C = new ArrayList<>();
        C.add(0);
        for (int k = 0; k < N; k++) {
          C.add(C.get(k) + B.get(k));
        }
        for (int k = 0; k < N + 1; k++) {
          if (((N - k) * d - (C.get(N) - C.get(k)) - C.get(k)) % d == 0) {
            if (Math.max(C.get(k), (N - k) * d - (C.get(N) - C.get(k))) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code. It uses the same logic and data structures, with some minor changes to make it more idiomatic Java. The `List` interface is used instead of `map` and `sorted`, and the `stream` API is used to perform the sum and sorting operations. The `Comparator.naturalOrder()` method is used to sort the `List` in ascending order. The `Math.max` method is used to find the maximum value in the `List`. The `Math.sqrt` method is used to calculate the square root of `S`.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int S = 0;
        for (int i = 0; i < N; i++) {
            S += A[i];
        }
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 0; k < N; k++) {
                    C[k + 1] = C[k] + B[k];
                }
                for (int k = 0; k < N + 1; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int S = IntStream.of(A).sum();
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = Arrays.stream(A).map(a -> a % d).toArray();
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k < N; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k < N + 1; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        List<Integer> B = new ArrayList<>();
        for (int k = 0; k < N; k++) {
          B.add(A[k] % d);
        }
        B.sort(null);
        List<Integer> C = new ArrayList<>();
        C.add(0);
        for (int k = 0; k < N; k++) {
          C.add(C.get(k) + B.get(k));
        }
        for (int k = 0; k < N + 1; k++) {
          if (((N - k) * d - (C.get(N) - C.get(k)) - C.get(k)) % d == 0) {
            if (Math.max(C.get(k), (N - k) * d - (C.get(N) - C.get(k))) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int)Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        Arrays.sort(B);
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int S = 0;
        for (int i = 0; i < N; i++) {
            S += A[i];
        }
        int ans = 0;
        for (int i = 1; i <= (int) Math.sqrt(S); i++) {
            if (S % i != 0) {
                continue;
            }
            for (int j = 0; j < 2; j++) {
                int d = i;
                if (j == 1) {
                    d = S / i;
                }
                int[] B = new int[N];
                for (int k = 0; k < N; k++) {
                    B[k] = A[k] % d;
                }
                int[] C = new int[N + 1];
                C[0] = 0;
                for (int k = 1; k <= N; k++) {
                    C[k] = C[k - 1] + B[k - 1];
                }
                for (int k = 0; k <= N; k++) {
                    if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
                        if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
                            ans = Math.max(ans, d);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k < N + 1; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k < N + 1; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = Arrays.stream(A).sum();
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S) + 1; i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        Arrays.sort(B);
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 0; k < N; k++) {
          C[k + 1] = C[k] + B[k];
        }
        for (int k = 0; k < N + 1; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int S = Arrays.stream(A).sum();
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        Arrays.sort(B);
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int S = Arrays.stream(A).sum();
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = Arrays.stream(A).map(a -> a % d).toArray();
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k <= N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k <= N; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
      S += A[i];
    }
    int ans = 0;
    for (int i = 1; i <= (int) Math.sqrt(S); i++) {
      if (S % i != 0) {
        continue;
      }
      for (int j = 0; j < 2; j++) {
        int d = i;
        if (j == 1) {
          d = S / i;
        }
        int[] B = new int[N];
        for (int k = 0; k < N; k++) {
          B[k] = A[k] % d;
        }
        int[] C = new int[N + 1];
        C[0] = 0;
        for (int k = 1; k < N; k++) {
          C[k] = C[k - 1] + B[k - 1];
        }
        for (int k = 0; k < N + 1; k++) {
          if (((N - k) * d - (C[N] - C[k]) - C[k]) % d == 0) {
            if (Math.max(C[k], (N - k) * d - (C[N] - C[k])) <= K) {
              ans = Math.max(ans, d);
            }
          }
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
