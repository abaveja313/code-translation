  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `lcm` function is defined in the `Solution` class, and it takes two integers as input and returns their least common multiple. The `gcd` function is also defined in the `Solution` class, and it takes two integers as input and returns their greatest common divisor. The `main` method takes four integers as input using the `Scanner` class, and it calculates the least common multiple of the third and fourth integers, the difference between the second and third integers divided by the third integer, the difference between the second and fourth integers divided by the fourth integer, and the difference between the second and least common multiple of the third and fourth integers divided by the least common multiple of the third and fourth integers. Finally, it prints the sum of these four quantities.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `lcm` function is defined as a static method in the `Solution` class, and the `gcd` function is defined as a static method in the `BigInteger` class. The `main` method takes in user input, splits it into an array of strings, and then parses each string as an integer. The `lcm` and `gcd` functions are then called to calculate the values of `e`, `n`, `m`, and `o`, and the final result is printed to the console.
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    BigInteger a = scanner.nextBigInteger();
    BigInteger b = scanner.nextBigInteger();
    BigInteger c = scanner.nextBigInteger();
    BigInteger d = scanner.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO) || y.equals(BigInteger.ZERO)) {
      return BigInteger.ONE;
    }
    return gcd(y, x.remainder(y));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(int x, int y) {
    return (BigInteger.valueOf(x).multiply(BigInteger.valueOf(y))).divide(gcd(x, y));
  }

  public static BigInteger gcd(int x, int y) {
    if (y == 0) {
      return BigInteger.valueOf(x);
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
    BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
    BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }
  
  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }
  
  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String[] input = sc.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }
  
  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }
  
  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String[] input = scanner.nextLine().split(" ");
    int a = Integer.parseInt(input[0]);
    int b = Integer.parseInt(input[1]);
    int c = Integer.parseInt(input[2]);
    int d = Integer.parseInt(input[3]);

    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a - 1).divide(c));
    BigInteger m = (b.divide(d)).subtract((a - 1).divide(d));
    BigInteger o = (b.divide(e)).subtract((a - 1).divide(e));

    System.out.println(b - a + 1 - n - m + o);
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (y.equals(BigInteger.ZERO)) {
      return x;
    } else {
      return gcd(y, x.mod(y));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    BigInteger a = sc.nextBigInteger();
    BigInteger b = sc.nextBigInteger();
    BigInteger c = sc.nextBigInteger();
    BigInteger d = sc.nextBigInteger();
    BigInteger e = lcm(c, d);
    BigInteger n = (b.divide(c)).subtract((a.subtract(BigInteger.ONE)).divide(c));
    BigInteger m = (b.divide(d)).subtract((a.subtract(BigInteger.ONE)).divide(d));
    BigInteger o = (b.divide(e)).subtract((a.subtract(BigInteger.ONE)).divide(e));
    System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
  }

  public static BigInteger lcm(BigInteger x, BigInteger y) {
    return x.multiply(y).divide(gcd(x, y));
  }

  public static BigInteger gcd(BigInteger x, BigInteger y) {
    if (x.equals(BigInteger.ZERO)) {
      return y;
    } else {
      return gcd(y.remainder(x), x);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }
  
  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }
  
  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BigInteger a = sc.nextBigInteger();
        BigInteger b = sc.nextBigInteger();
        BigInteger c = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();
        BigInteger e = lcm(c, d);
        BigInteger n = (b.divide(c)).subtract(a.subtract(BigInteger.ONE).divide(c));
        BigInteger m = (b.divide(d)).subtract(a.subtract(BigInteger.ONE).divide(d));
        BigInteger o = (b.divide(e)).subtract(a.subtract(BigInteger.ONE).divide(e));
        System.out.println(b.subtract(a).add(BigInteger.ONE).subtract(n).subtract(m).add(o));
    }
    
    public static BigInteger lcm(BigInteger x, BigInteger y) {
        return x.multiply(y).divide(gcd(x, y));
    }
    
    public static BigInteger gcd(BigInteger x, BigInteger y) {
        if (y.equals(BigInteger.ZERO)) {
            return x;
        } else {
            return gcd(y, x.mod(y));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        int c = Integer.parseInt(input[2]);
        int d = Integer.parseInt(input[3]);

        BigInteger e = lcm(c, d);
        int n = (b / c) - ((a - 1) / c);
        int m = (b / d) - ((a - 1) / d);
        int o = (b / e) - ((a - 1) / e);

        System.out.println(b - a + 1 - n - m + o);
    }

    public static BigInteger lcm(int x, int y) {
        return (BigInteger.valueOf(x).multiply(BigInteger.valueOf(y))).divide(gcd(x, y));
    }

    public static BigInteger gcd(int x, int y) {
        if (x == 0) {
            return BigInteger.valueOf(y);
        } else {
            return gcd(y % x, x);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int a = scanner.nextInt();
    int b = scanner.nextInt();
    int c = scanner.nextInt();
    int d = scanner.nextInt();
    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);
    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    }
    return gcd(y, x % y);
  }
}

[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the same logic and functions, but with the necessary imports and a driver class called `Solution` with an executable `main` method. The code is functionally identical to the Python code, and it should produce the same output for the same input.
======
  [JAVA]
import java.util.Scanner;
import java.math.BigInteger;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int c = sc.nextInt();
    int d = sc.nextInt();

    int e = lcm(c, d);
    int n = (b / c) - ((a - 1) / c);
    int m = (b / d) - ((a - 1) / d);
    int o = (b / e) - ((a - 1) / e);

    System.out.println(b - a + 1 - n - m + o);
  }

  public static int lcm(int x, int y) {
    return (x * y) / gcd(x, y);
  }

  public static int gcd(int x, int y) {
    if (y == 0) {
      return x;
    } else {
      return gcd(y, x % y);
    }
  }
}

[/JAVA]
======
