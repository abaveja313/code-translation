  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    Map<Integer, Integer> data = new HashMap<>();
    int stop = 0;
    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }
    System.out.println(-1 == data.size() == 0 || stop == 1 ? data.size() : -1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[] numbers = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    Map<Integer, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = sc.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;

      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 == data.size() == 0 || stop == 1 ? len(data) : data.size());
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] numbers = sc.nextLine().split(" ");
        int columns = Integer.parseInt(numbers[0]);
        int rows = Integer.parseInt(numbers[1]);
        int counter = -1;
        HashMap<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = sc.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = scanner.nextLine().split(" ").stream().mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    Map<String, Integer> data = new HashMap<>();
    int stop = 0;
    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(String.valueOf(counter))) {
              data.put(String.valueOf(counter), 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }
    System.out.println(-1 == data.size() == 0 || stop == 1 ? data.size() : -1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<String, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(String.valueOf(counter))) {
              data.put(String.valueOf(counter), 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 == data.size() == 0 || stop == 1 ? -1 : data.size());
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<Integer, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;

      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    Map<Integer, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;

      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 + (data.size() == 0 || stop == 1 ? 0 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[] numbers = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    Map<Integer, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = sc.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 == data.size() == 0 || stop == 1 ? -1 : data.size());
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] numbers = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = sc.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 + (data.size() == 0 || stop == 1 ? 0 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = scanner.nextLine().split(" ").mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<String, Integer> data = new HashMap<>();
    int stop = 0;
    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(String.valueOf(counter))) {
              data.put(String.valueOf(counter), 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }
    System.out.println(-1 == data.size() == 0 || stop == 1 ? data.size() : -1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[] numbers = scanner.nextLine().split(" ").mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<String, Integer> data = new HashMap<>();
    int stop = 0;
    for (int i = 0; i < columns; i++) {
      String x = scanner.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;
      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(String.valueOf(counter))) {
              data.put(String.valueOf(counter), 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }
    System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = scanner.nextLine().split(" ").mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(data.size() == 0 || stop == 1 ? -1 : data.size());
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = scanner.nextLine().split(" ");
        int columns = Integer.parseInt(numbers[0]);
        int rows = Integer.parseInt(numbers[1]);
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 + (data.size() == 0 || stop == 1 ? 0 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = scanner.nextLine().split(" ").mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        HashMap<String, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(String.valueOf(counter))) {
                            data.put(String.valueOf(counter), 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = scanner.nextLine().split(" ");
        int columns = Integer.parseInt(numbers[0]);
        int rows = Integer.parseInt(numbers[1]);
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 * (data.size() == 0 || stop == 1 ? 1 : data.size()));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] numbers = scanner.nextLine().split(" ").mapToInt(Integer::parseInt).toArray();
        int columns = numbers[0];
        int rows = numbers[1];
        int counter = -1;
        Map<Integer, Integer> data = new HashMap<>();
        int stop = 0;
        for (int i = 0; i < columns; i++) {
            String x = scanner.nextLine();
            String g = "not";
            String s = "not";
            int count = 0;
            for (int j = 0; j < rows; j++) {
                if (x.charAt(j) == 'S') {
                    if (g.equals("found")) {
                        counter = count + 1;
                        if (!data.containsKey(counter)) {
                            data.put(counter, 1);
                        }
                    } else {
                        stop = 1;
                        break;
                    }
                } else if (x.charAt(j) == 'G') {
                    g = "found";
                    count = 0;
                } else {
                    count++;
                }
            }
        }
        System.out.println(-1 == data.size() == 0 || stop == 1 ? data.size() : -1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[] numbers = sc.nextLine().split(" ").map(Integer::parseInt).toArray(int[]::new);
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<Integer, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = sc.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;

      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(counter)) {
              data.put(counter, 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 == data.size() == 0 || stop == 1 ? data.size() : -1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[] numbers = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    int columns = numbers[0];
    int rows = numbers[1];
    int counter = -1;
    HashMap<String, Integer> data = new HashMap<>();
    int stop = 0;

    for (int i = 0; i < columns; i++) {
      String x = sc.nextLine();
      String g = "not";
      String s = "not";
      int count = 0;

      for (int j = 0; j < rows; j++) {
        if (x.charAt(j) == 'S') {
          if (g.equals("found")) {
            counter = count + 1;
            if (!data.containsKey(String.valueOf(counter))) {
              data.put(String.valueOf(counter), 1);
            }
          } else {
            stop = 1;
            break;
          }
        } else if (x.charAt(j) == 'G') {
          g = "found";
          count = 0;
        } else {
          count++;
        }
      }
    }

    System.out.println(-1 == data.size() == 0 || stop == 1 ? -1 : data.size());
  }
}
[/JAVA]
======
