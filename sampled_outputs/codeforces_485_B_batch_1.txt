  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources);
    int minX = resources.get(0);
    int minY = resources.get(1);
    int maxX = resources.get(n - 1);
    int maxY = resources.get(n);
    System.out.println(Math.max((maxX - minX) * (maxY - minY), 0));
  }
}
[/JAVA]

This is the Java code equivalent to the Python code. The `import` statements are the same, and the `main` method is also similar, with the exception that we use a `Scanner` object to read input from the user, and a `Collections.sort` method to sort the list of resources. The rest of the code is similar, with the exception of the `print` statement, which is replaced with a `System.out.println` statement.
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(new Integer[] {x, y});
    }
    Collections.sort(resources, new Comparator<Integer[]>() {
      @Override
      public int compare(Integer[] o1, Integer[] o2) {
        return o1[0] - o2[0];
      }
    });
    int minX = resources.get(0)[0];
    int maxX = resources.get(n - 1)[0];
    int minY = resources.get(0)[1];
    int maxY = resources.get(n - 1)[1];
    System.out.println(Math.max(maxX - minX, maxY - minY) * Math.max(maxX - minX, maxY - minY));
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the `Scanner` class to read input from the console, and the `List` and `ArrayList` classes to store the resources. The `Collections.sort()` method is used to sort the resources by their x-coordinate, and the `Comparator` interface is used to define a custom comparator for the sorting. The `Math.max()` method is used to find the maximum value of the x- and y-coordinates, and the result is printed to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] resource = new int[2];
      resource[0] = sc.nextInt();
      resource[1] = sc.nextInt();
      resources.add(resource);
    }

    int minX = resources.get(0)[0];
    int minY = resources.get(0)[1];
    int maxX = resources.get(0)[0];
    int maxY = resources.get(0)[1];

    for (int[] resource : resources) {
      if (resource[0] > maxX) {
        maxX = resource[0];
      }
      if (resource[0] < minX) {
        minX = resource[0];
      }
      if (resource[1] > maxY) {
        maxY = resource[1];
      }
      if (resource[1] < minY) {
        minY = resource[1];
      }
    }

    System.out.println((Math.max(maxX - minX, maxY - minY)) * (Math.max(maxX - minX, maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] resource = new int[2];
      resource[0] = sc.nextInt();
      resource[1] = sc.nextInt();
      resources.add(resource);
    }
    int minX = resources.get(0)[0];
    int minY = resources.get(0)[1];
    int maxX = resources.get(0)[0];
    int maxY = resources.get(0)[1];
    for (int[] resource : resources) {
      if (resource[0] > maxX) {
        maxX = resource[0];
      }
      if (resource[0] < minX) {
        minX = resource[0];
      }
      if (resource[1] > maxY) {
        maxY = resource[1];
      }
      if (resource[1] < minY) {
        minY = resource[1];
      }
    }
    System.out.println(Math.max((maxX - minX) * (maxX - minX), (maxY - minY) * (maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources);
    int minX = resources.get(0);
    int minY = resources.get(1);
    int maxX = resources.get(n * 2 - 2);
    int maxY = resources.get(n * 2 - 1);
    int maxDistance = Math.max(maxX - minX, maxY - minY);
    System.out.println(maxDistance * maxDistance);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(x);
      resources.add(y);
    }
    int minX = resources.stream().mapToInt(i -> i).min().getAsInt();
    int maxX = resources.stream().mapToInt(i -> i).max().getAsInt();
    int minY = resources.stream().mapToInt(i -> i).min().getAsInt();
    int maxY = resources.stream().mapToInt(i -> i).max().getAsInt();
    int area = Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY));
    System.out.println(area);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(new int[]{x, y});
    }
    int minX = resources.get(0)[0];
    int minY = resources.get(0)[1];
    int maxX = resources.get(0)[0];
    int maxY = resources.get(0)[1];
    for (int[] resource : resources) {
      if (resource[0] > maxX) {
        maxX = resource[0];
      }
      if (resource[0] < minX) {
        minX = resource[0];
      }
      if (resource[1] > maxY) {
        maxY = resource[1];
      }
      if (resource[1] < minY) {
        minY = resource[1];
      }
    }
    System.out.println(Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return o1.compareTo(o2);
      }
    });
    int minX = resources.get(0);
    int maxX = resources.get(n - 1);
    int minY = resources.get(1);
    int maxY = resources.get(n);
    int result = (int) Math.pow((maxX - minX), 2) + (int) Math.pow((maxY - minY), 2);
    System.out.println(result);
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. The code first reads an integer `n` from the input, and then reads `n` pairs of integers `(x, y)` from the input. The code then sorts the list of integers in ascending order, and then finds the minimum and maximum values of `x` and `y`. Finally, the code calculates the square of the difference between the maximum and minimum values of `x` and `y`, and prints the result.

Note that the code uses the `Math.pow()` method to calculate the square of a number, and the `Collections.sort()` method to sort the list of integers in ascending order. The code also uses the `Comparator` interface to define a custom comparator for sorting the list of integers.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = scanner.nextInt();
      int y = scanner.nextInt();
      resources.add(x);
      resources.add(y);
    }
    int minX = Collections.min(resources, Comparator.comparingInt(o -> o));
    int maxX = Collections.max(resources, Comparator.comparingInt(o -> o));
    int minY = Collections.min(resources, Comparator.comparingInt(o -> o));
    int maxY = Collections.max(resources, Comparator.comparingInt(o -> o));
    System.out.println(Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = scanner.nextInt();
      int y = scanner.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources);
    int minX = resources.get(0);
    int maxX = resources.get(n - 1);
    int minY = resources.get(n);
    int maxY = resources.get(2 * n - 1);
    System.out.println((Math.max(maxX - minX, maxY - minY)) ** 2);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the same approach of reading the input, sorting the resources, and then calculating the maximum distance between the resources.

The main difference is that in Java, we use a `Scanner` to read the input, and a `List` to store the resources. We also use `Collections.sort()` to sort the list of resources, and `Math.max()` to calculate the maximum distance.

I hope this helps! Let me know if you have any questions.
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] resource = new int[2];
      resource[0] = sc.nextInt();
      resource[1] = sc.nextInt();
      resources.add(resource);
    }

    int minX = resources.get(0)[0];
    int minY = resources.get(0)[1];
    int maxX = resources.get(0)[0];
    int maxY = resources.get(0)[1];

    for (int[] resource : resources) {
      if (resource[0] > maxX) {
        maxX = resource[0];
      }
      if (resource[0] < minX) {
        minX = resource[0];
      }
      if (resource[1] > maxY) {
        maxY = resource[1];
      }
      if (resource[1] < minY) {
        minY = resource[1];
      }
    }

    System.out.println(Math.max(maxX - minX, maxY - minY) * Math.max(maxX - minX, maxY - minY));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(new Integer[] {x, y});
    }
    Collections.sort(resources, (a, b) -> a[0] - b[0]);
    int minX = resources.get(0)[0];
    int maxX = resources.get(n - 1)[0];
    int minY = resources.get(0)[1];
    int maxY = resources.get(n - 1)[1];
    System.out.println((Math.max(maxX - minX, maxY - minY)) * (Math.max(maxX - minX, maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] resource = new int[2];
      resource[0] = scanner.nextInt();
      resource[1] = scanner.nextInt();
      resources.add(resource);
    }
    int minX = resources.get(0)[0], minY = resources.get(0)[1];
    int maxX = resources.get(0)[0], maxY = resources.get(0)[1];
    for (int[] resource : resources) {
      if (resource[0] > maxX) {
        maxX = resource[0];
      }
      if (resource[0] < minX) {
        minX = resource[0];
      }
      if (resource[1] > maxY) {
        maxY = resource[1];
      }
      if (resource[1] < minY) {
        minY = resource[1];
      }
    }
    System.out.println(Math.max((maxX - minX) * (maxX - minX), (maxY - minY) * (maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] resource = new int[2];
      resource[0] = scanner.nextInt();
      resource[1] = scanner.nextInt();
      resources.add(resource);
    }
    int[] min = resources.get(0);
    int[] max = resources.get(0);
    for (int[] resource : resources) {
      if (resource[0] > max[0]) {
        max[0] = resource[0];
      }
      if (resource[0] < min[0]) {
        min[0] = resource[0];
      }
      if (resource[1] > max[1]) {
        max[1] = resource[1];
      }
      if (resource[1] < min[1]) {
        min[1] = resource[1];
      }
    }
    System.out.println(Math.max(max[0] - min[0], max[1] - min[1]) * Math.max(max[0] - min[0], max[1] - min[1]));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Point> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(new Point(x, y));
    }
    Collections.sort(resources);
    int minX = resources.get(0).x;
    int minY = resources.get(0).y;
    int maxX = resources.get(n - 1).x;
    int maxY = resources.get(n - 1).y;
    int maxDistance = Math.max(maxX - minX, maxY - minY);
    System.out.println(maxDistance * maxDistance);
  }

  private static class Point implements Comparable<Point> {
    int x;
    int y;

    public Point(int x, int y) {
      this.x = x;
      this.y = y;
    }

    @Override
    public int compareTo(Point other) {
      if (this.x != other.x) {
        return this.x - other.x;
      }
      return this.y - other.y;
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = scanner.nextInt();
      int y = scanner.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources);
    int minX = resources.get(0);
    int minY = resources.get(1);
    int maxX = resources.get(n - 1);
    int maxY = resources.get(n);
    int maxDistance = Math.max((maxX - minX) * (maxX - minX), (maxY - minY) * (maxY - minY));
    System.out.println(maxDistance);
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. The code uses the `Scanner` class to read input from the user, and the `ArrayList` class to store the resources. The `Collections.sort()` method is used to sort the resources in ascending order. The code then calculates the minimum and maximum values of the x and y coordinates, and the maximum distance between any two points using the Pythagorean theorem. Finally, the code prints the maximum distance.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Point> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(new Point(x, y));
    }
    int minX = resources.get(0).x;
    int minY = resources.get(0).y;
    int maxX = resources.get(0).x;
    int maxY = resources.get(0).y;
    for (Point p : resources) {
      if (p.x > maxX) {
        maxX = p.x;
      }
      if (p.x < minX) {
        minX = p.x;
      }
      if (p.y > maxY) {
        maxY = p.y;
      }
      if (p.y < minY) {
        minY = p.y;
      }
    }
    System.out.println((Math.max(maxX - minX, maxY - minY)) * (Math.max(maxX - minX, maxY - minY)));
  }

  static class Point {
    int x;
    int y;

    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] xy = new int[2];
      xy[0] = sc.nextInt();
      xy[1] = sc.nextInt();
      resources.add(xy);
    }
    int minX = resources.get(0)[0];
    int minY = resources.get(0)[1];
    int maxX = resources.get(0)[0];
    int maxY = resources.get(0)[1];
    for (int[] xy : resources) {
      if (xy[0] > maxX) {
        maxX = xy[0];
      }
      if (xy[0] < minX) {
        minX = xy[0];
      }
      if (xy[1] > maxY) {
        maxY = xy[1];
      }
      if (xy[1] < minY) {
        minY = xy[1];
      }
    }
    System.out.println(Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY)));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<Point> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = scanner.nextInt();
      int y = scanner.nextInt();
      resources.add(new Point(x, y));
    }
    Collections.sort(resources);
    int minX = resources.get(0).x;
    int minY = resources.get(0).y;
    int maxX = resources.get(0).x;
    int maxY = resources.get(0).y;
    for (Point point : resources) {
      if (point.x > maxX) {
        maxX = point.x;
      }
      if (point.x < minX) {
        minX = point.x;
      }
      if (point.y > maxY) {
        maxY = point.y;
      }
      if (point.y < minY) {
        minY = point.y;
      }
    }
    System.out.println(Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY)));
  }

  private static class Point implements Comparable<Point> {
    int x;
    int y;

    public Point(int x, int y) {
      this.x = x;
      this.y = y;
    }

    @Override
    public int compareTo(Point other) {
      if (this.x == other.x) {
        return Integer.compare(this.y, other.y);
      } else {
        return Integer.compare(this.x, other.x);
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<Integer> resources = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int x = sc.nextInt();
      int y = sc.nextInt();
      resources.add(x);
      resources.add(y);
    }
    Collections.sort(resources, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return o1 - o2;
      }
    });
    int maxX = resources.get(n - 1);
    int minX = resources.get(0);
    int maxY = resources.get(n - 1);
    int minY = resources.get(0);
    for (int i = 1; i < n; i++) {
      int x = resources.get(i);
      if (x > maxX) {
        maxX = x;
      } else if (x < minX) {
        minX = x;
      }
      int y = resources.get(i);
      if (y > maxY) {
        maxY = y;
      } else if (y < minY) {
        minY = y;
      }
    }
    System.out.println(Math.max((maxX - minX), (maxY - minY)) * Math.max((maxX - minX), (maxY - minY)));
  }
}
[/JAVA]
======
