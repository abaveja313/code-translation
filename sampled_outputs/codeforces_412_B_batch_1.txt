  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n_computers = sc.nextInt();
    int k_participants = sc.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = sc.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]

This Java code reads the input from the user and stores it in variables `n_computers` and `k_participants`. It then creates an array `kps` of size `n_computers` and fills it with the input values. The array is then sorted in ascending order using the `Arrays.sort()` method. Finally, the value of the `k_participants`th element of the sorted array is printed to the console.

Note that the `Scanner` class is used to read input from the user, and the `Arrays` class is used to sort the array.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The `map` function is replaced with a `for` loop to iterate over the input and convert each element to an integer. The `sorted` function is replaced with the `Arrays.sort` method to sort the array of integers. The `reverse` argument is not needed in Java, as the `Arrays.sort` method sorts the array in ascending order by default. Finally, the `min` function is replaced with the `kps[k_participants - 1]` expression to get the minimum value of the first `k_participants` elements of the sorted array.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < n_computers; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k_participants - 1));
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The `map()` function in Python is replaced by the `ArrayList` class in Java, which allows us to store and manipulate lists of integers. The `sorted()` function in Python is replaced by the `Collections.sort()` method in Java, which allows us to sort the list of integers in descending order. The `reverse=True` argument in Python is replaced by the `Collections.reverseOrder()` method in Java, which allows us to reverse the order of the sorted list. Finally, the `print()` function in Python is replaced by the `System.out.println()` method in Java, which allows us to print the result to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    List<Integer> kps = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
    System.out.println(kps.stream().sorted(Comparator.reverseOrder()).limit(k_participants).min().getAsInt());
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, the `Arrays` class to convert the input string to an array of integers, and the `List` interface to store the array of integers. The `sorted` method is used to sort the list in descending order, and the `limit` method is used to limit the number of elements in the sorted list to the number of participants. Finally, the `min` method is used to find the minimum value in the sorted list.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < n_computers; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k_participants - 1));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n_computers = sc.nextInt();
        int k_participants = sc.nextInt();
        int[] kps = new int[n_computers];
        for (int i = 0; i < n_computers; i++) {
            kps[i] = sc.nextInt();
        }
        int min = 0;
        for (int i = 0; i < k_participants; i++) {
            min = Math.max(min, kps[i]);
        }
        System.out.println(min);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int nComputers = scanner.nextInt();
    int kParticipants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < nComputers; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(kParticipants - 1));
  }
}
[/JAVA]

This Java code is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and the `ArrayList` and `Collections` classes to store and sort the input. The `Collections.reverseOrder()` method is used to sort the list in descending order, and the `get()` method is used to retrieve the element at the specified index. The `System.out.println()` method is used to print the result.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n_computers = sc.nextInt();
    int k_participants = sc.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = sc.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < n_computers; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k_participants - 1));
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and the `ArrayList` class to store the list of integers. The `Collections.sort()` method is used to sort the list in descending order, and the `Collections.reverseOrder()` method is used to reverse the order of the list. Finally, the `get()` method is used to retrieve the value at the specified index in the list.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n_computers = sc.nextInt();
    int k_participants = sc.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = sc.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < k_participants; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k_participants - 1));
  }
}
[/JAVA]

This Java code is functionally identical to the Python code. It first prompts the user to input the number of computers and the number of participants, and then it reads in the list of participant scores. It then sorts the list in descending order and prints the highest score.
======
  [JAVA]
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int k = sc.nextInt();
    List<Integer> kps = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      kps.add(sc.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k - 1));
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. It uses the `Scanner` class to read input from the user, and the `List` and `ArrayList` classes to store the input values. The `Collections.sort` method is used to sort the list in descending order, and the `Collections.reverseOrder` method is used to reverse the order of the list. Finally, the `get` method is used to get the value at the specified index (in this case, `k - 1`) from the list.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int nComputers = scanner.nextInt();
    int kParticipants = scanner.nextInt();
    int[] kps = new int[nComputers];
    for (int i = 0; i < nComputers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[kParticipants - 1]);
  }
}
[/JAVA]

This is the equivalent Java code to the Python code provided. It uses the `Scanner` class to read input from the user, and the `Arrays.sort()` method to sort the array of integers in descending order. The `System.out.println()` method is used to print the minimum value of the first `kParticipants` elements of the sorted array.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n_computers = sc.nextInt();
        int k_participants = sc.nextInt();
        int[] kps = new int[n_computers];
        for (int i = 0; i < n_computers; i++) {
            kps[i] = sc.nextInt();
        }
        Arrays.sort(kps);
        System.out.println(kps[k_participants - 1]);
    }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and the `Arrays.sort()` method to sort the array of integers in descending order. The `System.out.println()` method is used to print the minimum value of the first `k_participants` elements of the sorted array.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    ArrayList<Integer> kps = new ArrayList<>();
    for (int i = 0; i < n_computers; i++) {
      kps.add(scanner.nextInt());
    }
    Collections.sort(kps, Collections.reverseOrder());
    System.out.println(kps.get(k_participants - 1));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int nComputers = scanner.nextInt();
    int kParticipants = scanner.nextInt();
    int[] kps = new int[nComputers];
    for (int i = 0; i < nComputers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[kParticipants - 1]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int nComputers = scanner.nextInt();
    int kParticipants = scanner.nextInt();
    int[] kps = new int[nComputers];
    for (int i = 0; i < nComputers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[kParticipants - 1]);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int nComputers = sc.nextInt();
    int kParticipants = sc.nextInt();
    int[] kps = new int[nComputers];
    for (int i = 0; i < nComputers; i++) {
      kps[i] = sc.nextInt();
    }
    System.out.println(getMin(kps, kParticipants));
  }

  private static int getMin(int[] kps, int kParticipants) {
    int[] sortedKps = kps.clone();
    Arrays.sort(sortedKps);
    int min = sortedKps[kParticipants - 1];
    for (int i = 0; i < kParticipants; i++) {
      if (sortedKps[i] < min) {
        min = sortedKps[i];
      }
    }
    return min;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n_computers = scanner.nextInt();
    int k_participants = scanner.nextInt();
    int[] kps = new int[n_computers];
    for (int i = 0; i < n_computers; i++) {
      kps[i] = scanner.nextInt();
    }
    Arrays.sort(kps);
    System.out.println(kps[k_participants - 1]);
  }
}
[/JAVA]
======
