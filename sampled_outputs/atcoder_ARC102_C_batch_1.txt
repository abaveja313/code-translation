  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m]) % mod;
        prod = (prod * invf[N - 2 * m] * invf[K - 1]) % mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = l;
      l = k % l;
      k = t;
      t = u;
      u = x - u * (k / l);
      x = t;
      t = v;
      v = y - v * (k / l);
      y = t;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    int[] invf = new int[N + K + 1];

    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod % mod;
        sign *= -1;
      }
      X[k - 2] = S % mod;
      X[2 * K - k] = S % mod;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;

        int[] X = new int[2 * K - 1];
        int[] frac = new int[N + K + 1];
        frac[0] = 1;
        for (int i = 1; i <= N + K; i++) {
            frac[i] = (frac[i - 1] * i) % mod;
        }

        int[] invf = new int[N + K + 1];
        for (int i = 0; i <= N + K; i++) {
            invf[i] = inved(frac[i], mod);
        }

        for (int k = 2; k <= K + 1; k++) {
            int S = 0;
            int sign = 1;
            int l = k / 2;
            for (int m = Math.min(l + 1, N / 2 + 1); m >= 1; m--) {
                int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
                prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
                S += prod % mod;
                sign *= -1;
            }
            X[k - 2] = S % mod;
            X[2 * K - k] = S % mod;
        }

        for (int i = 0; i < 2 * K - 1; i++) {
            System.out.println(X[i]);
        }
    }

    public static int inved(int a, int mod) {
        int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
        while (l != 0) {
            x = u;
            y = v;
            u = x - u * (k / l);
            v = y - v * (k / l);
            k = l;
            l = k % l;
        }
        return x % mod;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]));
        prod %= mod;
        prod *= (invf[m] * invf[l - m]) % mod;
        prod %= mod;
        prod *= (invf[N - 2 * m] * invf[K - 1]) % mod;
        prod %= mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = k / l;
      x -= u * t;
      y -= v * t;
      k = l;
      l = a % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]));
        prod = (prod * invf[m] * invf[l - m]) % mod;
        prod = (prod * invf[N - 2 * m] * invf[K - 1]) % mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod);
        prod = (prod * invf[m] % mod) * invf[l - m] % mod;
        prod = (prod * invf[N - 2 * m] % mod) * invf[K - 1] % mod;
        S = (S + prod) % mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = k / l;
      x -= u * t;
      y -= v * t;
      k = l;
      l = a % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    int[] X = new int[2 * K - 1];
    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) + mod - 1) % mod;
        prod = (prod * invf[m] + mod - 1) % mod;
        prod = (prod * invf[l - m] + mod - 1) % mod;
        prod = (prod * invf[N - 2 * m] + mod - 1) % mod;
        S = (S + prod) % mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = l;
      l = k % l;
      k = t;
      t = u;
      u = x - u * (k / l);
      x = t;
      t = v;
      v = y - v * (k / l);
      y = t;
    }
    return x % mod;
  }
}

[/
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }
    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }
    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m]) % mod;
        prod = (prod * invf[N - 2 * m] * invf[K - 1]) % mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }
    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  private static int inved(int a) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = k / l;
      x -= u * t;
      y -= v * t;
      k = l;
      l = a % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]));
        prod = (prod * invf[m] * invf[l - m]) % mod;
        prod = (prod * invf[N - 2 * m] * invf[K - 1]) % mod;
        S += prod;
        S = S % mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  private static int inved(int a) {
    int x = 1;
    int y = 0;
    int u = 0;
    int v = 1;
    int k = a;
    int l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) + mod - 1) % mod;
        prod = (prod * invf[m] + mod - 1) % mod;
        prod = (prod * invf[l - m] + mod - 1) % mod;
        prod = (prod * invf[N - 2 * m] + mod - 1) % mod;
        S = (S + prod) % mod;
        sign = -sign;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = k / l;
      x = u;
      y = v;
      u = x - u * t;
      v = y - v * t;
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K];
    int[] invf = new int[N + K + 1];

    for (int i = 0; i < N + K; i++) {
      frac[i] = (i + 1) % mod;
    }

    for (int i = 0; i < N + K + 1; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k < K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod);
        prod *= (invf[m] * invf[l - m] % mod);
        prod %= mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod);
        prod %= mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1;
    int y = 0;
    int u = 0;
    int v = 1;
    int k = a;
    int l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m >= 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) + mod) % mod;
        prod = (prod * (invf[m] * invf[l - m]) + mod) % mod;
        prod = (prod * (invf[N - 2 * m] * invf[K - 1]) + mod) % mod;
        S = (S + prod) % mod;
        sign = -sign;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int temp = l;
      l = k % l;
      k = temp;
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = l;
      l = k % l;
      k = t;
      x -= u * (k / l);
      y -= v * (k / l);
      u = x;
      v = y;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod = (prod * invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod;
        S %= mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i]);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod % mod;
        sign *= -1;
      }
      X[k - 2] = S % mod;
      X[2 * K - k] = S % mod;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  private static int inved(int a) {
    int x = 1;
    int y = 0;
    int u = 0;
    int v = 1;
    int k = a;
    int l = mod;
    while (l != 0) {
      int t = k / l;
      x -= u * t;
      y -= v * t;
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (frac[i - 1] * (i + 1)) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) + mod) % mod;
        prod = (prod * invf[m] + mod) % mod;
        prod = (prod * invf[l - m] + mod) % mod;
        prod = (prod * invf[N - 2 * m] + mod) % mod;
        S = (S + prod) % mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = l;
      l = k % l;
      k = t;
      t = u;
      u = x - u * (k / l);
      x = t;
      t = v;
      v = y - v * (k / l);
      y = t;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }
    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }
    for (int k = 2; k <= K + 1; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod % mod;
        sign *= -1;
      }
      X[k - 2] = S % mod;
      X[2 * K - k] = S % mod;
    }
    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int K = sc.nextInt();
    int N = sc.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    int[] invf = new int[N + K + 1];

    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    invf[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
        prod *= (invf[N - 2 * m] * invf[K - 1] % mod) % mod;
        S += prod % mod;
        sign *= -1;
      }
      X[k - 2] = S % mod;
      X[2 * K - k] = S % mod;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      x = u;
      y = v;
      u = x - u * (k / l);
      v = y - v * (k / l);
      k = l;
      l = k % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int K = scanner.nextInt();
    int N = scanner.nextInt();
    int mod = 998244353;

    int[] X = new int[2 * K - 1];
    int[] frac = new int[N + K + 1];
    frac[0] = 1;
    for (int i = 1; i <= N + K; i++) {
      frac[i] = (i * frac[i - 1]) % mod;
    }

    int[] invf = new int[N + K + 1];
    for (int i = 0; i <= N + K; i++) {
      invf[i] = inved(frac[i], mod);
    }

    for (int k = 2; k <= K + 2; k++) {
      int S = 0;
      int sign = 1;
      int l = k / 2;
      for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
        int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) + mod - 1) % mod;
        prod = (prod * invf[m] + mod - 1) % mod;
        prod = (prod * invf[l - m] + mod - 1) % mod;
        prod = (prod * invf[N - 2 * m] + mod - 1) % mod;
        S = (S + prod) % mod;
        sign *= -1;
      }
      X[k - 2] = S;
      X[2 * K - k] = S;
    }

    for (int i = 0; i < 2 * K - 1; i++) {
      System.out.println(X[i]);
    }
  }

  public static int inved(int a, int mod) {
    int x = 1, y = 0, u = 0, v = 1, k = a, l = mod;
    while (l != 0) {
      int t = k / l;
      x -= u * t;
      y -= v * t;
      k = l;
      l = a % l;
    }
    return x % mod;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;

        int[] X = new int[2 * K - 1];
        int[] frac = new int[N + K];
        frac[0] = 1;
        for (int i = 1; i <= N + K; i++) {
            frac[i] = (frac[i - 1] * i) % mod;
        }

        int[] invf = new int[N + K + 1];
        for (int i = 0; i <= N + K; i++) {
            invf[i] = inved(frac[i], mod);
        }

        for (int k = 2; k <= K + 2; k++) {
            int S = 0;
            int sign = 1;
            int l = k / 2;
            for (int m = Math.min(l + 1, N / 2 + 1); m > 0; m--) {
                int prod = (sign * (frac[l] * frac[N + K - 2 * m - 1]) % mod) * (invf[m] * invf[l - m] % mod) % mod;
                prod = (prod * invf[N - 2 * m] * invf[K - 1] % mod) % mod;
                S += prod;
                S %= mod;
                sign *= -1;
            }
            X[k - 2] = S;
            X[2 * K - k] = S;
        }

        for (int i = 0; i < 2 * K - 1; i++) {
            System.out.println(X[i]);
        }
    }

    public static int inved(int a, int mod) {
        int x = 1;
        int y = 0;
        int u = 0;
        int v = 1;
        int k = a;
        int l = mod;
        while (l != 0) {
            x = u;
            y = v;
            u = x - u * (k / l);
            v = y - v * (k / l);
            k = l;
            l = k % l;
        }
        return x % mod;
    }
}

[/JAVA]
======
