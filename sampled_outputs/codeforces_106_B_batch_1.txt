  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = Arrays.stream(scanner.nextLine().split(" "))
          .map(Integer::parseInt)
          .collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream()
        .filter(row -> a.stream()
            .allMatch(c -> row.stream()
                .anyMatch(v -> v >= c.get(3))))
        .collect(Collectors.toList());
    int minIndex = a.stream()
        .mapToInt(row -> row.get(3))
        .min()
        .getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            List<Integer> row = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());
            row.add(i);
            a.add(row);
        }
        a = a.stream().filter(c -> a.stream().allMatch(r -> c.get(3) >= r.get(3))).collect(Collectors.toList());
        System.out.println(a.stream().min(Comparator.comparing(l -> l.get(4))).get().get(4) + 1);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the same logic and data structures, but with the necessary imports and syntax changes to convert it to Java.

Note that the `map` function in Python is replaced with the `stream` and `map` methods in Java, and the `filter` function is replaced with the `stream` and `filter` methods in Java. Additionally, the `lambda` function is replaced with a method reference in Java.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < 4; j++) {
        row.add(scanner.nextInt());
      }
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        for (int j = 0; j < 3; j++) {
          if (row.get(j) >= c.get(j)) {
            return false;
          }
        }
      }
      return true;
    }).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(row -> row.get(3)).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the `Scanner` class to read input from the user, and the `ArrayList` and `List` classes to store the input data. The `stream()` method is used to filter the list of lists, and the `mapToInt()` method is used to get the minimum value of the fourth element of each list. Finally, the `getAsInt()` method is used to get the minimum index.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      int[] temp = new int[4];
      temp[0] = sc.nextInt();
      temp[1] = sc.nextInt();
      temp[2] = sc.nextInt();
      temp[3] = i;
      a.add(temp);
    }
    a = a.stream().filter(x -> {
      for (int[] c : a) {
        if (c[0] == x[0] && c[1] == x[1] && c[2] == x[2]) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]

I have converted the Python code to Java code. The code uses the `Scanner` class to read input from the user, and the `ArrayList` and `stream` classes to manipulate the list of arrays. The `filter` method is used to remove any arrays that have the same values as another array in the list, and the `min` method is used to find the minimum value in the list. Finally, the `mapToInt` method is used to convert the list of arrays to a list of integers, and the `getAsInt` method is used to get the minimum value as an integer.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 4; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
    }
    a = Arrays.stream(a)
             .filter(c -> Arrays.stream(a)
                               .allMatch(r -> Arrays.stream(r)
                                                    .anyMatch(v -> v >= c[3])))
             .toArray(int[][]::new);
    int min = Arrays.stream(a)
                    .mapToInt(c -> c[3])
                    .min()
                    .getAsInt() + 1;
    System.out.println(min);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            int[] arr = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
            a.add(new int[] {arr[0], arr[1], arr[2], i});
        }
        a = a.stream().filter(x -> a.stream().allMatch(c -> Arrays.stream(c).limit(3).anyMatch(v -> v >= x[0] && v >= x[1] && v >= x[2]))).collect(Collectors.toList());
        System.out.println(a.stream().min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
    }
}
[/JAVA]

This is the Java code that achieves the same functionality as the Python code. The code uses the `Scanner` class to read input from the user, and the `ArrayList` class to store the values in an array. The `Arrays.stream()` method is used to convert the input strings to integers, and the `filter()` method is used to filter the array to only include elements that meet the specified condition. The `min()` method is used to find the minimum value in the array, and the `get()` method is used to retrieve the value at the specified index. Finally, the `println()` method is used to print the result to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] row = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (int[] c : a) {
        if (row[0] >= c[0] && row[1] >= c[1] && row[2] >= c[2]) {
          return false;
        }
      }
      return true;
    }).toList();
    int minIndex = a.stream().mapToInt(row -> row[3]).min().orElse(0);
    System.out.println(minIndex + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());
      row.add(i);
      a.add(row);
    }
    a = a.stream().filter(row -> {
      for (List<Integer> c : a) {
        if (c.get(0) >= row.get(0) && c.get(1) >= row.get(1) && c.get(2) >= row.get(2)) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    System.out.println(a.stream().mapToInt(row -> row.get(3)).min().orElse(0) + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            a[i] = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
            a[i][3] = i;
        }
        a = Arrays.stream(a).filter(x -> Arrays.stream(a).allMatch(c -> Arrays.stream(c, 0, 3).allMatch(u -> Arrays.stream(x, 0, 3).anyMatch(v -> v >= u)))).toArray(int[][]::new);
        System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 3; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][3] = i;
        }
        a = Arrays.stream(a)
                .filter(x -> Arrays.stream(a)
                        .allMatch(c -> Arrays.stream(c)
                                .anyMatch(v -> v >= x[0])
                                && Arrays.stream(c)
                                .anyMatch(v -> v >= x[1])
                                && Arrays.stream(c)
                                .anyMatch(v -> v >= x[2])))
                .toArray(int[][]::new);
        System.out.println(Arrays.stream(a)
                .min(Comparator.comparingInt(x -> x[3]))
                .map(x -> x[4] + 1)
                .orElse(0));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][3] = i;
        }
        a = Arrays.stream(a)
                .filter(c -> Arrays.stream(a).allMatch(x -> Arrays.stream(c).limit(3).allMatch(u -> u >= x[3])))
                .toArray(int[][]::new);
        int min = Arrays.stream(a).mapToInt(x -> x[3]).min().getAsInt();
        System.out.println(min + 1);
    }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The main differences are:

* In Java, we use the `Scanner` class to read input from the user, rather than the `input()` function.
* In Java, we use the `Arrays` class to perform various array operations, such as filtering and mapping.
* In Java, we use the `Stream` class to perform stream operations, such as filtering and mapping.
* In Java, we use the `Collectors` class to collect the results of a stream operation into an array.
* In Java, we use the `Integer.parseInt()` method to convert a string to an integer.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we use the `Arrays.stream()` method to create a stream of the elements of an array.
* In Java, we
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;
import java.util.function.Predicate;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      String[] input = scanner.nextLine().split(" ");
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(new Predicate<List<Integer>>() {
        @Override
        public boolean test(List<Integer> row) {
          return a.stream()
            .allMatch(new Predicate<List<Integer>>() {
              @Override
              public boolean test(List<Integer> c) {
                return Stream.of(c.get(0), c.get(1), c.get(2))
                  .allMatch(new Predicate<Integer>() {
                    @Override
                    public boolean test(Integer u) {
                      return Stream.of(row.get(0), row.get(1), row.get(2))
                        .anyMatch(new Predicate<Integer>() {
                          @Override
                          public boolean test(Integer v) {
                            return v >= u;
                          }
                        });
                    }
                  });
              }
            });
        }
      })
      .collect(Collectors.toList());
    System.out.println(a.stream().min(Comparator.comparing(l -> l.get(3))).get().get(4) + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][4] = i;
        }
        a = Arrays.stream(a)
                .filter(x -> Arrays.stream(a)
                        .allMatch(c -> Arrays.stream(c)
                                .anyMatch(u -> u >= x[0] && u <= x[1] && u >= x[2] && u <= x[3])))
                .toArray(int[][]::new);
        int min = Arrays.stream(a)
                .min(Comparator.comparingInt(x -> x[4]))
                .map(x -> x[4] + 1)
                .orElse(0);
        System.out.println(min);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> row = new ArrayList<>();
      for (int j = 0; j < 5; j++) {
        row.add(scanner.nextInt());
      }
      a.add(row);
    }
    a = a.stream()
      .filter(row -> row.stream()
        .anyMatch(x -> a.stream()
          .allMatch(c -> c.stream()
            .limit(3)
            .anyMatch(u -> u >= x))))
      .collect(Collectors.toList());
    int min = a.stream()
      .mapToInt(row -> row.get(3))
      .min()
      .orElse(0);
    System.out.println(min + 1);
  }
}
[/JAVA]

This is a line-by-line conversion of the Python code to Java. The main differences are:

* In Java, we need to explicitly import the `Scanner` class to read input from the user.
* In Java, we use the `List` interface to represent a list of integers, which is more flexible than the Python `list` type.
* In Java, we use the `stream()` method to perform operations on a collection, which is more concise than the Python `map()` and `filter()` functions.
* In Java, we use the `orElse()` method to handle the case where the `min()` method returns an empty optional, which is more concise than the Python `or` operator.

Overall, this conversion is a faithful translation of the Python code to Java, with some minor adjustments to make it more idiomatic in Java.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<int[]> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      int[] arr = new int[input.length];
      for (int j = 0; j < input.length; j++) {
        arr[j] = Integer.parseInt(input[j]);
      }
      arr[input.length] = i;
      a.add(arr);
    }
    a = a.stream().filter(x -> {
      for (int[] c : a) {
        if (c[0] == x[0] && c[1] == x[1] && c[2] == x[2]) {
          return false;
        }
      }
      return true;
    }).collect(Collectors.toList());
    int minIndex = a.stream().mapToInt(x -> x[3]).min().getAsInt();
    System.out.println(minIndex + 1);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            int[] arr = new int[input.length + 1];
            for (int j = 0; j < input.length; j++) {
                arr[j] = Integer.parseInt(input[j]);
            }
            arr[input.length] = i;
            a.add(arr);
        }
        a = a.stream().filter(x -> {
            for (int[] c : a) {
                if (c[0] == x[0] && c[1] == x[1] && c[2] == x[2]) {
                    return false;
                }
            }
            return true;
        }).toList();
        System.out.println(a.stream().min(Comparator.comparing(x -> x[3])).get()[4] + 1);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      a[i][0] = scanner.nextInt();
      a[i][1] = scanner.nextInt();
      a[i][2] = scanner.nextInt();
      a[i][3] = i;
    }
    a = Arrays.stream(a)
      .filter(x -> Arrays.stream(a).allMatch(c -> Arrays.stream(c).limit(3).allMatch(u -> u >= x[0] && u <= x[1] && u <= x[2])))
      .toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This Java code is functionally identical to the Python code. It first prompts the user to enter an integer `n`, then creates a 2D array `a` of size `n x 4` and populates it with the user's input. The array is then filtered to remove any rows that do not meet the criteria of being within the range of the other rows. Finally, the minimum value of the fourth column is printed, with the addition of 1 to account for the fact that the indices in Java start at 0, while the Python code starts at 1.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] a = new int[n][4];
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < 3; j++) {
                a[i][j] = Integer.parseInt(input[j]);
            }
            a[i][3] = i;
        }
        a = filter(a, (int[] x) -> {
            for (int[] c : a) {
                if (!all(x[0] >= c[0], x[1] >= c[1], x[2] >= c[2])) {
                    return false;
                }
            }
            return true;
        });
        System.out.println(min(a, (int[] x) -> x[3] + 1));
    }

    private static int[][] filter(int[][] a, Predicate<int[]> predicate) {
        return Arrays.stream(a).filter(predicate).toArray(int[][]::new);
    }

    private static int min(int[][] a, ToIntFunction<int[]> function) {
        return Arrays.stream(a).mapToInt(function).min().orElse(0);
    }

    private static boolean all(boolean... booleans) {
        return Arrays.stream(booleans).allMatch(Boolean::booleanValue);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. It uses the `Scanner` class to read input from the user, and the `Arrays` class to perform various array operations. The `filter` method is used to filter the input array based on a predicate, and the `min` method is used to find the minimum value in the filtered array. The `all` method is used to check if all the elements in an array match a certain condition.

Note that the `filter` method takes a `Predicate<int[]>` as an argument, which is a function that takes an `int[]` and returns a `boolean`. The `min` method takes a `ToIntFunction<int[]>` as an argument, which is a function that takes an `int[]` and returns an `int`. The `all` method takes a `boolean...` as an argument, which is an array of `boolean` values.
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    List<List<Integer>> a = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      String[] input = scanner.nextLine().split(" ");
      List<Integer> row = new ArrayList<>();
      for (String s : input) {
        row.add(Integer.parseInt(s));
      }
      row.add(i);
      a.add(row);
    }
    a = a.stream()
      .filter(row -> a.stream()
        .allMatch(c -> row.stream()
          .anyMatch(v -> v >= c.get(3))))
      .collect(Collectors.toList());
    System.out.println(a.stream()
      .min(Comparator.comparing(row -> row.get(3)))
      .get()
      .get(4) + 1);
  }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the same algorithm to read the input, create the list of lists, and find the minimum value. The only difference is that Java uses a `Scanner` object to read the input, and the `filter` and `min` methods are called on the `Stream` object returned by the `filter` method. The `Comparator` object is used to compare the elements of the list and find the minimum value.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Stream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int n = scanner.nextInt();
    int[][] a = new int[n][4];
    for (int i = 0; i < n; i++) {
      String[] line = scanner.nextLine().split(" ");
      for (int j = 0; j < 3; j++) {
        a[i][j] = Integer.parseInt(line[j]);
      }
      a[i][3] = i;
    }
    a = Arrays.stream(a).filter(x -> {
      for (int[] c : a) {
        if (c[0] <= x[0] && c[1] <= x[1] && c[2] <= x[2]) {
          return false;
        }
      }
      return true;
    }).toArray(int[][]::new);
    System.out.println(Arrays.stream(a).min(Comparator.comparingInt(x -> x[3])).get()[4] + 1);
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. It uses the `Scanner` class to read input, `Arrays.stream()` to filter the array, and `Arrays.stream().min()` to find the minimum element in the filtered array. The `Comparator.comparingInt()` method is used to compare the fourth element of each array element.
======
