  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();

        List<Integer> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            pills.add(scanner.nextInt());
        }

        Collections.sort(pills);

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer> used = new ArrayList<>();
        Set<Integer> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1) >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best;
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int i = 0; i < used.size(); i++) {
                System.out.println(used.get(i) + " " + pills.get(i));
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();
    List<int[]> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] pill = new int[3];
      pill[0] = scanner.nextInt();
      pill[1] = scanner.nextInt();
      pill[2] = i + 1;
      pills.add(pill);
    }
    pills.sort((a, b) -> a[0] - b[0]);
    int rques = x;
    int qauto = 0;
    int time = 0;
    List<int[]> used = new ArrayList<>();
    Set<int[]> possible = new HashSet<>();
    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }
      if (possible.size() > 0) {
        int[] best = Collections.max(possible);
        used.add(new int[] {best[1], time});
        possible.remove(best);
        qauto += best[0];
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }
      rques = Math.min(rques + y - qauto, x);
      time++;
    }
    if (rques == 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (int[] scroll : used) {
        System.out.println(scroll[1] + " " + scroll[0][1]);
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.ArrayList;
import java.util.Scanner;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();

        List<Pill> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            pills.add(new Pill(a, b, i + 1));
        }

        Collections.sort(pills);

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Pill> used = new ArrayList<>();
        Set<Pill> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1).getA() >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                Pill best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best.getB();
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (Pill scroll : used) {
                System.out.println(scroll.getB() + " " + scroll.getA());
            }
        }
    }

    public static class Pill implements Comparable<Pill> {
        private int a;
        private int b;
        private int index;

        public Pill(int a, int b, int index) {
            this.a = a;
            this.b = b;
            this.index = index;
        }

        public int getA() {
            return a;
        }

        public int getB() {
            return b;
        }

        public int getIndex() {
            return index;
        }

        @Override
        public int compareTo(Pill o) {
            if (this.a != o.a) {
                return Integer.compare(this.a, o.a);
            } else {
                return Integer.compare(this.b, o.b);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int x = sc.nextInt();
        int y = sc.nextInt();

        List<int[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] pill = new int[3];
            pill[0] = sc.nextInt();
            pill[1] = sc.nextInt();
            pill[2] = i + 1;
            pills.add(pill);
        }

        Collections.sort(pills, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<int[]> used = new ArrayList<>();
        Set<int[]> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }

            if (possible.size() > 0) {
                int[] best = Collections.max(possible, new Comparator<int[]>() {
                    @Override
                    public int compare(int[] o1, int[] o2) {
                        return o1[1] - o2[1];
                    }
                });
                used.add(new int[] { best[1], time });
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }

            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int[] scroll : used) {
                System.out.println(scroll[0] + " " + scroll[1]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        List<int[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] pill = new int[3];
            pill[0] = scanner.nextInt();
            pill[1] = scanner.nextInt();
            pill[2] = i + 1;
            pills.add(pill);
        }
        Collections.sort(pills, (a, b) -> Integer.compare(a[0], b[0]));
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<int[]> used = new ArrayList<>();
        Set<int[]> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int[] best = Collections.max(possible);
                used.add(new int[] {best[1], time});
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int[] scroll : used) {
                System.out.println(scroll[1] + " " + scroll[0][1]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    List<Integer> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      pills.add(scanner.nextInt());
    }

    Collections.sort(pills);

    int rques = x;
    int qauto = 0;
    int time = 0;
    List<Integer> used = new ArrayList<>();
    Set<Integer> possible = new HashSet<>();

    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1) >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }

      if (possible.size() > 0) {
        int best = Collections.max(possible);
        used.add(best);
        possible.remove(best);
        qauto += best;
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }

      rques = Math.min(rques + y - qauto, x);
      time++;
    }

    if (rques <= 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (int scroll : used) {
        System.out.println(scroll + " " + used.get(scroll));
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int x = sc.nextInt();
        int y = sc.nextInt();
        List<int[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] pill = new int[3];
            pill[0] = sc.nextInt();
            pill[1] = sc.nextInt();
            pill[2] = i + 1;
            pills.add(pill);
        }
        pills.sort((a, b) -> Integer.compare(a[0], b[0]));
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<int[]> used = new ArrayList<>();
        Set<int[]> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int[] best = Collections.max(possible);
                used.add(new int[]{best[1], time});
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques == 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int[] scroll : used) {
                System.out.println(scroll[1] + " " + scroll[0][1]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    List<int[]> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] pill = new int[3];
      pill[0] = scanner.nextInt();
      pill[1] = scanner.nextInt();
      pill[2] = i + 1;
      pills.add(pill);
    }

    Collections.sort(pills, new Comparator<int[]>() {
      @Override
      public int compare(int[] o1, int[] o2) {
        return Integer.compare(o1[0], o2[0]);
      }
    });

    int rques = x;
    int qauto = 0;
    int time = 0;
    List<int[]> used = new ArrayList<>();
    Set<int[]> possible = new HashSet<>();

    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }

      if (possible.size() > 0) {
        int[] best = Collections.max(possible);
        used.add(best);
        possible.remove(best);
        qauto += best[0];
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }

      rques = Math.min(rques + y - qauto, x);
      time++;
    }

    if (used.size() > 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (int[] scroll : used) {
        System.out.println(scroll[1] + " " + scroll[0][1]);
      }
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int x = sc.nextInt();
    int y = sc.nextInt();
    ArrayList<ArrayList<Integer>> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      ArrayList<Integer> pill = new ArrayList<>();
      pill.add(sc.nextInt());
      pill.add(sc.nextInt());
      pill.add(i + 1);
      pills.add(pill);
    }
    pills.sort((a, b) -> a.get(0).compareTo(b.get(0)));
    int rques = x;
    int qauto = 0;
    int time = 0;
    ArrayList<ArrayList<Integer>> used = new ArrayList<>();
    Set<ArrayList<Integer>> possible = new TreeSet<>((a, b) -> a.get(0).compareTo(b.get(0)));
    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1).get(0) >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1).subList(1, 3));
      }
      if (possible.size() > 0) {
        ArrayList<Integer> best = possible.iterator().next();
        used.add(new ArrayList<>(Arrays.asList(best.get(0), time)));
        possible.remove(best);
        qauto += best.get(0);
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }
      rques = Math.min(rques + y - qauto, x);
      time++;
    }
    if (rques <= 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (ArrayList<Integer> scroll : used) {
        System.out.println(scroll.get(1) + " " + scroll.get(0).get(1));
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int x = sc.nextInt();
        int y = sc.nextInt();

        List<int[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] pill = new int[3];
            pill[0] = sc.nextInt();
            pill[1] = sc.nextInt();
            pill[2] = i + 1;
            pills.add(pill);
        }

        Collections.sort(pills, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[0], o2[0]);
            }
        });

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<int[]> used = new ArrayList<>();
        Set<int[]> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int[] best = Collections.max(possible, new Comparator<int[]>() {
                    @Override
                    public int compare(int[] o1, int[] o2) {
                        return Integer.compare(o1[1], o2[1]);
                    }
                });
                used.add(new int[] {best[1], best[0]});
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int[] scroll : used) {
                System.out.println(scroll[1] + " " + scroll[0]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    List<Integer[]> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] pill = new int[3];
      pill[0] = scanner.nextInt();
      pill[1] = scanner.nextInt();
      pill[2] = i + 1;
      pills.add(pill);
    }

    pills.sort((a, b) -> a[0] - b[0]);

    int rques = x;
    int qauto = 0;
    int time = 0;
    List<Integer[]> used = new ArrayList<>();
    Set<Integer[]> possible = new HashSet<>();

    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }

      if (possible.size() > 0) {
        Integer[] best = possible.stream().max(Comparator.comparingInt(a -> a[0])).get();
        used.add(new Integer[] {best[0], time});
        possible.remove(best);
        qauto += best[0];
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }

      rques = Math.min(rques + y - qauto, x);
      time++;
    }

    if (rques == 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (Integer[] scroll : used) {
        System.out.println(scroll[1] + " " + scroll[0][1]);
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        List<Integer[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            String[] pill = scanner.nextLine().split(" ");
            pills.add(new Integer[] { Integer.parseInt(pill[0]), Integer.parseInt(pill[1]), i + 1 });
        }
        Collections.sort(pills, new Comparator<Integer[]>() {
            @Override
            public int compare(Integer[] o1, Integer[] o2) {
                return o1[0] - o2[0];
            }
        });
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer[]> used = new ArrayList<>();
        Set<Integer[]> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                Integer[] best = Collections.max(possible);
                used.add(new Integer[] { best[0], time });
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (Integer[] scroll : used) {
                System.out.println(scroll[1] + " " + scroll[0][1]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    List<Integer[]> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] pill = new int[3];
      pill[0] = scanner.nextInt();
      pill[1] = scanner.nextInt();
      pill[2] = i + 1;
      pills.add(pill);
    }

    Collections.sort(pills, (p1, p2) -> p1[0] - p2[0]);

    int rques = x;
    int qauto = 0;
    int time = 0;
    List<Integer[]> used = new ArrayList<>();
    Set<Integer[]> possible = new HashSet<>();

    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }

      if (possible.size() > 0) {
        Integer[] best = Collections.max(possible);
        used.add(new Integer[] {best[1], time});
        possible.remove(best);
        qauto += best[0];
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }

      rques = Math.min(rques + y - qauto, x);
      time++;
    }

    if (rques == 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (Integer[] scroll : used) {
        System.out.println(scroll[1] + " " + scroll[0][1]);
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();

        List<Pill> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            pills.add(new Pill(a, b, c, i + 1));
        }

        Collections.sort(pills);

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Pill> used = new ArrayList<>();
        Set<Pill> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1).a >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }

            if (possible.size() > 0) {
                Pill best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best.b;
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }

            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques <= 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (Pill pill : used) {
                System.out.println(pill.c + " " + pill.b);
            }
        }
    }
}

class Pill implements Comparable<Pill> {
    int a;
    int b;
    int c;
    int index;

    public Pill(int a, int b, int c, int index) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.index = index;
    }

    @Override
    public int compareTo(Pill other) {
        return Integer.compare(this.a, other.a);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        List<Integer> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            pills.add(scanner.nextInt());
        }
        pills.sort(Collections.reverseOrder());
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer> used = new ArrayList<>();
        Set<Integer> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1) >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best;
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques == 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int i = 0; i < used.size(); i++) {
                System.out.println(used.get(i) + " " + pills.get(i));
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int x = sc.nextInt();
    int y = sc.nextInt();
    List<Integer[]> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int[] pill = new int[3];
      pill[0] = sc.nextInt();
      pill[1] = sc.nextInt();
      pill[2] = i + 1;
      pills.add(pill);
    }
    pills.sort((a, b) -> a[0] - b[0]);
    int rques = x;
    int qauto = 0;
    int time = 0;
    List<Integer[]> used = new ArrayList<>();
    Set<Integer[]> possible = new HashSet<>();
    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1));
      }
      if (possible.size() > 0) {
        Integer[] best = Collections.max(possible);
        used.add(new Integer[] {best[1], time});
        possible.remove(best);
        qauto += best[0];
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }
      rques = Math.min(rques + y - qauto, x);
      time++;
    }
    if (rques > 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (Integer[] scroll : used) {
        System.out.println(scroll[1] + " " + scroll[0][1]);
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    List<List<Integer>> pills = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      int a = scanner.nextInt();
      int b = scanner.nextInt();
      pills.add(new ArrayList<>(List.of(a, b, i + 1)));
    }

    pills.sort(Comparator.comparingInt(p -> p.get(0)));

    int rques = x;
    int qauto = 0;
    int time = 0;
    List<List<Integer>> used = new ArrayList<>();
    Set<List<Integer>> possible = new HashSet<>();

    while (rques > 0) {
      while (pills.size() > 0 && pills.get(pills.size() - 1).get(0) >= 100 * rques / x) {
        possible.add(pills.remove(pills.size() - 1).subList(1, 3));
      }

      if (possible.size() > 0) {
        List<Integer> best = Collections.max(possible);
        used.add(new ArrayList<>(List.of(best.get(1), best.get(0), time)));
        possible.remove(best);
        qauto += best.get(0);
      } else if (qauto <= y) {
        System.out.println("NO");
        break;
      }

      rques = Math.min(rques + y - qauto, x);
      time++;
    }

    if (rques <= 0) {
      System.out.println("YES");
      System.out.println(time + " " + used.size());
      for (List<Integer> scroll : used) {
        System.out.println(scroll.get(1) + " " + scroll.get(0));
      }
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        List<Integer> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            pills.add(scanner.nextInt());
        }
        Collections.sort(pills);
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer> used = new ArrayList<>();
        Set<Integer> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1) >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best;
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques == 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int i = 0; i < used.size(); i++) {
                System.out.println(i + 1 + " " + used.get(i));
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int x = sc.nextInt();
        int y = sc.nextInt();

        List<Integer[]> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int[] pill = new int[3];
            pill[0] = sc.nextInt();
            pill[1] = sc.nextInt();
            pill[2] = i + 1;
            pills.add(pill);
        }

        Collections.sort(pills, (p1, p2) -> p1[0] - p2[0]);

        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer[]> used = new ArrayList<>();
        Set<Integer[]> possible = new HashSet<>();

        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1)[0] >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                Integer[] best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best[0];
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }

        if (rques == 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (Integer[] scroll : used) {
                System.out.println(scroll[1] + " " + scroll[0][1]);
            }
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        List<Integer> pills = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            pills.add(scanner.nextInt());
        }
        pills.sort(Collections.reverseOrder());
        int rques = x;
        int qauto = 0;
        int time = 0;
        List<Integer> used = new ArrayList<>();
        Set<Integer> possible = new HashSet<>();
        while (rques > 0) {
            while (pills.size() > 0 && pills.get(pills.size() - 1) >= 100 * rques / x) {
                possible.add(pills.remove(pills.size() - 1));
            }
            if (possible.size() > 0) {
                int best = Collections.max(possible);
                used.add(best);
                possible.remove(best);
                qauto += best;
            } else if (qauto <= y) {
                System.out.println("NO");
                break;
            }
            rques = Math.min(rques + y - qauto, x);
            time++;
        }
        if (rques == 0) {
            System.out.println("YES");
            System.out.println(time + " " + used.size());
            for (int i = 0; i < used.size(); i++) {
                System.out.println(used.get(i) + " " + pills.get(i));
            }
        }
    }
}
[/JAVA]
======
