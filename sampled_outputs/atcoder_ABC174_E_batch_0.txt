  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int l = 0;
        int r = A[N - 1];
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }

    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `ceil` function is defined as a static method in the `Solution` class, and the `main` method is also defined in the `Solution` class. The `Scanner` class is used to read input from the user, and the `Function` interface is used to define the `ceil` function. The rest of the code is similar to the Python code, with the exception of the `ceil` function being defined as a static method in Java.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }

        int l = 0;
        int r = A[N - 1];
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }

    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int l = 0;
        int r = A[N - 1];
        while (r - l > 1) {
            int m = (l + r) / 2;
            if (sum(ceil(A, m)) > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }
    
    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
    
    public static int sum(int[] A) {
        int sum = 0;
        for (int i = 0; i < A.length; i++) {
            sum += ceil(A[i], m) - 1;
        }
        return sum;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int l = 0;
    int r = A[N - 1];
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]

Explanation:

* The `import` statement is used to import the `Scanner` class from the `java.util` package.
* The `Solution` class is the driver class that contains the `main` method.
* The `main` method takes an array of `String` arguments as input and uses the `Scanner` class to read the input from the console.
* The `N` and `K` variables are declared and initialized with the values read from the console using the `Scanner` class.
* The `A` array is declared and initialized with the values read from the console using the `Scanner` class.
* The `l` and `r` variables are declared and initialized with the values `0` and `A[N - 1]`, respectively.
* The `while` loop is used to iterate until the difference between `l` and `r` is less than or equal to `1`.
* The `m` variable is declared and initialized with the value `(l + r) / 2`.
* The `sum` variable is declared and initialized with the value `0`.
* The `for` loop is used to iterate over the `A` array and calculate the sum of the values of `ceil(x, m) - 1` for each element `x` in the array.
* The `if` statement is used to check if the sum is greater than `K`. If it is, the `l` variable is updated with the value `m`. Otherwise, the `r` variable is updated with the value `m`.
* The `while` loop continues until the difference between `l` and `r` is less than or equal to `1`.
* The final value of `r` is printed to the console using the `System.out.println` method.

Note: The `ceil` method is defined separately and is used to calculate the ceiling of a number to the nearest integer.
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int l = 0;
        int r = Integer.MAX_VALUE;
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }

    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }

    int l = 0;
    int r = Integer.MAX_VALUE;
    while (r - l > 1) {
      int m = (l + r) / 2;
      if (sum(ceil(A, m)) > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  private static int sum(int[] A, int m) {
    int sum = 0;
    for (int i = 0; i < A.length; i++) {
      sum += ceil(A[i], m) - 1;
    }
    return sum;
  }

  private static int ceil(int x, int m) {
    return (x + m - 1) / m;
  }
}

[/JAVA]

This is a basic implementation of the Python code in Java. It uses the `Scanner` class to read input from the user, and the `Function` interface to define the `ceil` function. The `sum` function is defined as a separate method, and the `main` method contains the logic for finding the maximum value of `m` that satisfies the condition.

Note that the `ceil` function in Java is defined differently from the `ceil` function in Python. In Java, the `ceil` function returns the smallest integer greater than or equal to the input, while in Python, it returns the integer part of the input. To account for this difference, the `ceil` function in Java is defined as `(x + m - 1) / m`, which is equivalent to `math.ceil(x / m)` in Python.
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0, r = A[N - 1];
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]

This is the Java code equivalent to the given Python code. The code uses a Scanner object to read input from the user, and it uses a function called ceil to calculate the ceiling of a number. The main method first reads the input N and K, and then reads the next N integers into an array called A. The code then initializes the left and right bounds of the search interval to 0 and the maximum value in A, respectively.

The while loop starts by calculating the midpoint of the current search interval. It then calculates the sum of the ceiling of each element in A divided by the midpoint, and checks if this sum is greater than K. If it is, the left bound is updated to the midpoint, otherwise the right bound is updated to the midpoint.

The while loop continues until the search interval is reduced to a single element, and the final value of the right bound is printed as the output.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int l = 0;
    int r = Integer.MAX_VALUE;
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += (A[i] + m - 1) / m - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. The `ceil` function is replaced with the integer division operator `//` in Java. The `map` function is replaced with a for loop in Java. The `max` function is replaced with the `Integer.MAX_VALUE` constant in Java. The `tuple` function is replaced with an array in Java. The `input` function is replaced with the `Scanner` class in Java. The `print` function is replaced with the `System.out.println` method in Java.
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0;
    int r = Integer.MAX_VALUE;
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0;
    int r = Integer.MAX_VALUE;
    while (r - l > 1) {
      int m = (l + r) / 2;
      if (sum(A, m) - 1 > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  private static int sum(int[] A, int m) {
    int sum = 0;
    for (int x : A) {
      sum += (x + m - 1) / m;
    }
    return sum;
  }
}
[/JAVA]

Explanation:

* The `ceil` function is replaced by a lambda expression `(a, b) -> (a + b - 1) / b`.
* The `map` function is replaced by a `for` loop that iterates over the array `A` and applies the lambda expression to each element.
* The `input` function is replaced by a `Scanner` object that reads input from `System.in`.
* The `print` function is replaced by a `System.out.println` statement.
* The `max` function is replaced by a `Integer.MAX_VALUE` constant.
* The `sum` function is defined as a separate method that takes an array `A` and an integer `m` as input, and returns the sum of the ceil function applied to each element of `A` with a denominator of `m`.
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }

    int l = 0;
    int r = IntStream.of(A).max().getAsInt();
    while (r - l > 1) {
      int m = (l + r) / 2;
      if (IntStream.of(A).map(x -> ceil(x, m) - 1).sum() > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  private static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0;
    int r = Arrays.stream(A).max().getAsInt();
    while (r - l > 1) {
      int m = (l + r) / 2;
      if (Arrays.stream(A).map(x -> ceil(x, m) - 1).sum() > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }
  
  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.IntBinaryOperator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }

    int l = 0;
    int r = A[0];
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0;
    int r = A[0];
    while (r - l > 1) {
      int m = (l + r) / 2;
      if (sum(ceil(A, m)) > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  private static int sum(int[] A) {
    int sum = 0;
    for (int i = 0; i < A.length; i++) {
      sum += A[i];
    }
    return sum;
  }

  private static int ceil(int[] A, int m) {
    int ceil = 0;
    for (int i = 0; i < A.length; i++) {
      ceil += (A[i] + m - 1) / m;
    }
    return ceil;
  }
}
[/JAVA]

This code is functionally identical to the Python code, with the exception of the `ceil` function, which is defined using a lambda expression in Python but is defined as a separate method in Java. The `sum` function is also defined separately in Java, but it is not necessary to define it separately in Python as it is already defined in the `math` module.
======
  [JAVA]
import java.util.Scanner;
import java.util.function.BiFunction;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int l = 0;
        int r = A[N - 1];
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }

    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}
[/JAVA]

This is the equivalent Java code to the given Python code. The `BiFunction` interface is used to define the `ceil` function, which is then used in the `main` method to calculate the sum of the ceilings of the elements of the array `A` at different values of `m`. The `while` loop is used to find the value of `m` that minimizes the sum of the ceilings, subject to the constraint that the sum is less than or equal to `K`. The final value of `r` is then printed to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int l = 0;
        int r = Arrays.stream(A).max().getAsInt();
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int x : A) {
                sum += ceil(x, m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }
    
    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int K = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int l = 0;
    int r = Integer.MAX_VALUE;
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]

This is the Java code equivalent to the Python code you provided. The `ceil` function is defined as a static method inside the `Solution` class, and the `main` method is the driver class that reads the input, performs the necessary calculations, and prints the result. The `Scanner` class is used to read the input from the user.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int l = 0;
        int r = A[N - 1];
        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }
        System.out.println(r);
    }
    
    public static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }

        int l = 0;
        int r = A[0];
        for (int i = 1; i < N; i++) {
            r = Math.max(r, A[i]);
        }

        while (r - l > 1) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int i = 0; i < N; i++) {
                sum += ceil(A[i], m) - 1;
            }
            if (sum > K) {
                l = m;
            } else {
                r = m;
            }
        }

        System.out.println(r);
    }

    private static int ceil(int a, int b) {
        return (a + b - 1) / b;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.BiFunction;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int K = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int l = 0;
    int r = A[0];
    while (r - l > 1) {
      int m = (l + r) / 2;
      int sum = 0;
      for (int i = 0; i < N; i++) {
        sum += ceil(A[i], m) - 1;
      }
      if (sum > K) {
        l = m;
      } else {
        r = m;
      }
    }
    System.out.println(r);
  }

  public static int ceil(int a, int b) {
    return (a + b - 1) / b;
  }
}
[/JAVA]

Note: The `BiFunction` interface is used to define the `ceil` function, which takes two integers as input and returns the ceiling of the division of the two numbers. The `ceil` function is then used in the `main` method to calculate the sum of the ceilings of the elements in `A` divided by `m`.
======
