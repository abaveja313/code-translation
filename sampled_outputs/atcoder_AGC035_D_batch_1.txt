  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner stdin = new Scanner(System.in);

    int N = stdin.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = stdin.nextInt();
    }

    int result = A[0] + A[N - 1] + want(1, N - 2, 1, 1);
    System.out.println(result);
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }

    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }

    return nmin;
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. It uses the same algorithm and data structures as the Python code, but with Java syntax and conventions. The `want` function is defined as a static method of the `Solution` class, and it takes the same parameters as the Python `want` function. The `main` method is also defined as a static method of the `Solution` class, and it reads the input from the standard input and calls the `want` function with the appropriate parameters. The `print` statement is replaced with a `System.out.println` statement to print the result to the standard output.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int result = A[0] + A[N - 1] + want(1, N - 2, 1, 1);
    System.out.println(result);
  }

  public static int want(int l, int r, int lb, int rb) {
    if (l > r) {
      return 0;
    } else if (l == r) {
      return A[l] * (lb + rb);
    }
    int nmin = Integer.MAX_VALUE;
    for (int i = l; i <= r; i++) {
      nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
    }
    return nmin;
  }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. The `want` function is implemented in a similar way, with a loop that iterates over the indices of the array, and the `min` function is used to find the minimum value of the function at each index. The `main` method is also implemented in a similar way, with the input being read using a `Scanner` object, and the output being printed using `System.out.println`.
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner stdin = new Scanner(System.in);
        int N = stdin.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = stdin.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(A[0] + A[N - 1] + want(1, N - 2, 1, 1));
    }

    public static int want(int l, int r, int lb, int rb) {
        if (l > r) {
            return 0;
        } else if (l == r) {
            return A[l] * (lb + rb);
        }
        int nmin = Integer.MAX_VALUE;
        for (int i = l; i <= r; i++) {
            nmin = Math.min(nmin, A[i] * (lb + rb) + want(l, i - 1, lb, lb + rb) + want(i + 1, r, lb + rb, rb));
        }
        return nmin;
    }
}
[/JAVA]
======
