  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];
    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }
    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }
    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);
    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];
    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }
    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }
    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);
    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];

    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }

    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }

    Arrays.sort(red, Comparator.comparingInt(a -> a[1]));
    Arrays.sort(blue);

    int ans = 0;
    for (int[] b : blue) {
      for (int i = 0; i < N; i++) {
        if (b[0] > red[i][0] && b[1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];

        for (int i = 0; i < N; i++) {
            red[i][0] = sc.nextInt();
            red[i][1] = sc.nextInt();
        }

        for (int i = 0; i < N; i++) {
            blue[i][0] = sc.nextInt();
            blue[i][1] = sc.nextInt();
        }

        Arrays.sort(red, (a, b) -> b[1] - a[1]);
        Arrays.sort(blue, (a, b) -> a[0] - b[0]);

        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }

        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        ArrayList<int[]> red = new ArrayList<int[]>();
        ArrayList<int[]> blue = new ArrayList<int[]>();
        for (int i = 0; i < N; i++) {
            int[] temp = new int[2];
            temp[0] = sc.nextInt();
            temp[1] = sc.nextInt();
            red.add(temp);
        }
        for (int i = 0; i < N; i++) {
            int[] temp = new int[2];
            temp[0] = sc.nextInt();
            temp[1] = sc.nextInt();
            blue.add(temp);
        }
        Collections.sort(red, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[1] - o1[1];
            }
        });
        Collections.sort(blue);
        int ans = 0;
        for (int[] b : blue) {
            for (int i = 0; i < N; i++) {
                if (b[0] > red.get(i)[0] && b[1] > red.get(i)[1]) {
                    ans++;
                    red.get(i)[0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];
        for (int i = 0; i < N; i++) {
            red[i][0] = sc.nextInt();
            red[i][1] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            blue[i][0] = sc.nextInt();
            blue[i][1] = sc.nextInt();
        }
        Arrays.sort(red, (a, b) -> b[1] - a[1]);
        Arrays.sort(blue, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];

        for (int i = 0; i < N; i++) {
            red[i][0] = sc.nextInt();
            red[i][1] = sc.nextInt();
        }

        for (int i = 0; i < N; i++) {
            blue[i][0] = sc.nextInt();
            blue[i][1] = sc.nextInt();
        }

        Arrays.sort(red, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o2[1], o1[1]);
            }
        });

        Arrays.sort(blue, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[0], o2[0]);
            }
        });

        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }

        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];
        for (int i = 0; i < N; i++) {
            red[i][0] = sc.nextInt();
            red[i][1] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            blue[i][0] = sc.nextInt();
            blue[i][1] = sc.nextInt();
        }
        Arrays.sort(red, (a, b) -> b[1] - a[1]);
        Arrays.sort(blue, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    ArrayList<int[]> red = new ArrayList<>();
    ArrayList<int[]> blue = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      red.add(new int[] {sc.nextInt(), sc.nextInt()});
    }
    for (int i = 0; i < N; i++) {
      blue.add(new int[] {sc.nextInt(), sc.nextInt()});
    }
    Collections.sort(red, Comparator.comparingInt(a -> a[1]).reversed());
    Collections.sort(blue, Comparator.comparingInt(a -> a[0]));
    int ans = 0;
    for (int[] b : blue) {
      for (int i = 0; i < N; i++) {
        if (b[0] > red.get(i)[0] && b[1] > red.get(i)[1]) {
          ans++;
          red.get(i)[0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];

    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }

    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }

    Arrays.sort(red, Comparator.comparing(x -> x[1]).reversed());
    Arrays.sort(blue, Comparator.comparing(x -> x[0]));

    int ans = 0;
    for (int[] b : blue) {
      for (int i = 0; i < N; i++) {
        if (b[0] > red[i][0] && b[1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    ArrayList<int[]> red = new ArrayList<>();
    ArrayList<int[]> blue = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      red.add(new int[] {sc.nextInt(), sc.nextInt()});
    }
    for (int i = 0; i < N; i++) {
      blue.add(new int[] {sc.nextInt(), sc.nextInt()});
    }
    Collections.sort(red, new Comparator<int[]>() {
      @Override
      public int compare(int[] o1, int[] o2) {
        return o2[1] - o1[1];
      }
    });
    Collections.sort(blue);
    int ans = 0;
    for (int[] b : blue) {
      for (int i = 0; i < N; i++) {
        if (b[0] > red.get(i)[0] && b[1] > red.get(i)[1]) {
          ans++;
          red.get(i)[0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];

    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }

    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }

    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);

    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];
        for (int i = 0; i < N; i++) {
            red[i] = new int[] {sc.nextInt(), sc.nextInt()};
        }
        for (int i = 0; i < N; i++) {
            blue[i] = new int[] {sc.nextInt(), sc.nextInt()};
        }
        Arrays.sort(red, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[1] - o2[1];
            }
        });
        Arrays.sort(blue, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];

    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }

    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }

    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);

    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];
    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }
    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }
    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);
    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];
    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }
    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }
    Arrays.sort(red, (a, b) -> b[1] - a[1]);
    Arrays.sort(blue, (a, b) -> a[0] - b[0]);
    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] red = new int[N][2];
        int[][] blue = new int[N][2];
        for (int i = 0; i < N; i++) {
            red[i][0] = sc.nextInt();
            red[i][1] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            blue[i][0] = sc.nextInt();
            blue[i][1] = sc.nextInt();
        }
        Arrays.sort(red, (a, b) -> b[1] - a[1]);
        Arrays.sort(blue, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
                    ans++;
                    red[i][0] = Integer.MAX_VALUE;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    ArrayList<Integer> red = new ArrayList<>();
    ArrayList<Integer> blue = new ArrayList<>();
    for (int i = 0; i < N; i++) {
      red.add(sc.nextInt());
    }
    for (int i = 0; i < N; i++) {
      blue.add(sc.nextInt());
    }
    Collections.sort(red, Collections.reverseOrder());
    Collections.sort(blue);
    int ans = 0;
    for (int i = 0; i < blue.size(); i++) {
      for (int j = 0; j < red.size(); j++) {
        if (blue.get(i) > red.get(j)) {
          ans++;
          red.set(j, Integer.MAX_VALUE);
          break;
        }
      }
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int[][] red = new int[N][2];
    int[][] blue = new int[N][2];

    for (int i = 0; i < N; i++) {
      red[i][0] = sc.nextInt();
      red[i][1] = sc.nextInt();
    }

    for (int i = 0; i < N; i++) {
      blue[i][0] = sc.nextInt();
      blue[i][1] = sc.nextInt();
    }

    Arrays.sort(red, new Comparator<int[]>() {
      @Override
      public int compare(int[] a, int[] b) {
        return a[1] - b[1];
      }
    });

    Arrays.sort(blue, new Comparator<int[]>() {
      @Override
      public int compare(int[] a, int[] b) {
        return a[0] - b[0];
      }
    });

    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue[j][0] > red[i][0] && blue[j][1] > red[i][1]) {
          ans++;
          red[i][0] = Integer.MAX_VALUE;
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    ArrayList<ArrayList<Integer>> red = new ArrayList<>();
    ArrayList<ArrayList<Integer>> blue = new ArrayList<>();

    for (int i = 0; i < N; i++) {
      ArrayList<Integer> redRow = new ArrayList<>();
      ArrayList<Integer> blueRow = new ArrayList<>();
      redRow.add(sc.nextInt());
      redRow.add(sc.nextInt());
      blueRow.add(sc.nextInt());
      blueRow.add(sc.nextInt());
      red.add(redRow);
      blue.add(blueRow);
    }

    Collections.sort(red, (a, b) -> b.get(1).compareTo(a.get(1)));
    Collections.sort(blue, (a, b) -> a.get(1).compareTo(b.get(1)));

    int ans = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (blue.get(j).get(0) > red.get(i).get(0) && blue.get(j).get(1) > red.get(i).get(1)) {
          ans++;
          red.get(i).set(0, Integer.MAX_VALUE);
          break;
        }
      }
    }

    System.out.println(ans);
  }
}
[/JAVA]
======
