  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

This Java code is functionally identical to the Python code, with the following changes:

* The `from collections import Counter` line is replaced with `import java.util.HashMap;` to import the `HashMap` class from the `java.util` package.
* The `Counter` class is replaced with a `HashMap` object named `c`, which is used to store the counts of each character in the input string.
* The `c.values()` method is replaced with `c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum()` to calculate the sum of the squares of the values in the `c` map.
* The `print` function is replaced with `System.out.println(ans)` to print the result to the console.

Note that the `import java.util.Scanner;` line is not included in the Java code, as it is not necessary for this specific problem.
======
  [JAVA]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String A = sc.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

This is the equivalent Java code for the given Python code. It uses the `Scanner` class to read input from the user, and the `HashMap` class to store the counts of each character in the string. The `stream` API is used to calculate the sum of the products of the values and the number of occurrences of each character. Finally, the result is printed to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String A = scanner.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            if (!c.containsKey(ch)) {
                c.put(ch, 1);
            } else {
                c.put(ch, c.get(ch) + 1);
            }
        }
        int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
        System.out.println(ans);
    }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. We first import the necessary classes from the Java standard library, such as `Scanner` for reading input and `HashMap` for storing the frequency of each character in the string `A`.

We then define a `main` method that takes an array of strings as input and reads the first string from the input using the `Scanner` class. We then compute the length of the string `A` and create a `HashMap` called `c` to store the frequency of each character in `A`.

We then compute the answer to the problem by first computing the total number of pairs of distinct characters in `A` using the formula `1 + N * (N - 1) / 2`. We then subtract the number of pairs of characters that are the same, which we compute by summing the number of pairs of characters that have the same frequency using the formula `(v * (v - 1)) / 2` for each frequency `v` in `c`.

Finally, we print the answer to the problem.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    int N = input.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = input.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Map.Entry;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      if (!c.containsKey(ch)) {
        c.put(ch, 1);
      } else {
        c.put(ch, c.get(ch) + 1);
      }
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      if (c.containsKey(ch)) {
        c.put(ch, c.get(ch) + 1);
      } else {
        c.put(ch, 1);
      }
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}

[/JAVA]

Explanation:

* `import java.util.Scanner;` is used to import the `Scanner` class, which is used to read input from the user.
* `import java.util.Map;` and `import java.util.HashMap;` are used to import the `Map` and `HashMap` classes, which are used to store the counts of each character in the input string.
* `public class Solution {` declares a class called `Solution`, which contains the main method that will be executed when the program is run.
* `public static void main(String[] args) {` declares the main method, which takes an array of strings as input and returns nothing.
* `Scanner scanner = new Scanner(System.in);` creates a new `Scanner` object that reads input from the user.
* `String A = scanner.nextLine();` reads a line of input from the user and stores it in the `A` variable.
* `int N = A.length();` calculates the length of the input string and stores it in the `N` variable.
* `Map<Character, Integer> c = new HashMap<>();` creates a new `HashMap` object that maps each character in the input string to its count.
* `for (int i = 0; i < N; i++) {` loops through each character in the input string.
* `char ch = A.charAt(i);` gets the `i`th character from the input string.
* `if (c.containsKey(ch)) {` checks if the `ch` character is already in the `c` map.
* `c.put(ch, c.get(ch) + 1);` increments the count of the `ch` character in the `c` map.
* `} else {` if the `ch` character is not already in the `c` map.
* `c.put(ch, 1);` sets the count of the `ch` character to 1.
* `}`
* `}`
* `int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();` calculates the answer by first calculating the total number of pairs of characters in the input string using the formula `1 + N * (N - 1) / 2`, and then subtracting the number of pairs of characters that are the same using the formula `c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum()`.
* `System.out.println(ans);` prints the answer to the console.

Note: The `mapToInt` method is used to convert the `Integer` values in the `c` map to `int` values, and the `sum` method is used to sum up the values in the resulting `IntStream` object.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String A = sc.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            if (!c.containsKey(ch)) {
                c.put(ch, 1);
            } else {
                c.put(ch, c.get(ch) + 1);
            }
        }
        int ans = 1 + N * (N - 1) / 2 - sum(c.values());
        System.out.println(ans);
    }
    
    private static int sum(Set<Integer> values) {
        int sum = 0;
        for (int v : values) {
            sum += v * (v - 1) / 2;
        }
        return sum;
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      if (!c.containsKey(ch)) {
        c.put(ch, 1);
      } else {
        c.put(ch, c.get(ch) + 1);
      }
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

Explanation:

1. The `Scanner` class is used to read input from the user.
2. The `Map` interface is used to store the character counts.
3. The `HashMap` class is used to implement the `Map` interface.
4. The `charAt()` method is used to get the character at a specific index in the string.
5. The `containsKey()` method is used to check if a key is already present in the map.
6. The `put()` method is used to add a new key-value pair to the map.
7. The `get()` method is used to retrieve the value associated with a key.
8. The `values()` method is used to get the values in the map.
9. The `stream()` method is used to convert the values to a stream.
10. The `mapToInt()` method is used to map the values to integers.
11. The `sum()` method is used to get the sum of the integers.
12. The `println()` method is used to print the result to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

This is a straightforward conversion of the Python code to Java. The `input()` function in Python is replaced by `Scanner.nextLine()` in Java, and the `Counter` class is replaced by a `HashMap` in Java. The `values()` method in Python is replaced by `values().stream()` in Java, and the `sum()` method in Python is replaced by `sum()` in Java. The rest of the code is functionally identical.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String A = scanner.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> (v * (v - 1)) / 2).sum();
        System.out.println(ans);
    }
}
[/JAVA]

This is the Java code that is functionally identical to the Python code. It uses the `Scanner` class to read input from the user, and the `HashMap` class to store the counts of each character in the string. The `values()` method is used to get the values of the map, and the `stream()` method is used to convert the values to a stream, which is then used to calculate the sum of the values using the `mapToInt()` method and the `sum()` method. Finally, the result is printed to the console using `System.out.println()`.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().map(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      if (c.containsKey(ch)) {
        c.put(ch, c.get(ch) + 1);
      } else {
        c.put(ch, 1);
      }
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

This Java code implements the same logic as the Python code, with the following changes:

* The `from collections import Counter` statement is not needed in Java, as the `Map` class provides similar functionality.
* The `input()` function is replaced with `Scanner.nextLine()`, which reads a line of input from the console.
* The `len()` function is replaced with `String.length()`, which returns the length of a string.
* The `Counter` class is replaced with a `HashMap` to store the character counts.
* The `sum()` function is replaced with a stream pipeline that calculates the sum of the values in the map.
* The `//` operator is replaced with `/` to perform integer division.

Note that the Java code is more verbose than the Python code, as it includes explicit type declarations and uses more verbose syntax for some operations. However, the two codes are functionally identical and produce the same output for the same input.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String A = scanner.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        int ans = 1 + N * (N - 1) / 2 - sum(c.values());
        System.out.println(ans);
    }

    private static int sum(Collection<Integer> values) {
        int sum = 0;
        for (int v : values) {
            sum += v * (v - 1) / 2;
        }
        return sum;
    }
}
[/JAVA]

This code is functionally identical to the Python code, with the following changes:

* The `input()` function is replaced with `Scanner.nextLine()` to read input from the user.
* The `Counter` class is replaced with a `HashMap` to keep track of the frequency of each character in the input string.
* The `sum()` function is replaced with a custom `sum()` method that takes a `Collection` of `Integer` values and returns the sum of the values.
* The `print()` function is replaced with `System.out.println()` to print the output to the console.

Note that the `sum()` method is not a built-in Java method, so it needs to be defined separately.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String A = scanner.nextLine();
    int N = A.length();
    Map<Character, Integer> c = new HashMap<>();
    for (int i = 0; i < N; i++) {
      char ch = A.charAt(i);
      c.put(ch, c.getOrDefault(ch, 0) + 1);
    }
    int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]

This is the equivalent Java code to the given Python code. The `Scanner` class is used to read the input string, and the `HashMap` class is used to store the frequency of each character in the string. The `stream()` method is used to convert the `values()` collection of the `HashMap` to a stream, which is then used to calculate the sum of the products of the values and their differences. Finally, the result is printed to the console.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String A = scanner.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            if (c.containsKey(ch)) {
                c.put(ch, c.get(ch) + 1);
            } else {
                c.put(ch, 1);
            }
        }
        int ans = 1 + N * (N - 1) / 2 - sum(c.values());
        System.out.println(ans);
    }
    
    private static int sum(Set<Integer> values) {
        int sum = 0;
        for (int v : values) {
            sum += v * (v - 1) / 2;
        }
        return sum;
    }
}
[/JAVA]

This is the Java code equivalent to the Python code provided. It uses the same logic and data structures, with the exception of the `sum` function, which is implemented in Java using a `for` loop. The `sum` function is used to calculate the sum of the values in the `c` map, which is then used to calculate the final answer.

The `main` method is the driver class for the program, and it contains the logic for reading the input, calculating the answer, and printing the result. The `sum` method is a helper function that is used to calculate the sum of the values in the `c` map.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String A = sc.nextLine();
        int N = A.length();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < N; i++) {
            char ch = A.charAt(i);
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        int ans = 1 + N * (N - 1) / 2 - c.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
        System.out.println(ans);
    }
}
[/JAVA]

This is the Java code equivalent to the Python code. It uses the `Scanner` class to read input from the user, and the `HashMap` class to store the counts of each character in the input string. The `stream` API is used to calculate the sum of the products of each character's count and its position in the string. Finally, the result is printed to the console using `System.out.println()`.
======
  [JAVA]
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String input = scanner.nextLine();
    int length = input.length();
    Map<Character, Integer> counter = new HashMap<>();
    for (int i = 0; i < length; i++) {
      char c = input.charAt(i);
      counter.put(c, counter.getOrDefault(c, 0) + 1);
    }
    int ans = 1 + length * (length - 1) / 2 - counter.values().stream().mapToInt(v -> v * (v - 1) / 2).sum();
    System.out.println(ans);
  }
}
[/JAVA]
======
