  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int[] X = new int[M];
    int[] Y = new int[M];
    for (int i = 0; i < M; i++) {
      X[i] = scanner.nextInt();
      Y[i] = scanner.nextInt();
    }
    int[] count = new int[N + 1];
    int[] covered = new int[N + 1];
    for (int x : A) {
      count[x]++;
      int y = x - count[x] + 1;
      if (y > 0) {
        covered[y]++;
      }
    }
    int spell = 0;
    for (int i = 1; i <= N; i++) {
      if (covered[i] == 0) {
        spell++;
      }
    }
    for (int i = 0; i < M; i++) {
      int x = X[i];
      int y = Y[i];
      int before = A[x - 1];
      int after = y;
      A[x - 1] = y;
      int rem = before - count[before] + 1;
      count[before]--;
      int add = after - count[after] + 1;
      count[after]++;
      if (rem > 0) {
        covered[rem]--;
        if (covered[rem] == 0) {
          spell++;
        }
      }
      if (add > 0) {
        if (covered[add] == 0) {
          spell--;
        }
        covered[add]++;
      }
      System.out.println(spell);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int[] X = new int[M];
    int[] Y = new int[M];
    for (int i = 0; i < M; i++) {
      X[i] = sc.nextInt();
      Y[i] = sc.nextInt();
    }
    int[] count = new int[N + 1];
    int[] covered = new int[N + 1];
    for (int x : A) {
      count[x]++;
      int y = x - count[x] + 1;
      if (y > 0) {
        covered[y]++;
      }
    }
    int spell = Arrays.stream(covered, 1, N + 1).filter(i -> i == 0).count();
    for (int i = 0; i < M; i++) {
      int x = X[i];
      int y = Y[i];
      int before = A[x - 1];
      int after = y;
      A[x - 1] = y;
      int rem = before - count[before] + 1;
      count[before]--;
      int add = after - count[after] + 1;
      count[after]++;
      if (rem > 0) {
        covered[rem]--;
        if (covered[rem] == 0) {
          spell++;
        }
      }
      if (add > 0) {
        if (covered[add] == 0) {
          spell--;
        }
        covered[add]++;
      }
      System.out.println(spell);
    }
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = sc.nextInt();
            Y[i] = sc.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = Arrays.stream(covered, 1, covered.length).filter(x -> x == 0).sum();
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = Arrays.stream(covered, 1, covered.length).filter(x -> x == 0).count();
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before] -= 1;
            int add = after - count[after] + 1;
            count[after] += 1;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = sc.nextInt();
    }
    int[] X = new int[M];
    int[] Y = new int[M];
    for (int i = 0; i < M; i++) {
      X[i] = sc.nextInt();
      Y[i] = sc.nextInt();
    }
    int[] count = new int[N + 1];
    int[] covered = new int[N + 1];
    for (int x : A) {
      count[x]++;
      int y = x - count[x] + 1;
      if (y > 0) {
        covered[y]++;
      }
    }
    int spell = 0;
    for (int i = 1; i <= N; i++) {
      if (covered[i] == 0) {
        spell++;
      }
    }
    for (int i = 0; i < M; i++) {
      int x = X[i];
      int y = Y[i];
      int before = A[x - 1];
      int after = y;
      A[x - 1] = y;
      int rem = before - count[before] + 1;
      count[before]--;
      int add = after - count[after] + 1;
      count[after]++;
      if (rem > 0) {
        covered[rem]--;
        if (covered[rem] == 0) {
          spell++;
        }
      }
      if (add > 0) {
        if (covered[add] == 0) {
          spell--;
        }
        covered[add]++;
      }
      System.out.println(spell);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}

[
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = sc.nextInt();
            Y[i] = sc.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[N];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    int[] X = new int[M];
    int[] Y = new int[M];
    for (int i = 0; i < M; i++) {
      X[i] = scanner.nextInt();
      Y[i] = scanner.nextInt();
    }
    int[] count = new int[N + 1];
    int[] covered = new int[N + 1];
    for (int i = 0; i < N; i++) {
      count[A[i]]++;
      int y = A[i] - count[A[i]] + 1;
      if (y > 0) {
        covered[y]++;
      }
    }
    int spell = 0;
    for (int i = 1; i <= N; i++) {
      if (covered[i] == 0) {
        spell++;
      }
    }
    for (int i = 0; i < M; i++) {
      int x = X[i];
      int y = Y[i];
      int before = A[x - 1];
      int after = y;
      A[x - 1] = y;
      int rem = before - count[before] + 1;
      count[before]--;
      int add = after - count[after] + 1;
      count[after]++;
      if (rem > 0) {
        covered[rem]--;
        if (covered[rem] == 0) {
          spell++;
        }
      }
      if (add > 0) {
        if (covered[add] == 0) {
          spell--;
        }
        covered[add]++;
      }
      System.out.println(spell);
    }
  }
}
[/JAVA
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[] A = new int[N];
    int[] X = new int[M];
    int[] Y = new int[M];
    for (int i = 0; i < N; i++) {
      A[i] = scanner.nextInt();
    }
    for (int i = 0; i < M; i++) {
      X[i] = scanner.nextInt();
      Y[i] = scanner.nextInt();
    }
    int[] count = new int[N + 1];
    int[] covered = new int[N + 1];
    for (int x : A) {
      count[x]++;
      int y = x - count[x] + 1;
      if (y > 0) {
        covered[y]++;
      }
    }
    int spell = IntStream.range(1, N + 1).filter(i -> covered[i] == 0).sum();
    for (int i = 0; i < M; i++) {
      int x = X[i];
      int y = Y[i];
      int before = A[x - 1];
      int after = y;
      A[x - 1] = y;
      int rem = before - count[before] + 1;
      count[before]--;
      int add = after - count[after] + 1;
      count[after]++;
      if (rem > 0) {
        covered[rem]--;
        if (covered[rem] == 0) {
          spell++;
        }
      }
      if (add > 0) {
        if (covered[add] == 0) {
          spell--;
        }
        covered[add]++;
      }
      System.out.println(spell);
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = IntStream.range(1, N + 1).filter(i -> covered[i] == 0).sum();
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int x : A) {
            count[x]++;
            int y = x - count[x] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < M; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        int[] X = new int[M];
        int[] Y = new int[M];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        for (int i = 0; i < M; i++) {
            X[i] = sc.nextInt();
            Y[i] = sc.nextInt();
        }
        int[] count = new int[N + 1];
        int[] covered = new int[N + 1];
        for (int i = 0; i < N; i++) {
            count[A[i]]++;
            int y = A[i] - count[A[i]] + 1;
            if (y > 0) {
                covered[y]++;
            }
        }
        int spell = 0;
        for (int i = 1; i <= N; i++) {
            if (covered[i] == 0) {
                spell++;
            }
        }
        for (int i = 0; i < M; i++) {
            int x = X[i];
            int y = Y[i];
            int before = A[x - 1];
            int after = y;
            A[x - 1] = y;
            int rem = before - count[before] + 1;
            count[before]--;
            int add = after - count[after] + 1;
            count[after]++;
            if (rem > 0) {
                covered[rem]--;
                if (covered[rem] == 0) {
                    spell++;
                }
            }
            if (add > 0) {
                if (covered[add] == 0) {
                    spell--;
                }
                covered[add]++;
            }
            System.out.println(spell);
        }
    }
}
[/JAVA]
======
