  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.function.Function;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                t[i][j] = scanner.nextInt();
            }
        }
        int n = scanner.nextInt();
        System.out.println(f(1, 3, n, t));
    }

    private static int f(int l, int r, int nums, int[][] t) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1, t) + f(mid, r, nums - 1, t) + t[l][r];
        int ans2 = f(l, r, nums - 1, t) * 2 + f(r, l, nums - 1, t) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (int v : Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray()) {
                t[i][j] = v;
                j++;
            }
        }
        int n = scanner.nextInt();
        scanner.close();

        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
                int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };

        System.out.println(f.apply(1, 3, n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (String v : scanner.nextLine().split(" ")) {
        t[i][j] = Integer.parseInt(v);
        j++;
      }
    }
    int n = scanner.nextInt();
    IntBinaryOperator f = new IntBinaryOperator() {
      @Override
      public int applyAsInt(int l, int r) {
        int mid = 6 - l - r;
        if (r == l) {
          return 0;
        }
        int ans1 = applyAsInt(l, mid, n - 1) + applyAsInt(mid, r, n - 1) + t[l][r];
        int ans2 = applyAsInt(l, r, n - 1) * 2 + applyAsInt(r, l, n - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
      }
    };
    System.out.println(f.applyAsInt(1, 3, n));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (int v : sc.nextLine().split(" ")) {
        t[i][j] = Integer.parseInt(v);
        j++;
      }
    }
    int n = sc.nextInt();
    Function<Integer, Integer> f = new Function<Integer, Integer>() {
      @Override
      public Integer apply(Integer nums) {
        int l = 1, r = 3, mid = 6 - l - r;
        if (nums == 0) {
          return 0;
        }
        if (l == r) {
          return 0;
        }
        int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
        int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
      }
    };
    System.out.println(f.apply(n));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (int v : IntStream.of(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt)) {
                t[i][j] = v;
                j++;
            }
        }
        int n = scanner.nextInt();
        System.out.println(f(1, 3, n));
    }

    private static int f(int l, int r, int nums) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1) + f(mid, r, nums - 1) + t[l][r];
        int ans2 = f(l, r, nums - 1) * 2 + f(r, l, nums - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = scanner.nextInt();
        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = apply(nums - 1) + apply(nums - 1) + t[l][r];
                int ans2 = apply(nums - 1) * 2 + apply(nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                t[i][j] = scanner.nextInt();
            }
        }
        int n = scanner.nextInt();
        System.out.println(f(1, 3, n, t));
    }

    private static int f(int l, int r, int nums, int[][] t) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1, t) + f(mid, r, nums - 1, t) + t[l][r];
        int ans2 = f(l, r, nums - 1, t) * 2 + f(r, l, nums - 1, t) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (int v : IntStream.of(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt)) {
        t[i][j] = v;
        j++;
      }
    }
    int n = scanner.nextInt();
    scanner.close();

    System.out.println(f(1, 3, n, t));
  }

  private static int f(int l, int r, int nums, int[][] t) {
    int mid = 6 - l - r;
    if (nums == 0) {
      return 0;
    }
    if (l == r) {
      return 0;
    }
    int ans1 = f(l, mid, nums - 1, t) + f(mid, r, nums - 1, t) + t[l][r];
    int ans2 = f(l, r, nums - 1, t) * 2 + f(r, l, nums - 1, t) + t[l][mid] + t[mid][r];
    return Math.min(ans1, ans2);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = scanner.nextInt();
        scanner.close();

        Function<Integer, Integer> memo = new IntFunction<Integer>() {
            private int[][] memo = new int[4][4];

            @Override
            public Integer apply(Integer t) {
                if (t == 0) {
                    return 0;
                }
                if (t == 1 || t == 2) {
                    return 1;
                }
                if (t == 3) {
                    return 2;
                }
                if (t == 4) {
                    return 3;
                }
                if (t == 5) {
                    return 4;
                }
                if (t == 6) {
                    return 5;
                }
                if (t == 7) {
                    return 6;
                }
                if (t == 8) {
                    return 7;
                }
                if (t == 9) {
                    return 8;
                }
                if (t == 10) {
                    return 9;
                }
                return -1;
            }
        };

        System.out.println(f(1, 3, n, memo));
    }

    public static int f(int l, int r, int nums, Function<Integer, Integer> memo) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1, memo) + f(mid, r, nums - 1, memo) + t[l][r];
        int ans2 = f(l, r, nums - 1, memo) * 2 + f(r, l, nums - 1, memo) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.function.Function;
import java.util.function.IntFunction;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = scanner.nextInt();
        int[][][] memo = new int[4][4][n + 1];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                Arrays.fill(memo[i][j], -1);
            }
        }
        System.out.println(f(1, 3, n, memo));
    }

    private static int f(int l, int r, int nums, int[][][] memo) {
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int mid = 6 - l - r;
        if (memo[l][r][nums] != -1) {
            return memo[l][r][nums];
        }
        int ans1 = f(l, mid, nums - 1, memo) + f(mid, r, nums - 1, memo) + t[l][r];
        int ans2 = f(l, r, nums - 1, memo) * 2 + f(r, l, nums - 1, memo) + t[l][mid] + t[mid][r];
        memo[l][r][nums] = Math.min(ans1, ans2);
        return memo[l][r][nums];
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = scanner.nextInt();
        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
                int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (int v : IntStream.of(sc.nextLine().split(" ")).mapToInt(Integer::parseInt)) {
        t[i][j] = v;
        j++;
      }
    }
    int n = sc.nextInt();

    int[][] memo = new int[4][4];
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        memo[i][j] = -1;
      }
    }

    System.out.println(f(1, 3, n, memo));
  }

  private static int f(int l, int r, int nums, int[][] memo) {
    if (nums == 0) {
      return 0;
    }
    if (l == r) {
      return 0;
    }
    int mid = 6 - l - r;
    if (memo[l][r] != -1) {
      return memo[l][r];
    }
    int ans1 = f(l, mid, nums - 1, memo) + f(mid, r, nums - 1, memo) + t[l][r];
    int ans2 = f(l, r, nums - 1, memo) * 2 + f(r, l, nums - 1, memo) + t[l][mid] + t[mid][r];
    memo[l][r] = Math.min(ans1, ans2);
    return memo[l][r];
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.Collectors;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = scanner.nextInt();
        System.out.println(f(1, 3, n));
    }

    public static int f(int l, int r, int nums) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1) + f(mid, r, nums - 1) + t[l][r];
        int ans2 = f(l, r, nums - 1) * 2 + f(r, l, nums - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.IntFunction;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                t[i][j] = sc.nextInt();
            }
        }
        int n = sc.nextInt();
        IntFunction<Integer> f = new IntFunction<Integer>() {
            @Override
            public Integer apply(int nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
                int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(1, 3, n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.function.Function;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (int v : IntStream.of(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt)) {
        t[i][j] = v;
        j++;
      }
    }
    int n = scanner.nextInt();
    Function<Integer, Integer> f = new Function<Integer, Integer>() {
      @Override
      public Integer apply(Integer nums) {
        int l = 1, r = 3;
        int mid = 6 - l - r;
        if (nums == 0) {
          return 0;
        }
        if (l == r) {
          return 0;
        }
        int ans1 = apply(nums - 1) + apply(nums - 1) + t[l][r];
        int ans2 = apply(nums - 1) * 2 + apply(nums - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
      }
    };
    System.out.println(f.apply(n));
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String s : scanner.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(s);
                j++;
            }
        }
        int n = scanner.nextInt();
        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = apply(nums - 1) + apply(nums - 1) + t[l][r];
                int ans2 = apply(nums - 1) * 2 + apply(nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String v : sc.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(v);
                j++;
            }
        }
        int n = sc.nextInt();
        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
                int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(n));
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (int v : scanner.nextLine().split(" ").stream().mapToInt(Integer::parseInt).toArray()) {
                t[i][j] = v;
                j++;
            }
        }
        int n = scanner.nextInt();
        System.out.println(f(1, 3, n));
    }

    private static int f(int l, int r, int nums) {
        int mid = 6 - l - r;
        if (nums == 0) {
            return 0;
        }
        if (l == r) {
            return 0;
        }
        int ans1 = f(l, mid, nums - 1) + f(mid, r, nums - 1) + t[l][r];
        int ans2 = f(l, r, nums - 1) * 2 + f(r, l, nums - 1) + t[l][mid] + t[mid][r];
        return Math.min(ans1, ans2);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int[][] t = new int[4][4];
    for (int i = 1; i < 4; i++) {
      int j = 1;
      for (int v : IntStream.of(sc.nextLine().split(" ")).mapToInt(Integer::parseInt)) {
        t[i][j] = v;
        j++;
      }
    }
    int n = sc.nextInt();
    System.out.println(f(1, 3, n, t));
  }

  private static int f(int l, int r, int nums, int[][] t) {
    int mid = 6 - l - r;
    if (nums == 0) {
      return 0;
    }
    if (l == r) {
      return 0;
    }
    int ans1 = f(l, mid, nums - 1, t) + f(mid, r, nums - 1, t) + t[l][r];
    int ans2 = f(l, r, nums - 1, t) * 2 + f(r, l, nums - 1, t) + t[l][mid] + t[mid][r];
    return Math.min(ans1, ans2);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.function.Function;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 1; i < 4; i++) {
            int j = 1;
            for (String s : sc.nextLine().split(" ")) {
                t[i][j] = Integer.parseInt(s);
                j++;
            }
        }
        int n = sc.nextInt();
        Function<Integer, Integer> f = new Function<Integer, Integer>() {
            @Override
            public Integer apply(Integer nums) {
                int l = 1, r = 3, mid = 6 - l - r;
                if (nums == 0) {
                    return 0;
                }
                if (l == r) {
                    return 0;
                }
                int ans1 = f.apply(l, mid, nums - 1) + f.apply(mid, r, nums - 1) + t[l][r];
                int ans2 = f.apply(l, r, nums - 1) * 2 + f.apply(r, l, nums - 1) + t[l][mid] + t[mid][r];
                return Math.min(ans1, ans2);
            }
        };
        System.out.println(f.apply(n));
    }
}
[/JAVA]
======
