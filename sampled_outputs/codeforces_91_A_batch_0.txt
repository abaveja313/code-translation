  [JAVA]
import java.io.*;
import java.util.*;

class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s1 = br.readLine().trim();
        String s2 = br.readLine().trim();
        int n = s1.length();
        int[][] x = new int[26][];
        for (int i = 0; i < n; i++) {
            s1.charAt(i) -= 97;
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                x[s1[j]].add(i * n + j);
            }
        }
        List<List<Integer>> dp = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> dp0 = new ArrayList<>();
            for (int j = 0; j < 26; j++) {
                if (x[j].isEmpty()) {
                    dp0.add(-1);
                } else {
                    dp0.add(x[j].get(bisect.bisect_right(x[j], i)) - i);
                }
            }
            dp.add(dp0);
        }
        int s0 = s2.charAt(0) - 97;
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1[j]) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n].get(s2.charAt(i) - 97);
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s1 = scanner.nextLine().trim();
        String s2 = scanner.nextLine().trim();
        int n = s1.length();
        int[][] x = new int[26][n];
        for (int i = 0; i < n; i++) {
            s1.charAt(i) -= 97;
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                x[s1.charAt(j)][i * n + j] = i * n + j;
            }
        }
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            int[] dp0 = new int[26];
            for (int j = 0; j < 26; j++) {
                if (x[j].length == 0) {
                    dp0[j] = -1;
                } else {
                    dp0[j] = x[j][Arrays.binarySearch(x[j], i)] - i;
                }
            }
            dp[i] = dp0;
        }
        int s0 = s2.charAt(0) - 97;
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j)) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n][s2.charAt(i) - 97];
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine().trim();
    String s2 = sc.nextLine().trim();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1.charAt(j)].add(i * n + j);
      }
    }
    ArrayList<ArrayList<Integer>> dp = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      ArrayList<Integer> dp0 = new ArrayList<>();
      for (int j = 0; j < 26; j++) {
        if (x[j].isEmpty()) {
          dp0.add(-1);
        } else {
          dp0.add(x[j].get(bisect.bisect_right(x[j], i)) - i);
        }
      }
      dp.add(dp0);
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1.charAt(j)) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp.get(j % n).get(s2.charAt(i) - 97);
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s1 = br.readLine().trim();
        String s2 = br.readLine().trim();
        int n = s1.length();
        List<Integer>[] x = new ArrayList[26];
        for (int i = 0; i < 26; i++) {
            x[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            int s1i = s1.charAt(i) - 97;
            x[s1i].add(i);
        }
        List<List<Integer>> dp = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> dp0 = new ArrayList<>();
            for (int j = 0; j < 26; j++) {
                if (x[j].isEmpty()) {
                    dp0.add(-1);
                } else {
                    dp0.add(x[j].get(bisect(x[j], i)) - i);
                }
            }
            dp.add(dp0);
        }
        int s0 = s2.charAt(0) - 97;
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j) - 97) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp.get(j % n).get(s2.charAt(i) - 97);
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }

    private static int bisect(List<Integer> arr, int x) {
        int lo = 0;
        int hi = arr.size() - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (arr.get(mid) < x) {
                lo = mid + 1;
            } else if (arr.get(mid) > x) {
                hi = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}

[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s1 = br.readLine().trim();
        String s2 = br.readLine().trim();
        int n = s1.length();
        int[][] x = new int[26][];
        for (int i = 0; i < n; i++) {
            int idx = s1.charAt(i) - 'a';
            if (x[idx] == null) {
                x[idx] = new int[1];
            }
            x[idx][0] = i;
        }
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                if (x[j] == null || x[j].length == 0) {
                    dp[i][j] = -1;
                } else {
                    dp[i][j] = x[j][Arrays.binarySearch(x[j], i)] - i;
                }
            }
        }
        int s0 = s2.charAt(0) - 'a';
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j)) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n][s2.charAt(i) - 'a'];
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int[] s1 = new int[n];
    int[] s2 = new int[n];
    for (int i = 0; i < n; i++) {
      s1[i] = sc.nextInt();
    }
    for (int i = 0; i < n; i++) {
      s2[i] = sc.nextInt();
    }
    int[][] x = new int[26][n];
    for (int i = 0; i < n; i++) {
      s1[i] -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]][j] = i * n + j;
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 26; j++) {
        if (x[j].length == 0) {
          dp[i][j] = -1;
        } else {
          dp[i][j] = x[j][Arrays.binarySearch(x[j], i)] - i;
        }
      }
    }
    int s0 = s2[0] - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1[j]) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < n; i++) {
      int k = dp[j % n][s2[i] - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine().trim();
        String s2 = sc.nextLine().trim();
        int n = s1.length();
        int[][] x = new int[26][];
        for (int i = 0; i < n; i++) {
            s1.charAt(i) -= 97;
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                x[s1[j]].append(i * n + j);
            }
        }
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            int[] dp0 = new int[26];
            for (int j = 0; j < 26; j++) {
                if (x[j].isEmpty()) {
                    dp0[j] = -1;
                } else {
                    dp0[j] = x[j][bisect.bisect_right(x[j], i)] - i;
                }
            }
            dp[i] = dp0;
        }
        int s0 = s2.charAt(0) - 97;
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1[j]) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n][s2.charAt(i) - 97];
            if (k ^ -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.io.*;

public class Solution {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String s1 = br.readLine().trim();
    String s2 = br.readLine().trim();
    int n = s1.length();
    List<List<Integer>> x = new ArrayList<>();
    for (int i = 0; i < 26; i++) {
      x.add(new ArrayList<>());
    }
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x.get(s1.charAt(j)).add(i * n + j);
      }
    }
    List<List<Integer>> dp = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> dp0 = new ArrayList<>();
      for (int j = 0; j < 26; j++) {
        if (x.get(j).isEmpty()) {
          dp0.add(-1);
        } else {
          dp0.add(x.get(j).get(bisect.bisectRight(x.get(j), i)) - i);
        }
      }
      dp.add(dp0);
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (!(s0 ^ s1.charAt(j))) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp.get(j % n).get(s2.charAt(i) - 97);
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s1 = scanner.nextLine();
        String s2 = scanner.nextLine();
        int n = s1.length();
        List<List<Integer>> x = new ArrayList<>(26);
        for (int i = 0; i < 26; i++) {
            x.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            int index = s1.charAt(i) - 'a';
            x.get(index).add(i);
        }
        List<List<Integer>> dp = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            List<Integer> dp0 = new ArrayList<>(26);
            for (int j = 0; j < 26; j++) {
                if (x.get(j).isEmpty()) {
                    dp0.add(-1);
                } else {
                    dp0.add(x.get(j).get(Collections.binarySearch(x.get(j), i)));
                }
            }
            dp.add(dp0);
        }
        int s0 = s2.charAt(0) - 'a';
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j)) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp.get(j % n).get(s2.charAt(i) - 'a');
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine();
    String s2 = sc.nextLine();
    int n = s1.length();
    int[][] x = new int[26][n];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]].append(i * n + j);
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      int[] dp0 = new int[26];
      for (int j = 0; j < 26; j++) {
        if (x[j].length == 0) {
          dp0[j] = -1;
        } else {
          dp0[j] = x[j][Arrays.binarySearch(x[j], i)] - i;
        }
      }
      dp[i] = dp0;
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1[j]) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine();
    String s2 = sc.nextLine();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      int index = s1.charAt(i) - 'a';
      if (x[index] == null) {
        x[index] = new int[1];
      }
      x[index][0] = i;
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 26; j++) {
        if (x[j] == null) {
          dp[i][j] = -1;
        } else {
          int k = Arrays.binarySearch(x[j], i);
          if (k < 0) {
            dp[i][j] = -1;
          } else {
            dp[i][j] = x[j][k] - i;
          }
        }
      }
    }
    int s0 = s2.charAt(0) - 'a';
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1.charAt(j)) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 'a'];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine().trim();
    String s2 = sc.nextLine().trim();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]].append(i * n + j);
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      int[] dp0 = new int[26];
      for (int j = 0; j < 26; j++) {
        if (x[j].length == 0) {
          dp0[j] = -1;
        } else {
          dp0[j] = x[j][bisect_right(x[j], i)] - i;
        }
      }
      dp[i] = dp0;
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (!s0 ^ s1[j]) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }

  public static int bisect_right(int[] arr, int x) {
    int lo = 0, hi = arr.length - 1;
    while (lo <= hi) {
      int mid = (lo + hi) / 2;
      if (arr[mid] > x) {
        hi = mid - 1;
      } else if (arr[mid] < x) {
        lo = mid + 1;
      } else {
        return mid;
      }
    }
    return lo;
  }
}

[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    String s1 = br.readLine().trim();
    String s2 = br.readLine().trim();

    int n = s1.length();
    int[][] x = new int[26][];

    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }

    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]].add(i * n + j);
      }
    }

    List<List<Integer>> dp = new ArrayList<>();

    for (int i = 0; i < n; i++) {
      List<Integer> dp0 = new ArrayList<>();
      for (int j = 0; j < 26; j++) {
        if (x[j].isEmpty()) {
          dp0.add(-1);
        } else {
          dp0.add(x[j].get(bisect.bisect_right(x[j], i)) - i);
        }
      }
      dp.add(dp0);
    }

    int s0 = s2.charAt(0) - 97;
    boolean f = false;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1[j]) {
        f = true;
        break;
      }
    }

    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }

    if (ans == 0) {
      ans = j / n + 1;
    }

    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine().trim();
        String s2 = sc.nextLine().trim();
        int n = s1.length();
        int[] x = new int[26];
        for (int i = 0; i < n; i++) {
            x[s1.charAt(i) - 'a'] = i;
        }
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                if (x[j] == -1) {
                    dp[i][j] = -1;
                } else {
                    dp[i][j] = x[j][Arrays.binarySearch(x[j], i)] - i;
                }
            }
        }
        int s0 = s2.charAt(0) - 'a';
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j) - 'a') {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < n; i++) {
            int k = dp[j % n][s2.charAt(i) - 'a'];
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine().trim();
    String s2 = sc.nextLine().trim();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        if (x[s1[j]] == null) {
          x[s1[j]] = new int[1];
        }
        x[s1[j]][0] = i * n + j;
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < 26; j++) {
        if (x[j] == null || x[j].length == 0) {
          dp[i][j] = -1;
        } else {
          dp[i][j] = x[j][Arrays.binarySearch(x[j], i)];
        }
      }
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1.charAt(j)) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.*;
import java.io.*;

class Solution {
  public static void main(String[] args) throws IOException {
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    String s1 = in.readLine().trim();
    String s2 = in.readLine().trim();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]].append(i * n + j);
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      int[] dp0 = new int[26];
      for (int j = 0; j < 26; j++) {
        if (x[j].isEmpty()) {
          dp0[j] = -1;
        } else {
          dp0[j] = x[j][bisect_right(x[j], i)] - i;
        }
      }
      dp[i] = dp0;
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1[j]) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }

  private static int bisect_right(int[] arr, int target) {
    int lo = 0;
    int hi = arr.length - 1;
    while (lo <= hi) {
      int mid = lo + (hi - lo) / 2;
      if (arr[mid] >= target) {
        hi = mid - 1;
      } else {
        lo = mid + 1;
      }
    }
    return lo;
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s1 = sc.nextLine().trim();
    String s2 = sc.nextLine().trim();
    int n = s1.length();
    int[][] x = new int[26][];
    for (int i = 0; i < n; i++) {
      s1.charAt(i) -= 97;
    }
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < n; j++) {
        x[s1[j]].append(i * n + j);
      }
    }
    int[][] dp = new int[n][26];
    for (int i = 0; i < n; i++) {
      int[] dp0 = new int[26];
      for (int j = 0; j < 26; j++) {
        if (x[j].isEmpty()) {
          dp0[j] = -1;
        } else {
          dp0[j] = x[j][bisect.bisect_right(x[j], i)] - i;
        }
      }
      dp[i] = dp0;
    }
    int s0 = s2.charAt(0) - 97;
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1[j]) {
        f = 1;
        break;
      }
    }
    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp[j % n][s2.charAt(i) - 97];
      if (k ^ -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }
    if (ans == 0) {
      ans = j / n + 1;
    }
    System.out.println(ans);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine().trim();
        String s2 = sc.nextLine().trim();
        int n = s1.length();
        int[][] x = new int[26][];
        for (int i = 0; i < n; i++) {
            s1.charAt(i) -= 97;
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                x[s1[j]].append(i * n + j);
            }
        }
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                if (x[j].isEmpty()) {
                    dp[i][j] = -1;
                } else {
                    dp[i][j] = x[j][bisect.bisect_right(x[j], i)] - i;
                }
            }
        }
        int s0 = s2.charAt(0) - 97;
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1[j]) {
                f = 1;
                break;
            }
        }
        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n][s2.charAt(i) - 97];
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }
        if (ans == 0) {
            ans = j / n + 1;
        }
        System.out.println(ans);
    }
}
[/JAVA]
======
  [JAVA]
import java.io.*;
import java.util.*;

class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        String s1 = in.readLine().trim();
        String s2 = in.readLine().trim();
        int n = s1.length();

        int[][] x = new int[26][];
        for (int i = 0; i < n; i++) {
            s1.charAt(i) - 'a';
        }
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                x[s1.charAt(j) - 'a'].append(i * n + j);
            }
        }

        List<List<Integer>> dp = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> dp0 = new ArrayList<>();
            for (int j = 0; j < 26; j++) {
                if (x[j].isEmpty()) {
                    dp0.add(-1);
                } else {
                    dp0.add(x[j].get(bisect.bisect_right(x[j], i)) - i);
                }
            }
            dp.add(dp0);
        }

        int s0 = s2.charAt(0) - 'a';
        int f = 0;
        for (int j = 0; j < n; j++) {
            if (s0 ^ s1.charAt(j)) {
                f = 1;
                break;
            }
        }

        int ans = 0;
        for (int i = 1; i < s2.length(); i++) {
            int k = dp[j % n].get(s2.charAt(i) - 'a');
            if (k != -1 && f) {
                j += k;
            } else {
                ans = -1;
                break;
            }
        }

        if (ans == 0) {
            ans = j / n + 1;
        }

        System.out.println(ans);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String s1 = scanner.nextLine();
    String s2 = scanner.nextLine();
    int n = s1.length();

    List<List<Integer>> x = new ArrayList<>();
    for (int i = 0; i < 26; i++) {
      x.add(new ArrayList<>());
    }

    for (int i = 0; i < n; i++) {
      int index = s1.charAt(i) - 'a';
      x.get(index).add(i);
    }

    List<List<Integer>> dp = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      List<Integer> dp0 = new ArrayList<>();
      for (int j = 0; j < 26; j++) {
        if (x.get(j).isEmpty()) {
          dp0.add(-1);
        } else {
          dp0.add(x.get(j).get(bisect(x.get(j), i)) - i);
        }
      }
      dp.add(dp0);
    }

    int s0 = s2.charAt(0) - 'a';
    int f = 0;
    for (int j = 0; j < n; j++) {
      if (s0 ^ s1.charAt(j)) {
        f = 1;
        break;
      }
    }

    int ans = 0;
    for (int i = 1; i < s2.length(); i++) {
      int k = dp.get(j % n).get(s2.charAt(i) - 'a');
      if (k != -1 && f) {
        j += k;
      } else {
        ans = -1;
        break;
      }
    }

    if (ans == 0) {
      ans = j / n + 1;
    }

    System.out.println(ans);
  }

  private static int bisect(List<Integer> x, int i) {
    int lo = 0;
    int hi = x.size() - 1;
    while (lo <= hi) {
      int mid = (lo + hi) / 2;
      if (x.get(mid) > i) {
        hi = mid - 1;
      } else if (x.get(mid) < i) {
        lo = mid + 1;
      } else {
        return mid;
      }
    }
    return lo;
  }
}

[/JAVA]
======
