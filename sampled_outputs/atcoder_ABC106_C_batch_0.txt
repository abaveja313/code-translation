  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.Math;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.StreamSupport;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.ThreadLocal;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.StampedLock.ReadLock;
import java.util.concurrent.locks.StampedLock.WriteLock;
import java.util.concurrent.locks.StampedLock.Stamp;
import java.util.concurrent.locks.StampedLock.StampedLockException;
import java.util.
======
  [JAVA]
import java.util.*;
import java.io.*;
import java.math.*;

class Solution {
    static final int inf = 100000000;
    static final double eps = 1.0 / 1000000000;
    static final int mod = 1000000007;
    static final int[][] dd = new int[][] {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    static final int[][] ddn = new int[][] {{-1, 0}, {-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}};

    static int[] LI() {
        return Arrays.stream(new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    static int[] LI_() {
        return Arrays.stream(new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ")).map(s -> Integer.parseInt(s) - 1).toArray();
    }

    static double[] LF() {
        return Arrays.stream(new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ")).mapToDouble(Double::parseDouble).toArray();
    }

    static String[] LS() {
        return new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
    }

    static int I() {
        return Integer.parseInt(new BufferedReader(new InputStreamReader(System.in)).readLine());
    }

    static double F() {
        return Double.parseDouble(new BufferedReader(new InputStreamReader(System.in)).readLine());
    }

    static String S() {
        return new BufferedReader(new InputStreamReader(System.in)).readLine();
    }

    static void pf(String s) {
        System.out.print(s);
    }

    public static void main(String[] args) {
        String s = S();
        int k = I();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }

======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s = sc.nextLine();
    int k = sc.nextInt();
    int l = 0;
    for (int i = 0; i < s.length(); i++) {
      if (s.charAt(i) != '1') {
        break;
      }
      l++;
    }
    if (l >= k) {
      System.out.println(1);
    } else {
      System.out.println(s.charAt(l));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.io.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int l = 0;
        String s = sc.next();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

class Solution {
    static int[] dd = new int[] { -1, 0, 1, 0 };
    static int[] ddn = new int[] { -1, -1, 0, 1, 1, 1, 0, -1 };

    static int[] LI() {
        return Arrays.stream(System.in.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    static int[] LI_() {
        return Arrays.stream(System.in.readLine().split(" ")).map(x -> Integer.parseInt(x) - 1).toArray();
    }

    static double[] LF() {
        return Arrays.stream(System.in.readLine().split(" ")).mapToDouble(Double::parseDouble).toArray();
    }

    static String[] LS() {
        return System.in.readLine().split(" ");
    }

    static int I() {
        return Integer.parseInt(System.in.readLine());
    }

    static double F() {
        return Double.parseDouble(System.in.readLine());
    }

    static String S() {
        return System.in.readLine();
    }

    static void pf(String s) {
        System.out.print(s);
    }

    public static void main(String[] args) {
        String s = S();
        int k = I();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            return 1;
        }
        return s.charAt(l);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;
import java.util.Arrays;

public class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s = sc.nextLine();
    int k = sc.nextInt();
    int l = 0;
    for (int i = 0; i < s.length(); i++) {
      if (s.charAt(i) != '1') {
        break;
      }
      l++;
    }
    if (l >= k) {
      System.out.println(1);
    } else {
      System.out.println(s.charAt(l));
    }
  }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.math.*;
import java.lang.Math;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.io.*;
import java.math.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
    static int[] dd = { -1, 0, 1, 0 };
    static int[] ddn = { -1, -1, 0, 1, 1, 1, 0, -1 };

    static int[] LI() {
        String[] tokens = new String[0];
        try {
            tokens = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        } catch (IOException e) {
            e.printStackTrace();
        }
        int[] res = new int[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            res[i] = Integer.parseInt(tokens[i]);
        }
        return res;
    }

    static int[] LI_() {
        int[] res = LI();
        for (int i = 0; i < res.length; i++) {
            res[i]--;
        }
        return res;
    }

    static double[] LF() {
        String[] tokens = new String[0];
        try {
            tokens = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        } catch (IOException e) {
            e.printStackTrace();
        }
        double[] res = new double[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            res[i] = Double.parseDouble(tokens[i]);
        }
        return res;
    }

    static String[] LS() {
        String[] tokens = new String[0];
        try {
            tokens = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return tokens;
    }

    static int I() {
        int res = 0;
        try {
            res = Integer.parseInt(new BufferedReader(new InputStreamReader(System.in)).readLine());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }

    static double F() {
        double res = 0.0;
        try {
            res = Double.parseDouble(new BufferedReader(new InputStreamReader(System.in)).readLine());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return res;
    }

    static String S() {
        String res = "";
        try {
            res = new BufferedReader(new InputStreamReader(System.in)).readLine
======
  [JAVA]
import java.util.*;
import java.io.*;
import java.math.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        String s = sc.next();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

public class Solution {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream stream) {
            try {
                br = new BufferedReader(new InputStreamReader(stream));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    static class PrintWriter {
        BufferedWriter bw;

        PrintWriter(OutputStream stream) {
            try {
                bw = new BufferedWriter(new OutputStreamWriter(stream));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        void print(Object object) {
            try {
                bw.write(object.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        void println(Object object) {
            try {
                bw.write(object.toString() + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        void flush() {
            try {
                bw.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        FastScanner scanner = new FastScanner(System.in);
        PrintWriter writer = new PrintWriter(System.out);
        String s = scanner.next();
        int k = scanner.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            writer.println(1);
        } else {
            writer.println(s.charAt(l));
        }
        writer.flush();
    }
}

[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}

[/JAVA]
======
  [JAVA]
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.math.*;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
  [JAVA]
import java.util.*;
import java.lang.*;
import java.io.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
[/JAVA]
======
