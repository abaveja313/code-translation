  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];

    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + P(i + 1, j + 1, DP)) % M;
      }
    }

    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
      for (int j = 0; j < i + 1; j++) {
        X[i] = (X[i] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }

    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }

    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP) + P(n - k, k, DP)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      for (int j = 1; j <= i; j++) {
        P(i, j, M, DP);
      }
    }
    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }

  public static int P(int n, int k, int M, int[][] DP) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, M, DP) + P(n - k, k, M, DP)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + DP[i][j]) % M;
      }
    }

    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = (X[i - 1] + DP[i][i]) % M;
    }

    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }

    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] DP = new int[6000][6000];
        for (int i = 0; i < 6000; i++) {
            for (int j = 0; j < 6000; j++) {
                DP[i][j] = -1;
            }
        }

        int[] X = new int[5500];
        for (int i = 0; i < 5500; i++) {
            for (int j = 0; j < i + 1; j++) {
                int n = i + 1;
                int k = j + 1;
                if (n < 0 || k < 1) {
                    DP[n][k] = 0;
                } else if (k == 1) {
                    DP[n][k] = 1;
                } else {
                    DP[n][k] = (DP[n][k - 1] + DP[n - k][k]) % M;
                }
                X[i] = X[i] + DP[i][j];
            }
        }

        int[] Y = new int[10800];
        for (int i = 0; i < 10800; i++) {
            Y[i] = Y[i - 1] + X[i >> 1];
        }

        int P = 0;
        for (int i = 1; i <= N; i++) {
            P = (P + X[i]) % M;
            if (2 * i > N) {
                P = (P - Y[2 * i - N]) % M;
            }
        }
        System.out.println(P);
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + P(i + 1, j + 1, DP)) % M;
      }
    }
    int[] X = new int[5500];
    for (int i = 0; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        X[i] = (X[i] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }
    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP) + P(n - k, k, DP)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      for (int j = 1; j <= i; j++) {
        P(i, j, M, DP);
      }
    }
    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }
  
  public static int P(int n, int k, int M, int[][] DP) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, M, DP) + P(n - k, k, M, DP)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] DP = new int[6000][6000];
        for (int i = 0; i < 6000; i++) {
            for (int j = 0; j < 6000; j++) {
                DP[i][j] = -1;
            }
        }

        int[] X = new int[5500];
        for (int i = 0; i < 5500; i++) {
            X[i] = 0;
        }
        for (int i = 0; i < 5500; i++) {
            for (int j = 0; j < i + 1; j++) {
                P(i + 1, j + 1, DP, M);
            }
        }

        int[] Y = new int[10800];
        for (int i = 0; i < 10800; i++) {
            Y[i] = 0;
        }
        for (int i = 0; i < 10800; i++) {
            Y[i] = Y[i] + X[i >> 1];
        }

        int P = 0;
        for (int i = 1; i <= N; i++) {
            P = (P + X[i]) % M;
            if (2 * i > N) {
                P = (P - Y[2 * i - N]) % M;
            }
        }

        System.out.println(P);
    }

    public static int P(int n, int k, int[][] DP, int M) {
        if (n < 0 || k < 1) {
            return 0;
        }
        if (DP[n][k] != -1) {
            return DP[n][k];
        }
        if (k == 1) {
            DP[n][k] = 1;
            return 1;
        }
        DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
        return DP[n][k];
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + P(i + 1, j + 1, DP, M)) % M;
      }
    }

    int[] X = new int[10800];
    for (int i = 0; i < 10800; i++) {
      X[i] = 0;
    }
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        X[i] = (X[i] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }

    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = 0;
    }
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }

    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP, int M) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP, M
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    for (int i = 0; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P(i + 1, j + 1, DP, M);
      }
    }
    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP, int M) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int N = scanner.nextInt();
    int M = scanner.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + DP[i][j]) % M;
      }
    }

    int[] X = new int[5500];
    for (int i = 0; i < 5500; i++) {
      X[i] = 0;
    }
    X[0] = 1;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        X[i] = (X[i] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }

    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = 0;
    }
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i] + X[i >> 1];
    }

    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];

    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P = 0;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P = (P + DP[i][j] + DP[i - j][j]) % M;
      }
    }

    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = (X[i - 1] + P) % M;
    }

    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = (Y[i - 1] + X[i >> 1]) % M;
    }

    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] DP = new int[6000][6000];
        for (int i = 0; i < 6000; i++) {
            for (int j = 0; j < 6000; j++) {
                DP[i][j] = -1;
            }
        }

        int[] X = new int[5500];
        for (int i = 0; i < 5500; i++) {
            X[i] = 0;
        }
        DP[0][0] = 1;
        for (int i = 0; i < 5500; i++) {
            for (int j = 0; j < i + 1; j++) {
                P(i + 1, j + 1, DP);
            }
        }

        int[] Y = new int[10800];
        for (int i = 0; i < 10800; i++) {
            Y[i] = Y[i - 1] + X[i >> 1];
        }

        int P = 0;
        for (int i = 1; i < N + 1; i++) {
            P = (P + X[i]) % M;
            if (2 * i > N) {
                P = (P - Y[2 * i - N]) % M;
            }
        }
        System.out.println(P);
    }

    public static int P(int n, int k, int[][] DP) {
        if (n < 0 || k < 1) {
            return 0;
        }
        if (DP[n][k] != -1) {
            return DP[n][k];
        }
        if (k == 1) {
            DP[n][k] = 1;
            return 1;
        }
        DP[n][k] = (P(n, k - 1, DP) + P(n - k, k, DP)) % M;
        return DP[n][k];
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        int n = i + 1;
        int k = j + 1;
        if (n < 0 || k < 1) {
          continue;
        }
        if (DP[n][k] != -1) {
          continue;
        }
        if (k == 1) {
          DP[n][k] = 1;
          continue;
        }
        DP[n][k] = (DP[n][k - 1] + DP[n - k][k]) % M;
      }
    }
    int[] Y = new int[10800];
    Y[0] = 1;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] DP = new int[6000][6000];
        for (int i = 0; i < 6000; i++) {
            for (int j = 0; j < 6000; j++) {
                DP[i][j] = -1;
            }
        }

        int[] X = new int[5500];
        X[0] = 1;
        for (int i = 1; i < 5500; i++) {
            for (int j = 0; j < i; j++) {
                P(i, j, DP, M);
            }
        }

        int[] Y = new int[10800];
        for (int i = 0; i < 10800; i++) {
            Y[i] = Y[i - 1] + X[i >> 1];
        }

        int P = 0;
        for (int i = 1; i <= N; i++) {
            P = (P + X[i]) % M;
            if (2 * i > N) {
                P = (P - Y[2 * i - N]) % M;
            }
        }

        System.out.println(P);
    }

    public static int P(int n, int k, int[][] DP, int M) {
        if (n < 0 || k < 1) {
            return 0;
        }
        if (DP[n][k] != -1) {
            return DP[n][k];
        }
        if (k == 1) {
            DP[n][k] = 1;
            return 1;
        }
        DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
        return DP[n][k];
    }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];

    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int P(int n, int k) {
      if (n < 0 || k < 1) {
        return 0;
      }
      if (DP[n][k] != -1) {
        return DP[n][k];
      }
      if (k == 1) {
        DP[n][k] = 1;
        return 1;
      }
      DP[n][k] = (P(n, k - 1) + P(n - k, k)) % M;
      return DP[n][k];
    }

    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P(i + 1, j + 1);
      }
    }

    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        X[i] = (X[i] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }

    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }

    int P = 0;
    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }

    int[] X = new int[5500];
    DP[0][0] = 1;
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P(i + 1, j + 1, DP, M);
      }
    }

    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1] % M;
    }

    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }

    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP, int M) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      for (int j = 1; j <= i; j++) {
        X[i] = (X[i] + DP[i][j] + DP[i - j][j]) % M;
      }
    }
    int[] Y = new int[10800];
    for (int i = 0; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }
}
[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        DP[i][j] = (DP[i][j] + DP[j][j] * DP[i - j][i - j]) % M;
      }
    }
    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i <= N; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P(i + 1, j + 1, DP, M);
      }
    }
    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP, int M) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
  [JAVA]
import java.util.Scanner;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int N = sc.nextInt();
    int M = sc.nextInt();
    int[][] DP = new int[6000][6000];
    for (int i = 0; i < 6000; i++) {
      for (int j = 0; j < 6000; j++) {
        DP[i][j] = -1;
      }
    }
    int[] X = new int[5500];
    X[0] = 1;
    for (int i = 1; i < 5500; i++) {
      X[i] = 0;
    }
    for (int i = 0; i < 5500; i++) {
      for (int j = 0; j < i + 1; j++) {
        P(i + 1, j + 1, DP, M);
      }
    }
    int[] Y = new int[10800];
    Y[0] = 0;
    for (int i = 1; i < 10800; i++) {
      Y[i] = Y[i - 1] + X[i >> 1];
    }
    int P = 0;
    for (int i = 1; i < N + 1; i++) {
      P = (P + X[i]) % M;
      if (2 * i > N) {
        P = (P - Y[2 * i - N]) % M;
      }
    }
    System.out.println(P);
  }

  public static int P(int n, int k, int[][] DP, int M) {
    if (n < 0 || k < 1) {
      return 0;
    }
    if (DP[n][k] != -1) {
      return DP[n][k];
    }
    if (k == 1) {
      DP[n][k] = 1;
      return 1;
    }
    DP[n][k] = (P(n, k - 1, DP, M) + P(n - k, k, DP, M)) % M;
    return DP[n][k];
  }
}

[/JAVA]
======
